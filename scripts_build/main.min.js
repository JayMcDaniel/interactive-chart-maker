(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {

    //utils
    var jq_extensions = require("./utils/jq_extensions.js");
    var utils_main = require("./utils/utils_main");

    //initial all chart options init
    var allChartOptionsInit = require("./initializers/all_chart_options_init.js");
    var all_chart_options = allChartOptionsInit();

    //draw chart
    var draw_chart = require("./draw_chart.js");
    var chart = draw_chart.init(all_chart_options);

    //write code to "#chart_output_code" function
    utils_main.writeCode(all_chart_options);

    //page init (navigation and keyboard entries)
    var navigation_setup = require("./navigation_setup.js");
    navigation_setup.initAllNavigation(all_chart_options);

    var keyboard_inputs = require("./keyboard_inputs");

    //all form updates - when updates are made, update the chart
    var allFormUpdates = require("./form_updates/all_form_updates.js");
    allFormUpdates(chart, all_chart_options);
});

},{"./draw_chart.js":15,"./form_updates/all_form_updates.js":16,"./initializers/all_chart_options_init.js":24,"./keyboard_inputs":38,"./navigation_setup.js":39,"./utils/jq_extensions.js":40,"./utils/utils_main":42}],2:[function(require,module,exports){
"use strict";

/** All Chart options constructor. combines all other options into main options object. Info at http://api.highcharts.com/highcharts */
var utils_main = require("../../utils/utils_main.js");

var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart;
    this.colors = o.colors;
    this.credits = o.credits;
    this.exporting = o.exporting;
    this.legend = o.legend;
    this.plotOptions = o.plotOptions;
    this.series = o.series;
    this.subtitle = o.subtitle;
    this.title = o.title;
    this.tooltip = o.tooltip;
    this.xAxis = o.xAxis;
    this.yAxis = o.yAxis;
};

module.exports = AllChartOptions;

},{"../../utils/utils_main.js":42}],3:[function(require,module,exports){
"use strict";

/** Chart options constructor. Info at http://api.highcharts.com/highcharts#chart */
var utils_main = require("../../utils/utils_main.js");

var ChartOptions = function ChartOptions(o) {

    this.renderTo = o.renderTo || "chart_display_area";
    this.margin = [o.margin[0] || 90, o.margin[1] || 40, o.margin[2] || 80, o.margin[3] || 75]; //[top,right,bottom,left]
    this.borderWidth = o.borderWidth || 0;
    this.plotBorderColor = o.plotBorderColor || '#fff';
    this.plotBorderWidth = o.plotBorderWidth || 0;
    this.type = o.type || 'line';
    this.zoomType = o.zoomType || null;
    this.alignTicks = o.alignTicks || false;
    this.inverted = o.inverted || false;
    this.ignoreHiddenSeries = o.ignoreHiddenSeries || true; //false for bubble charts so bubbles won't resize
};

module.exports = ChartOptions;

},{"../../utils/utils_main.js":42}],4:[function(require,module,exports){
'use strict';

/** Colors options constructor. Info at http://api.highcharts.com/highcharts#colors */
var utils_main = require("../../utils/utils_main.js");

var Colors = function Colors(o) {

    this.colors = o.colors || ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
};

module.exports = Colors;

},{"../../utils/utils_main.js":42}],5:[function(require,module,exports){
"use strict";

/** Credits options constructor. Info at http://api.highcharts.com/highcharts#credits */
var utils_main = require("../../utils/utils_main.js");

var Credits = function Credits(o) {
    this.href = "http://www.bls.gov";

    this.position = {
        align: 'left',
        x: 10,
        y: o.position ? o.position.y || -20 : -20
    };

    this.style = {
        cursor: "default",
        color: "#2C2C2C"
    };

    this.text = o.text || "";
    this.useHTML = true;
};

module.exports = Credits;

},{"../../utils/utils_main.js":42}],6:[function(require,module,exports){
"use strict";

/** Exporting options constructor. Info at http://api.highcharts.com/highcharts#exporting */
var utils_main = require("../../utils/utils_main.js");

var Exporting = function Exporting(o) {

    this.buttons = {
        contextButton: {
            enabled: true,
            verticalAlign: 'bottom',
            x: -10
        }
    };
};

module.exports = Exporting;

},{"../../utils/utils_main.js":42}],7:[function(require,module,exports){
'use strict';

/** legend options constructor. Info at http://api.highcharts.com/highcharts#legend */
var utils_main = require("../../utils/utils_main.js");

var Legend = function Legend(o) {

    this.align = o.align || 'left';
    this.backgroundColor = o.backgroundColor || 'none';
    this.borderColor = o.borderColor || 'none';
    this.borderWidth = o.borderWidth || 0;
    this.enabled = o.enabled || true;
    this.floating = o.floating || false;
    this.itemDistance = o.itemDistance || 30;
    this.layout = o.layout || 'horizontal';
    this.reversed = o.reversed || false;
    this.shadow = o.shadow || false;
    this.useHTML = o.useHTML || false;
    this.verticalAlign = o.verticalAlign || 'top';
    this.width = o.width;
    this.x = o.x || 0;
    this.y = o.y || 30;

    this.itemStyle = {
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
        color: '#000'
    };
    this.itemHiddenStyle = {
        color: 'gray'
    };
    this.itemHoverStyle = {
        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
    };
};

module.exports = Legend;

},{"../../utils/utils_main.js":42}],8:[function(require,module,exports){
"use strict";

/** PlotOptions constructor. Info at http://api.highcharts.com/highcharts#plotOptions*/
var utils_main = require("../../utils/utils_main.js");

var PlotOptions = function PlotOptions(o) {

    //for all chart types
    if (o.series) {
        this.series = {
            events: {
                legendItemClick: o.series.events.legendItemClick
            },
            dataLabels: {
                enabled: o.series.dataLabels.enabled || false
            },
            pointPlacement: o.series.pointPlacement || null
        };
    }
    //just for column and bar charts
    if (o.column || o.bar) {
        this.series.stacking = o.series.stacking || null;
        this.series.pointPadding = o.series.pointPadding || 0.1; //0 is tight, 1 is loose
        this.series.groupPadding = o.series.groupPadding || 0.2;
        this.series.minPointLength = o.series.minPointLength || 2;
    }

    //just for bubble charts
    if (o.bubble) {
        this.bubble = {
            maxSize: o.bubble.maxSize || 50,
            sizeBy: 'width' //instead of 'area', seems more accurate
        };
    }

    //just for line charts
    if (o.line) {
        this.line = {
            lineWidth: 1.5,
            states: {
                hover: {
                    lineWidth: 4
                }
            },
            marker: {
                enabled: o.line.marker ? o.line.marker.enabled || false : false,
                states: {
                    hover: {
                        enabled: true,
                        radius: 5
                    }
                }
            }
        };
    }
};

module.exports = PlotOptions;

},{"../../utils/utils_main.js":42}],9:[function(require,module,exports){
"use strict";

/** series (an array of objs) options constructor. Info at http://api.highcharts.com/highcharts#series */
var utils_main = require("../../utils/utils_main.js");

var Series = function Series(o) {

    this.series = o || [{}];
};

module.exports = Series;

},{"../../utils/utils_main.js":42}],10:[function(require,module,exports){
"use strict";

/** subtitle options constructor. Info at http://api.highcharts.com/highcharts#subtitle */
var utils_main = require("../../utils/utils_main.js");

var Subtitle = function Subtitle(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'normal',
        fontSize: '12px'
    };
};

module.exports = Subtitle;

},{"../../utils/utils_main.js":42}],11:[function(require,module,exports){
"use strict";

/** title options constructor. Info at http://api.highcharts.com/highcharts#title */
var utils_main = require("../../utils/utils_main.js");

var Title = function Title(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'bold',
        fontSize: '14px'
    };
};

module.exports = Title;

},{"../../utils/utils_main.js":42}],12:[function(require,module,exports){
'use strict';

/** tooltip options constructor. Info at http://api.highcharts.com/highcharts#tooltip */
var utils_main = require("../../utils/utils_main.js");

var Tooltip = function Tooltip(o) {
    this.backgroundColor = '#FEFFEF';
    this.crosshairs = o.crosshairs || [false, false];
    this.formatter = o.formatter;

    this.style = {
        color: '#000000',
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif'
    };

    this.useHTML = true;
};

module.exports = Tooltip;

},{"../../utils/utils_main.js":42}],13:[function(require,module,exports){
'use strict';

/** xAxis options constructor. Info at http://api.highcharts.com/highcharts#xAxis */
var utils_main = require("../../utils/utils_main.js");

var XAxis = function XAxis(o) {

    this.categories = o.categories;
    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 0;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter || undefined : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineWidth = o.lineWidth || 1.2;
    this.lineColor = o.lineColor || 'gray';
    this.plotBands = o.plotBands || [];
    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : '',
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };
};

module.exports = XAxis;

},{"../../utils/utils_main.js":42}],14:[function(require,module,exports){
'use strict';

/** yAxis options constructor. Info at http://api.highcharts.com/highcharts#yAxis */
var utils_main = require("../../utils/utils_main.js");

var yAxis = function yAxis(o) {

    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 1;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {

        format: o.labels ? o.labels.format : { value: value },
        formatter: o.labels ? o.labels.formatter : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineColor = o.lineColor || 'gray';
    this.lineWidth = o.lineWidth || 1;
    this.max = o.max || null;
    this.min = o.min || null;
    this.opposite = o.opposite || false;
    this.plotBands = o.plotBands || [];

    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 1
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';
    this.tickWidth = o.tickWidth || 1;

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : 6,
        align: o.title ? o.title.align || 'middle' : 'middle',
        offset: 20,
        rotation: 0,
        x: o.title ? o.title.x || 35 : 35,
        y: -15,

        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };

    this.type = o.type || 'linear';
};

module.exports = yAxis;

},{"../../utils/utils_main.js":42}],15:[function(require,module,exports){
"use strict";

/** takes all_chart_options and prints a chart to the screen */

var draw_chart = {

    init: function init(all_chart_options) {
        var chart = new Highcharts.Chart(all_chart_options);
        return chart;
    }

};

module.exports = draw_chart;

},{}],16:[function(require,module,exports){
"use strict";

/** listens for any form updates and calls appropriate function */
var update_template = require("./update_template.js");
var updateChartType = require("./update_chart_type.js");
var utils_forms = require("../utils/utils_forms");
var update_legend = require("./update_legend.js");
var update_x_axis = require("./update_x_axis.js");
var update_y_axis = require("./update_y_axis.js");
var update_tooltip = require("./update_tooltip.js");
var update_data = require("./update_data.js");

var allFormUpdates = function allFormUpdates(chart, all_chart_options) {

    /** CHART TYPE CHANGES */

    //chart type changed
    $.each(['line', 'bar', 'column', 'bubble', 'scatter', "drilldown"], function (i, type) {
        $('#chart_type_' + type).click(function () {
            updateChartType(i, type, chart, all_chart_options);
        });
    });

    /** TEMPLATE CHANGES */

    //chart width
    $("#chart_width_textinput").keyup(function () {
        update_template.resize($(this).val(), "width", chart);
    });

    //chart height
    $("#chart_height_textinput").keyup(function () {
        update_template.resize($(this).val(), "height", chart);
    });

    //inner chart margins
    $(".margin_input").keyup(function () {

        var margins_arr = utils_forms.getClassValuesArray("margin_input");

        update_template.margin(margins_arr, chart, all_chart_options);
    });

    /*CHART DATA CHANGES - (x-axis categories and series array)*/
    $(".load_series_from_icon").click(function () {
        update_data.updateData(chart, all_chart_options);
    });

    /** LEGEND CHANGES */

    //legend layout changed
    $("#legend_layout_select").change(function () {
        update_legend.updateLayout($(this).val(), chart, all_chart_options);
    });

    //legend reverse ceckbox changed
    $("#legend_reverse_layout_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_legend.updateIsReversed(val, chart, all_chart_options);
    });

    //legend X or Y placement values changed
    $("#legend_placement_x, #legend_placement_y").keyup(function () {
        var newX = Number($("#legend_placement_x").val());
        var newY = Number($("#legend_placement_y").val());

        update_legend.updateXYpositions(newX, newY, chart, all_chart_options);
    });

    /** X-AXIS CHANGES */

    //x-axis title textarea changed
    $("#chart_x_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_x_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //x-axis tickmark interval input changed
    $("#chart_x_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_x_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    /** Y-AXIS CHANGES */

    //y-axis title textarea changed
    $("#chart_y_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_y_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //y-axis title indent changed
    $("#chart_y_axis_x_position_input").keyup(function () {
        var newXPosition = Number($(this).val());
        update_y_axis.updateXPosition(newXPosition, chart, all_chart_options);
    });

    //y-axis tickmark interval input changed
    $("#chart_y_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_y_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    //y-axis max input changed
    $("#chart_y_axis_max_input").keyup(function () {
        var newMax = Number($(this).val());
        update_y_axis.updateMax(newMax, chart, all_chart_options);
    });

    //y-axis min input changed
    $("#chart_y_axis_min_input").keyup(function () {
        var newMin = Number($(this).val());
        update_y_axis.updateMin(newMin, chart, all_chart_options);
    });

    //y-axis opposite side ceckbox changed
    $("#chart_y_axis_opposite_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsOpposite(val, chart, all_chart_options);
    });

    //y-axis log ceckbox changed
    $("#chart_y_axis_log_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsLog(val, chart, all_chart_options);
    });

    //y-axis dollar / percent or decimal selects changed (format)
    $("#chart_y_axis_signs_select, #chart_y_axis_decimals_select").change(function () {
        var sign = $("#chart_y_axis_signs_select").val();
        var decimals = $("#chart_y_axis_decimals_select").val();
        update_y_axis.updateFormat(sign, decimals, chart, all_chart_options);
    });

    /** TOOLTIP CHANGES */

    //change shared tooltip checkbox, decimals, signs, or mulitplier selects
    $("#chart_tooltip_shared_checkbox, #chart_tooltip_force_decimals_select, #chart_tooltip_signs_select, #chart_tooltip_y_multiple_select").change(function () {

        update_tooltip.updateToolTip(chart, all_chart_options);
    });

    //call update tooltip after page and chart is loaded (has to be on a callback with the 'chart' object)
    update_tooltip.updateToolTip(chart, all_chart_options);
};

module.exports = allFormUpdates;

},{"../utils/utils_forms":41,"./update_chart_type.js":17,"./update_data.js":18,"./update_legend.js":19,"./update_template.js":20,"./update_tooltip.js":21,"./update_x_axis.js":22,"./update_y_axis.js":23}],17:[function(require,module,exports){
"use strict";

/** when a chart icon is clicked, this function is called - changes the chart type shown */

var updateChartType = function updateChartType(i, type, chart, all_chart_options) {

    var y_axis_title_align;

    if (type === "bar") {
        //fix y axis position
        chart.inverted = true;
        y_axis_title_align = "middle";
        //hide non-relevant elements
        $(".not_bar").hide();
    } else {
        chart.inverted = false;
        y_axis_title_align = "high";
        $(".not_bar").show();
    }

    if (type === "drilldown") {
        type = "column";
    }

    chart.xAxis[0].update({}, false);
    chart.yAxis[0].update({}, false);

    $.each(chart.series, function () {
        this.update({
            type: type
        });
    });

    chart.yAxis[0].setTitle({
        align: y_axis_title_align
    });

    all_chart_options.chart.type = type;
    all_chart_options.yAxis.title.align = y_axis_title_align;
};

module.exports = updateChartType;

},{}],18:[function(require,module,exports){
"use strict";

var parseTableInput = require("../initializers/parse_table_input.js");

var update_data = {

    updateData: function updateData(chart, all_chart_options) {
        var chart_type = $(".selected_chart_type").divVal();
        var parsed_table_output = parseTableInput($("#table_input_textarea").val(), chart_type);

        //update x-axis categories
        chart.xAxis[0].update({
            categories: parsed_table_output.x_axis_categories
        }, false);

        //remove existing series array
        $(chart.series).each(function () {
            this.remove(false); //false to not redraw yet
        });

        //add new series

        $(parsed_table_output.series).each(function () {
            chart.addSeries(this, false); //false to not redraw yet
        });
        chart.redraw(true);
    }

};

module.exports = update_data;

},{"../initializers/parse_table_input.js":30}],19:[function(require,module,exports){
"use strict";

/** when legend options are changed in the side area */

var update_legend = {

    /* decide if the legend should be reverse order */
    updateIsReversed: function updateIsReversed(val, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.reversed = val;
        legend.render();

        all_chart_options.legend.reversed = val;
    },

    /** if 'no legend' is selected, hide the legend, and set options, else, show it with the correct layout */
    updateLayout: function updateLayout(val, chart, all_chart_options) {

        var legend = chart.legend;
        if (val === "no_legend") {
            legend.group.hide();
            legend.box.hide();
            legend.display = false;
            legend.options.enabled = false;
            legend.render(false);

            val = undefined;
        } else {

            legend.options.layout = val;
            legend.render(false);
            legend.group.show();
            legend.box.show();
            legend.display = true;
            legend.options.enabled = true;
        }

        all_chart_options.legend.layout = val;
        all_chart_options.legend.enabled = legend.options.enabled;
    },

    /** update X and Y positions on legend */

    updateXYpositions: function updateXYpositions(newX, newY, chart, all_chart_options) {
        var legend = chart.legend;
        legend.options.x = newX;
        legend.options.y = newY;
        legend.render(false);

        all_chart_options.legend.x = newX;
        all_chart_options.legend.y = newY;
    }

};

module.exports = update_legend;

},{}],20:[function(require,module,exports){
"use strict";

var update_template = {
    resize: function resize(val, dimension, chart) {
        val = Number(val);
        if (!isNaN(val)) {
            $(".chart_display_area").css(dimension, val + "px");
        }
        chart.reflow();
    },

    margin: function margin(margins_arr, chart, all_chart_options) {

        $.each(chart.axes, function (i, e) {
            e.isDirty = true; //to tell axes to refresh
        });
        chart.margin = margins_arr;
        chart.redraw(false);

        all_chart_options.chart.margin = margins_arr;
    }
};

module.exports = update_template;

},{}],21:[function(require,module,exports){
"use strict";

/** when tooltip options are changed in the side area, these methods are called */
var utils_main = require("../utils/utils_main.js");
var utils_forms = require("../utils/utils_forms");

var addCommas = utils_main.addCommas;

var update_tooltip = {

    /** update if tooltip is shared (all series showing on hover) */
    updateToolTip: function updateToolTip(chart, all_chart_options) {

        var is_shared = utils_forms.getCheckBoxValue($("#chart_tooltip_shared_checkbox"));
        var decimals = Number($("#chart_tooltip_force_decimals_select").val());
        var signs = $("#chart_tooltip_signs_select").val();
        var multiplier = $("#chart_tooltip_y_multiple_select").val();
        var chart_type = $(".selected_chart_type").divVal();

        var new_tooltip;
        var signs_arr = [signs === "$" ? "$" : "", signs === "%" ? "%" : ""];

        //SHARED TOOLTIP
        if (is_shared) {

            if (decimals > 0) {
                //use decimal formatter

                new_tooltip = function new_tooltip() {

                    var shared_tooltip_arr = [];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push("<b>" + this.name + "</b> <br>" + this.points[point.x].x + ": " + signs_arr[0] + Highcharts.numberFormat(this.points[point.x].y * multiplier, decimals) + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>');
                };
            } else {
                //don't use decimal formatter

                new_tooltip = function new_tooltip() {

                    var shared_tooltip_arr = ["<b>" + this.key + "</b>"];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push(this.name + ": " + signs_arr[0] + addCommas(this.points[point.x].y * multiplier) + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>');
                };
            }

            //NOT SHARED TOOLTIP
        } else {

                if (decimals > 0) {
                    //use decimal formatter
                    new_tooltip = function new_tooltip() {
                        return "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1];
                    };
                } else {
                    //don't use decimal formatter
                    new_tooltip = function new_tooltip() {
                        return "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + addCommas(this.y * multiplier) + signs_arr[1];
                    };
                }
            }

        if (!chart) {
            //for use in tooltip_init
            return new_tooltip;
        }
        chart.tooltip.options.formatter = new_tooltip;

        all_chart_options.tooltip.formatter = utils_main.stringifyFormatter(new_tooltip, decimals, multiplier, signs_arr);
    }

};

module.exports = update_tooltip;

},{"../utils/utils_forms":41,"../utils/utils_main.js":42}],22:[function(require,module,exports){
"use strict";

/** when X-axis options are changed in the side area, these methods are called */

var update_x_axis = {

    /** update the x axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.xAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.xAxis.title.text = newTitle;
    },

    /** update x axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        if (isNaN(newInterval) || newInterval === 0) {
            newInterval = undefined;
        };

        if (!chart) {
            // called when this is used in x_axis_init
            return newInterval;
        }

        if (newInterval > chart.xAxis[0].dataMax) {
            newInterval = chart.xAxis[0].dataMax;
        }

        chart.xAxis[0].update({
            tickInterval: newInterval

        });
        all_chart_options.xAxis.tickInterval = newInterval;
    }

};

module.exports = update_x_axis;

},{}],23:[function(require,module,exports){
"use strict";

/** when Y-axis options are changed in the side area, these methods are called */
var utils_main = require("../utils/utils_main.js");

var update_y_axis = {

    /** update format when dollar / percent signs select is changed */
    updateFormat: function updateFormat(sign, decimals, chart, all_chart_options) {

        var newFormat = "{value:,." + decimals + "f}";
        if (sign === "$") {
            newFormat = "${value:,." + decimals + "f}";
        }

        if (sign === "%") {
            newFormat = "{value:,." + decimals + "f}%";
        }

        if (!chart) {
            // called when this is used in y_axis_init
            return newFormat;
        }

        chart.yAxis[0].update({
            labels: {
                format: newFormat
            }
        });

        all_chart_options.yAxis.format = newFormat;
    },

    /** update if y-axis is log */
    updateIsLog: function updateIsLog(val, chart, all_chart_options) {

        var type = val === true ? "logarithmic" : "linear";
        if (!chart) {
            // called when this is used in y_axis_init
            return type;
        }

        chart.yAxis[0].update({
            type: type
        });
        all_chart_options.yAxis.type = type;
    },

    /** update if y axis labels are on opposite side */
    updateIsOpposite: function updateIsOpposite(val, chart, all_chart_options) {
        chart.yAxis[0].update({
            opposite: val
        });
        all_chart_options.yAxis.opposite = val;
    },

    /** update y-axis max */
    updateMax: function updateMax(newMax, chart, all_chart_options) {
        newMax = utils_main.checkforUndefined(newMax);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMax;
        }

        chart.yAxis[0].update({
            max: newMax
        });

        all_chart_options.yAxis.max = newMax;
    },

    /** update y-axis min */
    updateMin: function updateMin(newMin, chart, all_chart_options) {
        newMin = utils_main.checkforUndefined(newMin);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMin;
        }

        chart.yAxis[0].update({
            min: newMin
        });

        all_chart_options.yAxis.min = newMin;
    },

    /** update the y axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.yAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.yAxis.title.text = newTitle;
    },

    /** update y axis x-position (title.x) */

    updateXPosition: function updateXPosition(newXPosition, chart, all_chart_options) {

        newXPosition = utils_main.checkforUndefined(newXPosition);

        chart.yAxis[0].setTitle({
            x: newXPosition
        });

        all_chart_options.yAxis.title.x = newXPosition;
    },

    /** update y axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        newInterval = utils_main.checkforUndefined(newInterval);

        if (!chart) {
            // called when this is used in y_axis_init
            return newInterval;
        }

        if (newInterval > chart.yAxis[0].dataMax) {
            newInterval = chart.yAxis[0].dataMax;
        }

        chart.yAxis[0].update({
            tickInterval: newInterval

        });
        all_chart_options.yAxis.tickInterval = newInterval;
    }

};

module.exports = update_y_axis;

},{"../utils/utils_main.js":42}],24:[function(require,module,exports){
"use strict";

/** create and return an instance of all_chart_options */

var AllChartOptions = require("../constructors/charts/all_chart_options.js"),
    chartInit = require("./chart_init.js"),
    colorsInit = require("./colors_init.js"),
    creditsInit = require("./credits_init.js"),
    exportingInit = require("./exporting_init.js"),
    legendInit = require("./legend_init.js"),
    plotOptionsInit = require("./plot_options_init.js"),
    seriesInit = require("./series_init.js"),
    subtitleInit = require("./subtitle_init.js"),
    titleInit = require("./title_init.js"),
    tooltipInit = require("./tooltip_init.js"),
    xAxisInit = require("./x_axis_init.js"),
    yAxisInit = require("./y_axis_init.js"),
    parseTableInput = require("./parse_table_input.js");

var allChartOptionsInit = function allChartOptionsInit() {

    var chart_type = $(".selected_chart_type").divVal();
    var parsed_table_output = parseTableInput($("#table_input_textarea").val(), chart_type);

    //get options from individual inits
    var options = {
        chart: chartInit(chart_type),
        colors: colorsInit(),
        credits: creditsInit(),
        // exportig: exportingInit(),
        legend: legendInit(),
        plotOptions: plotOptionsInit(chart_type),
        series: seriesInit(parsed_table_output.series),
        subtitle: subtitleInit(),
        title: titleInit(parsed_table_output.title_text),
        tooltip: tooltipInit(),
        xAxis: xAxisInit(parsed_table_output.x_axis_categories),
        yAxis: yAxisInit(chart_type)

    };

    var all_chart_options = new AllChartOptions(options);
    return all_chart_options;
};

module.exports = allChartOptionsInit;

},{"../constructors/charts/all_chart_options.js":2,"./chart_init.js":25,"./colors_init.js":26,"./credits_init.js":27,"./exporting_init.js":28,"./legend_init.js":29,"./parse_table_input.js":30,"./plot_options_init.js":31,"./series_init.js":32,"./subtitle_init.js":33,"./title_init.js":34,"./tooltip_init.js":35,"./x_axis_init.js":36,"./y_axis_init.js":37}],25:[function(require,module,exports){
"use strict";

/** Initializer for "chart" options section of all_chart_options. Creates and returns a new instance */

var ChartOptions = require("../constructors/charts/chart.js");

var chartInit = function chartInit(chart_type) {

    if (chart_type === "drilldown") {
        chart_type = "column";
    }

    //load options from user inputs
    var options = {
        margin: [Number($("#top_margin_textinput").val()), Number($("#right_margin_textinput").val()), Number($("#bottom_margin_textinput").val()), Number($("#left_margin_textinput").val())],
        renderTo: $("#chart_id_textinput").val(),

        type: chart_type
    };

    var chart_options = new ChartOptions(options);
    return chart_options;
};

module.exports = chartInit;

},{"../constructors/charts/chart.js":3}],26:[function(require,module,exports){
"use strict";

/** Initializer for "colors" options section of all_chart_options. Creates and returns a new instance */

var Colors = require("../constructors/charts/colors.js");

var colorsInit = function colorsInit() {

    //load options from user inputs
    var options = {};

    var colors = new Colors(options);
    return colors.colors;
};

module.exports = colorsInit;

},{"../constructors/charts/colors.js":4}],27:[function(require,module,exports){
"use strict";

/** Initializer for "credits" options section of all_chart_options. Creates and returns a new instance */

var Credits = require("../constructors/charts/credits.js");

var creditsInit = function creditsInit() {

    //load options from user inputs
    var options = {
        text: $("#chart_credits_text_textarea").val(),
        position: {
            y: Number($("#chart_credits_y_position_input").val())
        }

    };

    var credits = new Credits(options);
    return credits;
};

module.exports = creditsInit;

},{"../constructors/charts/credits.js":5}],28:[function(require,module,exports){
"use strict";

/** Initializer for "exporting" options section of all_chart_options. Creates and returns a new instance */

var Exporting = require("../constructors/charts/exporting.js");

var exportingInit = function exportingInit() {

    //load options from user inputs
    var options = {};

    var exporting = new Exporting(options);
    return exporting;
};

module.exports = exportingInit;

},{"../constructors/charts/exporting.js":6}],29:[function(require,module,exports){
"use strict";

/** Initializer for "legend" options section of all_chart_options. Creates and returns a new instance */

var Legend = require("../constructors/charts/legend.js");

var legendInit = function legendInit() {

    var getLegendLayout = function getLegendLayout() {
        var legend_layout_val = $("#legend_layout_select").val();
        return legend_layout_val !== "no_legend" ? legend_layout_val : undefined;
    };

    //load options from user inputs
    var options = {
        layout: getLegendLayout(),
        x: Number($("#legend_placement_x").val()),
        y: Number($("#legend_placement_y").val())

    };

    var legend = new Legend(options);
    return legend;
};

module.exports = legendInit;

//
///** legend options constructor. Info at http://api.highcharts.com/highcharts#legend */
//var utils_main = require("../../utils/utils_main.js");
//
//var Legend = function (o) {
//
//    this.align = o.align || 'center';
//    this.backgroundColor = o.backgroundColor || 'none';
//    this.borderColor = o.borderColor || 'none';
//    this.borderWidth = o.borderWidth || 0;
//    this.enabled = o.enabled || true;
//    this.floating = o.floating || false;
//    this.itemDistance = o.itemDistance || 30;
//    this.layout = o.layout || 'horizontal';
//    this.reversed = o.reversed || false;
//    this.shadow = o.shadow || false;
//    this.useHTML = o.useHTML || false;
//    this.verticalAlign = o.verticalAlign || 'top';
//    this.width = o.width;
//    this.x = o.x || 0;
//    this.y = o.y || 30;
//
//    this.itemStyle = {
//        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
//        color: '#000'
//    };
//    this.itemHiddenStyle = {
//        color: 'gray'
//    };
//    this.itemHoverStyle = {
//        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
//    }
//
//}
//
//
//Legend.prototype.setOption = utils_main.setOption;
//
//module.exports = Legend;

},{"../constructors/charts/legend.js":7}],30:[function(require,module,exports){
"use strict";

/** takes the table html from a given textarea and parses it into an object, depending on useer-selected inputs */

/** parsing function for typical chart types (line, bar, column) */
var parseForTypicalChart = function parseForTypicalChart(input, output, chart_type, chart) {

    /** If loading series names from column heads is selected*/
    if ($(".selected_load_series_from").divVal() === "column_heads") {

        //load x-axis categories from row heads
        output.x_axis_categories = [];
        $("tbody th", input).each(function () {
            output.x_axis_categories.push($.trim($(this).text()));
        });

        //load series object names from column heads, and data from each column tds
        output.series = [];

        $("thead tr:last th:gt(0)", input).each(function (i) {
            var seriesObj = {
                name: $.trim($.trim($(this).text())),
                data: []
            };

            //data from each column's tds
            $("tbody tr", input).each(function () {
                var thisRow = $(this);
                $("td:eq(" + i + ")", thisRow).each(function () {
                    seriesObj.data.push(Number($.trim($(this).text())));
                });
            });

            output.series.push(seriesObj);
        });

        /** Else if loading series names from row heads is selected*/
    } else {

            //load x-axis categories from column heads
            output.x_axis_categories = [];
            $("thead th:gt(0)", input).each(function () {
                output.x_axis_categories.push($.trim($(this).text()));
            });

            //load series object names from row heads, and data from row tds
            output.series = [];
            $("tbody tr", input).each(function () {

                var thisRow = $(this);

                var seriesObj = {
                    name: $.trim($("th:eq(0)", thisRow).text()),
                    data: []
                };

                //get data values from each row's td cells
                $("td", thisRow).each(function () {
                    seriesObj.data.push(Number($.trim($(this).text())));
                });

                output.series.push(seriesObj);
            });
        }
}; //end parseForTypicalChart()

/** parsing function for bubble charts */
var parseForBubble = function parseForBubble(input, output) {};

/** parsing function for scatter charts */
var parseForScatter = function parseForScatter(input, output) {};

/** parsing function for drilldown charts */
var parseForDrilldown = function parseForDrilldown(input, output) {};

/** parsing function for map charts */
var parseForMap = function parseForMap(input, output) {};

var parseTableInput = function parseTableInput(input, chart_type) {

    var output = {};

    //add chart title (same for all types of charts)
    output.title_text = $("caption", input).text();

    /** Depending on the chart type, start that parsing */
    if (["line", "bar", "column"].indexOf(chart_type) > -1) {
        parseForTypicalChart(input, output, chart_type);
    } else if (chart_type == "bubble") {
        parseForBubble(input, output);
    } else if (chart_type == "scatter") {
        parseForScatter(input, output);
    } else if (chart_type == "drilldown") {
        parseForDrilldown(input, output);
    } else if (chart_type == "map") {
        parseForMap(input, output);
    }

    return output;
};

module.exports = parseTableInput;

},{}],31:[function(require,module,exports){
"use strict";

/** Initializer for "plotOptions" options section of all_chart_options. Creates and returns a new instance */

var PlotOptions = require("../constructors/charts/plot_options.js");

var plotOptionsInit = function plotOptionsInit(chart_type) {

    //load options from user inputs
    var options = {
        series: {
            events: {},
            dataLabels: {}
        }
    };

    options[chart_type] = {};

    var plotOptions = new PlotOptions(options);
    return plotOptions;
};

module.exports = plotOptionsInit;

},{"../constructors/charts/plot_options.js":8}],32:[function(require,module,exports){
"use strict";

/** Initializer for "series" options section of all_chart_options. Creates and returns a new instance */

var Series = require("../constructors/charts/series.js");

var seriesInit = function seriesInit(series) {

    //load options from user inputs
    var options = series;

    var series = new Series(options);
    return series.series;
};

module.exports = seriesInit;

},{"../constructors/charts/series.js":9}],33:[function(require,module,exports){
"use strict";

/** Initializer for "subtitle" options section of all_chart_options. Creates and returns a new instance */

var Subtitle = require("../constructors/charts/subtitle.js");

var subtitleInit = function subtitleInit() {

    //load options from user inputs
    var options = {};

    var subtitle = new Subtitle(options);
    return subtitle;
};

module.exports = subtitleInit;

},{"../constructors/charts/subtitle.js":10}],34:[function(require,module,exports){
"use strict";

/** Initializer for "title" options section of all_chart_options. Creates and returns a new instance */

var Title = require("../constructors/charts/title.js");

var titleInit = function titleInit(title_text) {

    //load options from user inputs
    var options = {
        text: title_text
    };

    var title = new Title(options);
    return title;
};

module.exports = titleInit;

},{"../constructors/charts/title.js":11}],35:[function(require,module,exports){
"use strict";

/** Initializer for "tooltip" options section of all_chart_options. Creates and returns a new instance */

var Tooltip = require("../constructors/charts/tooltip.js");
var utils_forms = require("../utils/utils_forms.js");
var update_tooltip = require("../form_updates/update_tooltip.js");

var tooltipInit = function tooltipInit() {

    //load options from user inputs
    var options = {
        formatter: undefined

    };

    var tooltip = new Tooltip(options);
    return tooltip;
};

module.exports = tooltipInit;

},{"../constructors/charts/tooltip.js":12,"../form_updates/update_tooltip.js":21,"../utils/utils_forms.js":41}],36:[function(require,module,exports){
"use strict";

/** Initializer for "xAxis" options section of all_chart_options. Creates and returns a new instance */
var update_x_axis = require("../form_updates/update_x_axis.js");

var XAxis = require("../constructors/charts/x_axis.js");

var xAxisInit = function xAxisInit(categories) {

    //load options from user inputs
    var options = {

        categories: categories || undefined,
        title: {
            text: $("#chart_x_axis_title_textarea").val()
        },
        tickInterval: update_x_axis.updateTickmarkInterval(Number($("#chart_x_axis_tickmark_interval_input").val()))

    };

    var xAxis = new XAxis(options);
    return xAxis;
};

module.exports = xAxisInit;

},{"../constructors/charts/x_axis.js":13,"../form_updates/update_x_axis.js":22}],37:[function(require,module,exports){
"use strict";

/** Initializer for "yAxis" options section of all_chart_options. Creates and returns a new instance */
var utils_main = require("../utils/utils_main.js");
var YAxis = require("../constructors/charts/y_axis.js");
var update_y_axis = require("../form_updates/update_y_axis.js");
var utils_forms = require("../utils/utils_forms.js");

var yAxisInit = function yAxisInit(chart_type) {

    //load options from user inputs
    var options = {

        labels: {
            format: update_y_axis.updateFormat($("#chart_y_axis_signs_select").val(), $("#chart_y_axis_decimals_select").val()) //val, decimals
        },

        max: update_y_axis.updateMax(Number($("#chart_y_axis_max_input").val())),
        min: update_y_axis.updateMin(Number($("#chart_y_axis_min_input").val())),
        type: update_y_axis.updateIsLog(utils_forms.getCheckBoxValue($("#chart_y_axis_log_checkbox"))),
        opposite: utils_forms.getCheckBoxValue($("#chart_y_axis_opposite_checkbox")),
        tickInterval: update_y_axis.updateTickmarkInterval(Number($("#chart_y_axis_tickmark_interval_input").val())),

        title: {
            text: $("#chart_y_axis_title_textarea").val(),
            align: chart_type === "bar" ? "middle" : "high",
            x: Number($("#chart_y_axis_x_position_input").val())
        }

    };

    var yAxis = new YAxis(options);
    return yAxis;
};

module.exports = yAxisInit;

},{"../constructors/charts/y_axis.js":14,"../form_updates/update_y_axis.js":23,"../utils/utils_forms.js":41,"../utils/utils_main.js":42}],38:[function(require,module,exports){
"use strict";

module.exports = function () {

    var keyboard_inputs = {

        bindNumberEntryInputs: function bindNumberEntryInputs() {

            var adjValue = function adjValue(val, direction) {
                var val = Number(val);
                if (!isNaN(val)) {
                    return direction === "+" ? val + 10 : val - 10;
                } else {
                    return val;
                }
            };

            $(".number_entry").keyup(function (e) {
                if (e.keyCode === 38) {
                    //up pushed
                    $(this).val(adjValue($(this).val(), "+"));
                } else if (e.keyCode === 40) {
                    $(this).val(adjValue($(this).val(), "-"));
                }
            });
        }

    };

    keyboard_inputs.bindNumberEntryInputs();
}();

},{}],39:[function(require,module,exports){
"use strict";

var utils_main = require("./utils/utils_main.js");

/** object that contains functions for all the navigation, ie changing between options and chart types */
var navigation_setup = {

    /** when tabs on left side nav bar are clicked, options displayed are changed */
    sideNavTabsChange: function sideNavTabsChange() {

        $("#side_nav_tabs .tab").click(function () {
            //change selected menu tab
            $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
            $(this).addClass("selected_tab");

            //change display div showing
            var selectedID = "#" + $(this).attr("id").replace("tab", "display");
            $("#side_display .selected_display").removeClass("selected_display");
            $(selectedID).addClass("selected_display");
        });
    },

    /** when chart code is entered, update */
    chartOutputCodeFocus: function chartOutputCodeFocus(all_chart_options) {
        $("#chart_output_code").click(function () {
            utils_main.writeCode(all_chart_options);
        });
    },

    /** when chart type icon is clicked and changed */
    chartTypeIconChange: function chartTypeIconChange() {

        $("#chart_type_icons .chart_type_icon").click(function () {
            //change selected icon
            $("#chart_type_icons .chart_type_icon").removeClass("selected_chart_type");
            $(this).addClass("selected_chart_type");
            var chart_type = $(this).divVal();

            //hide stuff unrelated to that chart type
            if (["line", "bar", "column"].indexOf(chart_type) === -1) {
                $(".show_line, .show_bar, .show_column").hide();
            } else {
                $(".show_line, .show_bar, .show_column").show();
            }
        });
    },

    /** when clear next text area button (X) is clicked, find and clear the text of the next textarea */
    clearNextTextareaClick: function clearNextTextareaClick() {

        $(".clear_next_textarea_button").click(function () {
            $(this).next("textarea").val("");
        });
    },

    /** when a help icon is clicked */

    helpIconClick: function helpIconClick() {

        $(".help_icon").click(function () {
            $(this).toggleClass("help_on");
            $(".notes", $(this).parents("div")).toggle();
        });
    },

    /** when a get code button is clicked, update and show the code area. */

    getCodeButtonClick: function getCodeButtonClick(all_chart_options) {

        $("#get_code_button").click(function (e) {

            var $get_code_span = $("#get_code_text");
            $(this).toggleClass("code_on");
            $("#main_result_code_div").slideToggle(100);
            if ($get_code_span.text() === "Get code") {
                utils_main.writeCode(all_chart_options);
                $get_code_span.text("Hide code");
            } else {
                $get_code_span.text("Get code");
            }
        });
    },

    /** when "Load series names from:" icons are clicked and changed */
    loadSeriesFromIcon: function loadSeriesFromIcon() {

        $("#table_input_load_series_from_icons .load_series_from_icon").click(function () {
            //change selected icon
            $("#table_input_load_series_from_icons .load_series_from_icon").removeClass("selected_load_series_from");
            $(this).addClass("selected_load_series_from");
        });
    },

    //* INIT ALL NAVIGATION, called from app.js when page is loaded *//
    initAllNavigation: function initAllNavigation(all_chart_options) {

        navigation_setup.sideNavTabsChange();
        navigation_setup.chartTypeIconChange();
        navigation_setup.helpIconClick();
        navigation_setup.getCodeButtonClick(all_chart_options);
        navigation_setup.chartOutputCodeFocus(all_chart_options);
        navigation_setup.loadSeriesFromIcon();
        navigation_setup.clearNextTextareaClick();
    }

};

module.exports = navigation_setup;

},{"./utils/utils_main.js":42}],40:[function(require,module,exports){
"use strict";

var jq_extensions = function () {

    jQuery.fn.extend({
        divVal: function divVal(string) {
            //extend so that we can get and set "value" with divs
            if (arguments.length === 0) {
                return $(this).attr("value");
            } else {

                $(this).attr("value", string);
                return $(this);
            }
        }
    });
}();

module.exports = jq_extensions;

},{}],41:[function(require,module,exports){
"use strict";

var utils_forms = {

    /** returns true if checkbox is checked, false if not */
    getCheckBoxValue: function getCheckBoxValue(elem) {
        return elem.is(':checked');
    },

    /** gets an array of values from a given class */
    getClassValuesArray: function getClassValuesArray(className) {
        var arr = [];
        $("." + className).each(function () {
            arr.push(Number($(this).val()));
        });
        return arr;
    }

};

module.exports = utils_forms;

},{}],42:[function(require,module,exports){
'use strict';

/** Main utility object, contains functions that get reused often */
var utils_main = {
    /** add commas function */
    addCommas: function addCommas(val) {

        if (isNaN(val)) {
            return val;
        } else if (val > 999 || val < -999) {
            while (/(\d+)(\d{3})/.test(val.toString())) {
                val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
            }
        }
        return val;
    },

    checkforUndefined: function checkforUndefined(val) {
        return val === 0 || isNaN(val) ? undefined : val;
    },

    /** shortcut for console.log **/
    log: function log(e) {
        return console.log(e);
    },

    /** turns objects into strings, including their methods */
    deepStringify: function deepStringify(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (typeof value === 'function') {
                return value.toString();
            } else {
                return value;
            }
        }).replace(/\\n/g, "");
    },

    /** stringify tooltip formatter function **/
    stringifyFormatter: function stringifyFormatter(new_tooltip, decimals, multiplier, signs_arr) {
        return new_tooltip.toString().replace(/multiplier/g, multiplier).replace(/decimals/g, decimals).replace(/signs_arr\[0\]/g, '"' + signs_arr[0] + '"').replace(/signs_arr\[1\]/g, '"' + signs_arr[1] + '"');
    },

    /** place code in chart_output_code and reinit highlight */
    writeCode: function writeCode(all_chart_options) {

        var chart_options_js_string = utils_main.deepStringify(all_chart_options);
        $("#chart_output_code").text(chart_options_js_string).each(function (i, block) {
            hljs.highlightBlock(block);
        });
    }

};

module.exports = utils_main;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
