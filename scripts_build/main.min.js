(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {

    //utils
    var jq_extensions = require("./utils/jq_extensions.js");
    var utils_main = require("./utils/utils_main");

    //initial all chart options init
    var allChartOptionsInit = require("./initializers/all_chart_options_init.js");
    var all_chart_options = allChartOptionsInit();

    //draw chart
    var draw_chart = require("./draw_chart.js");
    var chart = draw_chart.init(all_chart_options);

    //write code to "#chart_output_code" function
    utils_main.writeCode(all_chart_options);

    //page init (navigation and keyboard entries)
    var navigation_setup = require("./navigation_setup.js");
    navigation_setup.initAllNavigation(all_chart_options);

    var keyboard_inputs = require("./keyboard_inputs");

    //all form updates - when updates are made, update the chart
    var allFormUpdates = require("./form_updates/all_form_updates.js");
    allFormUpdates(chart, all_chart_options);
});

},{"./draw_chart.js":15,"./form_updates/all_form_updates.js":16,"./initializers/all_chart_options_init.js":25,"./keyboard_inputs":38,"./navigation_setup.js":39,"./utils/jq_extensions.js":44,"./utils/utils_main":46}],2:[function(require,module,exports){
"use strict";

/** 
* All Chart options constructor. Combines all other options into main options object. Info at http://api.highcharts.com/highcharts 
@constructor AllChartOptions
@param o {object} chart options object
*/
var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart;
    this.colors = o.colors;
    this.credits = o.credits;
    this.exporting = o.exporting;
    this.legend = o.legend;
    this.plotOptions = o.plotOptions;
    this.series = o.series;
    this.subtitle = o.subtitle;
    this.title = o.title;
    this.tooltip = o.tooltip;
    this.xAxis = o.xAxis;
    this.yAxis = o.yAxis;
};

module.exports = AllChartOptions;

},{}],3:[function(require,module,exports){
'use strict';

/** Chart options constructor. Info at http://api.highcharts.com/highcharts#chart
* @constructor ChartOptions 
*  @param o {object} chart options object
*/
var ChartOptions = function ChartOptions(o) {

    this.renderTo = o.renderTo || "chart_display_area";
    this.margin = [o.margin[0] || 90, o.margin[1] || 40, o.margin[2] || 80, o.margin[3] || 75]; //[top,right,bottom,left]
    this.borderWidth = o.borderWidth || 0;
    this.plotBorderColor = o.plotBorderColor || '#fff';
    this.plotBorderWidth = o.plotBorderWidth || 0;
    this.type = o.type || 'line';
    this.zoomType = o.zoomType || null;
    this.alignTicks = o.alignTicks || false;
    this.inverted = o.inverted || false;
    this.ignoreHiddenSeries = o.ignoreHiddenSeries || true; //false for bubble charts so bubbles won't resize
};

module.exports = ChartOptions;

},{}],4:[function(require,module,exports){
'use strict';

/** Colors options constructor. Info at http://api.highcharts.com/highcharts#colors 
* @constructor Colors 
*  @param o {object} colors options object with colors array
*/
var Colors = function Colors(o) {

    this.colors = o.colors || ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
};

module.exports = Colors;

},{}],5:[function(require,module,exports){
"use strict";

/** Credits options constructor. Info at http://api.highcharts.com/highcharts#credits
* @constructor Credits 
*  @param o {object} credits options object
*/
var Credits = function Credits(o) {
    this.href = "http://www.bls.gov";

    this.position = {
        align: 'left',
        x: 10,
        y: o.position ? o.position.y || -20 : -20
    };

    this.style = {
        cursor: "default",
        color: "#2C2C2C"
    };

    this.text = o.text || "";
    this.useHTML = true;
};

module.exports = Credits;

},{}],6:[function(require,module,exports){
'use strict';

/** Exporting options constructor. Info at http://api.highcharts.com/highcharts#exporting
* @constructor Exporting 
* @param o {object} exporting options object
*/
var Exporting = function Exporting(o) {

    this.buttons = {
        contextButton: {
            enabled: true,
            verticalAlign: 'bottom',
            x: -10
        }
    };
};

module.exports = Exporting;

},{}],7:[function(require,module,exports){
'use strict';

/** Legend options constructor. Info at http://api.highcharts.com/highcharts#legend 
* @constructor Legend 
* @param o {object} legend options object
*/
var Legend = function Legend(o) {

    this.align = o.align || 'left';
    this.backgroundColor = o.backgroundColor || 'none';
    this.borderColor = o.borderColor || 'none';
    this.borderWidth = o.borderWidth || 0;
    this.enabled = o.enabled || true;
    this.floating = o.floating || false;
    this.itemDistance = o.itemDistance || 30;
    this.layout = o.layout || 'horizontal';
    this.reversed = o.reversed || false;
    this.shadow = o.shadow || false;
    this.useHTML = o.useHTML || false;
    this.verticalAlign = o.verticalAlign || 'top';
    this.width = o.width;
    this.x = o.x || 0;
    this.y = o.y || 30;

    this.itemStyle = {
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
        color: '#000'
    };
    this.itemHiddenStyle = {
        color: 'gray'
    };
    this.itemHoverStyle = {
        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
    };
};

module.exports = Legend;

},{}],8:[function(require,module,exports){
"use strict";

/** PlotOptions constructor. Info at http://api.highcharts.com/highcharts#plotOptions
* @constructor PlotOptions 
* @param o {object} PlotOptions options object
*/
var PlotOptions = function PlotOptions(o) {

    //for all chart types. values are undefined if not in o.
    this.series = {
        //        events: {
        //            legendItemClick: o.series.events.legendItemClick
        //        },
        dataLabels: {
            enabled: o.series.dataLabels.enabled || false
        },
        pointPlacement: o.series.pointPlacement,
        stacking: o.series.stacking,
        pointPadding: o.series.pointPadding,
        groupPadding: o.series.groupPadding,
        minPointLength: o.series.minPointLength,
        maxSize: o.series.maxSize,
        sizeBy: o.series.sizeBy,
        lineWidth: o.series.lineWidth,
        states: o.series.states,
        marker: o.series.marker

    };
};

module.exports = PlotOptions;

},{}],9:[function(require,module,exports){
"use strict";

/** series (an array of objs) options constructor. Info at http://api.highcharts.com/highcharts#series 
* @constructor Series 
* @param o {object} Series options object
*/
var Series = function Series(o) {

    this.series = o || [{}];
};

module.exports = Series;

},{}],10:[function(require,module,exports){
"use strict";

/** subtitle options constructor. Info at http://api.highcharts.com/highcharts#subtitle
* @constructor Subtitle 
* @param o {object} Subtitle options object
*/
var Subtitle = function Subtitle(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'normal',
        fontSize: '12px'
    };
};

module.exports = Subtitle;

},{}],11:[function(require,module,exports){
"use strict";

/** Title options constructor. Info at http://api.highcharts.com/highcharts#title
* @constructor Title 
* @param o {object} Title options object
*/
var Title = function Title(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'bold',
        fontSize: '14px'
    };
};

module.exports = Title;

},{}],12:[function(require,module,exports){
'use strict';

/** Tooltip options constructor. Info at http://api.highcharts.com/highcharts#tooltip
* @constructor Tooltip 
* @param o {object} Tooltip options object
*/

var Tooltip = function Tooltip(o) {
    this.backgroundColor = '#FEFFEF';
    this.crosshairs = o.crosshairs || [false, false];
    this.formatter = o.formatter;

    this.style = {
        color: '#000000',
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif'
    };

    this.useHTML = true;
};

module.exports = Tooltip;

},{}],13:[function(require,module,exports){
'use strict';

/** xAxis options constructor. Info at http://api.highcharts.com/highcharts#xAxis
 * @constructor XAxis 
 * @param o {object} XAxis options object
 */
var XAxis = function XAxis(o) {

    this.categories = o.categories;
    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 0;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter || undefined : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineWidth = o.lineWidth || 1.2;
    this.lineColor = o.lineColor || 'gray';
    this.plotBands = o.plotBands || [];
    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 0
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';

    this.title = {
        align: o.title.align,
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : '',
        rotation: 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        },
        x: o.title.x
    };
};

module.exports = XAxis;

},{}],14:[function(require,module,exports){
'use strict';

/** yAxis options constructor. Info at http://api.highcharts.com/highcharts#yAxis
* @constructor yAxis 
* @param o {object} yAxis options object
*/

var yAxis = function yAxis(o) {

    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 1;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {

        format: o.labels ? o.labels.format : { value: value },
        formatter: o.labels ? o.labels.formatter : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineColor = o.lineColor || 'gray';
    this.lineWidth = o.lineWidth || 1;
    this.max = o.max || null;
    this.min = o.min || null;
    this.opposite = o.opposite || false;
    this.plotBands = o.plotBands || [];

    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 1
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';
    this.tickWidth = o.tickWidth || 1;

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : 6,
        align: o.title ? o.title.align || 'middle' : 'middle',
        offset: 20,
        rotation: 0,
        x: o.title ? o.title.x || 35 : 35,
        y: o.title ? o.title.y || -15 : -15,

        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };

    this.type = o.type || 'linear';
};

module.exports = yAxis;

},{}],15:[function(require,module,exports){
"use strict";

/** takes all_chart_options and prints a chart to the screen 
@namespace
*/

var draw_chart = {

    /** initialize function **/
    init: function init(all_chart_options) {
        var chart = new Highcharts.Chart(all_chart_options);
        return chart;
    }

};

module.exports = draw_chart;

},{}],16:[function(require,module,exports){
"use strict";

var update_template = require("./update_template.js");
var updateChartType = require("./update_chart_type.js");
var updateColors = require("./update_colors.js");
var utils_forms = require("../utils/utils_forms");
var update_legend = require("./update_legend.js");
var update_x_axis = require("./update_x_axis.js");
var update_y_axis = require("./update_y_axis.js");
var update_tooltip = require("./update_tooltip.js");
var update_data = require("./update_data.js");

/** listens for any form updates and calls appropriate function 
@module
*/
var allFormUpdates = function allFormUpdates(chart, all_chart_options) {

    /* CHART TYPE CHANGES */

    //chart type changed
    $.each(['area', 'line', 'bar', 'stacked_bar', 'column', 'stacked_column', 'bubble', 'scatter', "drilldown"], function (i, type) {
        $('#chart_type_' + type).click(function () {
            updateChartType(i, type, chart, all_chart_options);
        });
    });

    /** TEMPLATE CHANGES */

    //chart width
    $("#chart_width_textinput").keyup(function () {
        update_template.resize($(this).val(), "width", chart);
    });

    //chart height
    $("#chart_height_textinput").keyup(function () {
        update_template.resize($(this).val(), "height", chart);
    });

    //inner chart margins
    $(".margin_input").keyup(function () {

        var margins_arr = utils_forms.getClassValuesArray("margin_input");

        update_template.margin(margins_arr, chart, all_chart_options);
    });

    /*CHART DATA CHANGES - (x-axis categories and series array)*/
    //"series names loaded from" icon clicked
    $(".load_series_from_icon").click(function () {
        update_data.updateData(chart, all_chart_options);
    });

    $("#table_input_textarea").bind('input propertychange', function () {
        update_data.updateData(chart, all_chart_options);
    });

    /* COLOR PALETTE CHANGES */
    $(".color_palette_row").click(function () {
        updateColors(chart, all_chart_options);
    });

    /* LEGEND CHANGES */

    //legend layout changed
    $("#legend_layout_select").change(function () {
        update_legend.updateLayout($(this).val(), chart, all_chart_options);
    });

    //legend reverse ceckbox changed
    $("#legend_reverse_layout_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_legend.updateIsReversed(val, chart, all_chart_options);
    });

    //legend X or Y placement values changed
    $("#legend_placement_x, #legend_placement_y").keyup(function () {
        var newX = Number($("#legend_placement_x").val());
        var newY = Number($("#legend_placement_y").val());

        update_legend.updateXYpositions(newX, newY, chart, all_chart_options);
    });

    /* X-AXIS CHANGES */

    //x-axis title textarea changed
    $("#chart_x_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_x_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //x-axis tickmark interval input changed
    $("#chart_x_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_x_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    /** Y-AXIS CHANGES */

    //y-axis title textarea changed
    $("#chart_y_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_y_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //y-axis title indent changed
    $("#chart_y_axis_x_position_input").keyup(function () {
        var newXPosition = Number($(this).val());
        update_y_axis.updateXPosition(newXPosition, chart, all_chart_options);
    });

    //y-axis tickmark interval input changed
    $("#chart_y_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_y_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    //y-axis max input changed
    $("#chart_y_axis_max_input").keyup(function () {
        var newMax = Number($(this).val());
        update_y_axis.updateMax(newMax, chart, all_chart_options);
    });

    //y-axis min input changed
    $("#chart_y_axis_min_input").keyup(function () {
        var newMin = Number($(this).val());
        update_y_axis.updateMin(newMin, chart, all_chart_options);
    });

    //y-axis opposite side ceckbox changed
    $("#chart_y_axis_opposite_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsOpposite(val, chart, all_chart_options);
    });

    //y-axis log ceckbox changed
    $("#chart_y_axis_log_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsLog(val, chart, all_chart_options);
    });

    //y-axis dollar / percent or decimal selects changed (format)
    $("#chart_y_axis_signs_select, #chart_y_axis_decimals_select").change(function () {
        var sign = $("#chart_y_axis_signs_select").val();
        var decimals = $("#chart_y_axis_decimals_select").val();
        update_y_axis.updateFormat(sign, decimals, chart, all_chart_options);
    });

    /** TOOLTIP CHANGES */

    //change shared tooltip checkbox, decimals, signs, or mulitplier selects
    $("#chart_tooltip_shared_checkbox, #chart_tooltip_force_decimals_select, #chart_tooltip_signs_select, #chart_tooltip_y_multiple_select").change(function () {

        update_tooltip.updateToolTip(chart, all_chart_options);
    });

    //call update tooltip after page and chart is loaded (has to be on a callback with the 'chart' object)
    update_tooltip.updateToolTip(chart, all_chart_options);
};

module.exports = allFormUpdates;

},{"../utils/utils_forms":45,"./update_chart_type.js":17,"./update_colors.js":18,"./update_data.js":19,"./update_legend.js":20,"./update_template.js":21,"./update_tooltip.js":22,"./update_x_axis.js":23,"./update_y_axis.js":24}],17:[function(require,module,exports){
"use strict";

var plotOptionsInit = require("../initializers/plot_options_init.js");
var update_data = require("./update_data.js");
var update_tooltip = require("./update_tooltip.js");

/** when a chart icon is clicked, this function is called - changes the chart type shown 
@module
*/
var updateChartType = function updateChartType(i, type, chart, all_chart_options) {

    type = type.replace("stacked_", "");

    if (type === "bar") {
        //fix y axis position
        chart.inverted = true;
        all_chart_options.yAxis.title.align = "middle";
        all_chart_options.xAxis.title.align = "high";
        all_chart_options.yAxis.title.x = 0;
        all_chart_options.yAxis.title.y = 8;
        all_chart_options.xAxis.title.y = -20;
        all_chart_options.xAxis.title.x = 40;

        //hide non-relevant elements
        $(".not_bar").hide();
    } else {
        //chart not bar
        chart.inverted = false;
        all_chart_options.yAxis.title.align = "high";
        all_chart_options.xAxis.title.align = "middle";
        all_chart_options.yAxis.title.x = Number($("#chart_y_axis_x_position_input").val());
        all_chart_options.yAxis.title.y = -20;
        all_chart_options.xAxis.title.y = 0;
        all_chart_options.xAxis.title.x = 0;

        $(".not_bar").show();
    }

    if (type === "drilldown") {
        type = "column";
    }

    chart.xAxis[0].update({
        plotLines: [{
            "value": 0,
            "color": "#c0c0c0",
            "dashStyle": "solid",
            "width": type === "scatter" || type === "bubble" ? 1 : 0
        }]
    }, false);

    chart.xAxis[0].setTitle({
        align: all_chart_options.xAxis.title.align,
        y: all_chart_options.xAxis.title.y,
        x: all_chart_options.xAxis.title.x
    }, false);

    chart.yAxis[0].setTitle({
        align: all_chart_options.yAxis.title.align,
        x: all_chart_options.yAxis.title.x,
        y: all_chart_options.yAxis.title.y
    }, false);

    //re parse data
    update_data.updateData(chart, all_chart_options);

    all_chart_options.chart.type = type;

    //update tooltip
    update_tooltip.updateToolTip(chart, all_chart_options);
};

module.exports = updateChartType;

},{"../initializers/plot_options_init.js":31,"./update_data.js":19,"./update_tooltip.js":22}],18:[function(require,module,exports){
"use strict";

var colorsInit = require("../initializers/colors_init.js");

/** updates the chart's colors - called when palette is changed. Calls colorsInit 
@module
@param chart {object} the main chart object, built when chart is loaded
@param all_chart_options {object} the main chart options that load into building of the chart and are turned to string for the output
**/
var updateColors = function updateColors(chart, all_chart_options) {
    all_chart_options.colors = colorsInit(chart);
    chart.options.colors = all_chart_options.colors;

    $(chart.series).each(function (i) {
        this.update({
            _colorIndex: i
        }, false);
    });

    chart.redraw();
};

module.exports = updateColors;

},{"../initializers/colors_init.js":27}],19:[function(require,module,exports){
"use strict";

var parseTableInput = require("../parsers/parse_table_input.js");

/** called when .selected_chart_type or #table_input_textarea is changed - calls functions to reparse data
@namespace
*/

var update_data = {

    /** called when .selected_chart_type or #table_input_textarea is changed - calls functions to reparse data */
    updateData: function updateData(chart, all_chart_options) {
        var chart_type = $(".selected_chart_type").divVal();
        var load_series_from = $(".selected_load_series_from").divVal();
        var input = $("#table_input_textarea").val();
        var parsed_table_output = parseTableInput(input, load_series_from, chart_type);

        //update x-axis categories
        chart.xAxis[0].update({
            categories: parsed_table_output.x_axis_categories
        }, false);

        //remove existing series array
        $(chart.series).each(function () {
            this.remove(false); //false to not redraw yet
        });

        //add new series
        $(parsed_table_output.series).each(function () {
            chart.addSeries(this, false); //false to not redraw yet
        });
        chart.redraw(true);

        //update chart options for code output
        all_chart_options.series = parsed_table_output.series;
        all_chart_options.xAxis.categories = parsed_table_output.x_axis_categories;
    }

};

module.exports = update_data;

},{"../parsers/parse_table_input.js":43}],20:[function(require,module,exports){
"use strict";

/** when legend options are changed in the side area 
@namespace
*/

var update_legend = {

    /** decide if the legend should be reverse order **/
    updateIsReversed: function updateIsReversed(val, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.reversed = val;
        legend.render();

        all_chart_options.legend.reversed = val;
    },

    /** if 'no legend' is selected, hide the legend, and set options, else, show it with the correct layout */
    updateLayout: function updateLayout(val, chart, all_chart_options) {

        var legend = chart.legend;
        if (val === "no_legend") {
            legend.group.hide();
            legend.box.hide();
            legend.display = false;
            legend.options.enabled = false;
            legend.render(false);

            val = undefined;
        } else {

            legend.options.layout = val;
            legend.render(false);
            legend.group.show();
            legend.box.show();
            legend.display = true;
            legend.options.enabled = true;
        }

        all_chart_options.legend.layout = val;
        all_chart_options.legend.enabled = legend.options.enabled;
    },

    /** update X and Y positions on legend */

    updateXYpositions: function updateXYpositions(newX, newY, chart, all_chart_options) {
        var legend = chart.legend;
        legend.options.x = newX;
        legend.options.y = newY;
        legend.render(false);

        all_chart_options.legend.x = newX;
        all_chart_options.legend.y = newY;
    }

};

module.exports = update_legend;

},{}],21:[function(require,module,exports){
"use strict";

/** when template are changed in the side area, these methods are called 
@namespace
*/
var update_template = {
    resize: function resize(val, dimension, chart) {
        val = Number(val);
        if (!isNaN(val)) {
            $(".chart_display_area").css(dimension, val + "px");
        }
        chart.reflow();
    },

    margin: function margin(margins_arr, chart, all_chart_options) {

        $.each(chart.axes, function (i, e) {
            e.isDirty = true; //to tell axes to refresh
        });
        chart.margin = margins_arr;
        chart.redraw(false);

        all_chart_options.chart.margin = margins_arr;
    }
};

module.exports = update_template;

},{}],22:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");
var utils_forms = require("../utils/utils_forms");

/** when tooltip options are changed in the side area, these methods are called 
@namespace
*/
var update_tooltip = {

    /** gets a tooltip for scatter charts. Called from updateToolTip**/
    getScatterTooltip: function getScatterTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type) {
        var new_tooltip = function new_tooltip() {

            var y_axis_title = this.series.yAxis.axisTitle ? this.series.yAxis.axisTitle.textStr : "Y-Axis";
            var x_axis_title = this.series.xAxis.axisTitle ? this.series.xAxis.axisTitle.textStr : "X-Axis";

            return "<b>" + this.series.name + "</b><br>" + y_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1] + "</b><br/>" + x_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.x * multiplier, decimals) + signs_arr[1] + "<br/>";
        };

        return new_tooltip;
    },

    /** gets a tooltip for typical charts (line, area, bar etc). Called from updateToolTip**/
    getTypicalTooltip: function getTypicalTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type) {

        var new_tooltip;

        if (is_shared) {
            //SHARED TOOLTIP

            if (decimals > 0) {
                //use decimal formatter

                new_tooltip = function new_tooltip() {

                    var shared_tooltip_arr = [];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push("<b>" + this.name + "</b> <br>" + this.points[point.x].x + ": " + signs_arr[0] + Highcharts.numberFormat(this.points[point.x].y * multiplier, decimals) + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>');
                };
            } else {
                //don't use decimal formatter

                new_tooltip = function new_tooltip() {

                    var shared_tooltip_arr = ["<b>" + this.key + "</b>"];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push(this.name + ": " + signs_arr[0] + $(this.points[point.x].y * multiplier).addCommas() + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>');
                };
            }
        } else {
            //NOT SHARED TOOLTIP

            if (decimals > 0) {
                //use decimal formatter
                new_tooltip = function new_tooltip() {
                    return "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1];
                };
            } else {
                //don't use decimal formatter
                new_tooltip = function new_tooltip() {
                    return "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + $(this.y * multiplier).addCommas() + signs_arr[1];
                };
            }
        }

        return new_tooltip;
    },

    /** update tooltip - decide which kind of chart and call that get tooltip function **/
    updateToolTip: function updateToolTip(chart, all_chart_options) {

        var is_shared = utils_forms.getCheckBoxValue($("#chart_tooltip_shared_checkbox"));
        var decimals = Number($("#chart_tooltip_force_decimals_select").val());
        var signs = $("#chart_tooltip_signs_select").val();
        var multiplier = $("#chart_tooltip_y_multiple_select").val();
        var chart_type = all_chart_options.chart.type;
        var new_tooltip;
        var signs_arr = [signs === "$" ? "$" : "", signs === "%" ? "%" : ""];

        //IF A TYPICAL CHART
        if (["area", "line", "bar", "stacked_bar", "column", "stacked_column"].indexOf(chart_type) > -1) {
            new_tooltip = update_tooltip.getTypicalTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type);
        }

        //IF A SCATTER CHART
        else if (chart_type === "scatter") {
                new_tooltip = update_tooltip.getScatterTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type);
            }

        if (!chart) {
            //for use in tooltip_init
            return new_tooltip;
        }

        chart.tooltip.options.formatter = new_tooltip;
        //    chart.tooltip.refresh(chart.series[0].data[0]);

        all_chart_options.tooltip.formatter = utils_main.stringifyFormatter(new_tooltip, decimals, multiplier, signs_arr);
    }

};

module.exports = update_tooltip;

},{"../utils/utils_forms":45,"../utils/utils_main.js":46}],23:[function(require,module,exports){
"use strict";

/** when X-axis options are changed in the side area, these methods are called 
@namespace
*/

var update_x_axis = {

    /** update the x axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.xAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.xAxis.title.text = newTitle;
    },

    /** update x axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        if (isNaN(newInterval) || newInterval === 0) {
            newInterval = undefined;
        };

        if (!chart) {
            // called when this is used in x_axis_init
            return newInterval;
        }

        if (newInterval > chart.xAxis[0].dataMax) {
            newInterval = chart.xAxis[0].dataMax;
        }

        chart.xAxis[0].update({
            tickInterval: newInterval
        });
        all_chart_options.xAxis.tickInterval = newInterval;
    }

};

module.exports = update_x_axis;

},{}],24:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** when Y-axis options are changed in the side area, these methods are called 
@namespace
*/
var update_y_axis = {

    /** update format when dollar / percent signs select is changed */
    updateFormat: function updateFormat(sign, decimals, chart, all_chart_options) {

        var newFormat = "{value:,." + decimals + "f}";
        if (sign === "$") {
            newFormat = "${value:,." + decimals + "f}";
        }

        if (sign === "%") {
            newFormat = "{value:,." + decimals + "f}%";
        }

        if (!chart) {
            // called when this is used in y_axis_init
            return newFormat;
        }

        chart.yAxis[0].update({
            labels: {
                format: newFormat
            }
        });

        all_chart_options.yAxis.format = newFormat;
    },

    /** update if y-axis is log */
    updateIsLog: function updateIsLog(val, chart, all_chart_options) {

        var type = val === true ? "logarithmic" : "linear";
        if (!chart) {
            // called when this is used in y_axis_init
            return type;
        }

        chart.yAxis[0].update({
            type: type
        });
        all_chart_options.yAxis.type = type;
    },

    /** update if y axis labels are on opposite side */
    updateIsOpposite: function updateIsOpposite(val, chart, all_chart_options) {
        chart.yAxis[0].update({
            opposite: val
        });
        all_chart_options.yAxis.opposite = val;
    },

    /** update y-axis max */
    updateMax: function updateMax(newMax, chart, all_chart_options) {
        newMax = utils_main.checkforUndefined(newMax);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMax;
        }

        chart.yAxis[0].update({
            max: newMax
        });

        all_chart_options.yAxis.max = newMax;
    },

    /** update y-axis min */
    updateMin: function updateMin(newMin, chart, all_chart_options) {
        newMin = utils_main.checkforUndefined(newMin);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMin;
        }

        chart.yAxis[0].update({
            min: newMin
        });

        all_chart_options.yAxis.min = newMin;
    },

    /** update the y axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.yAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.yAxis.title.text = newTitle;
    },

    /** update y axis x-position (title.x) */

    updateXPosition: function updateXPosition(newXPosition, chart, all_chart_options) {

        newXPosition = utils_main.checkforUndefined(newXPosition);

        chart.yAxis[0].setTitle({
            x: newXPosition
        });

        all_chart_options.yAxis.title.x = newXPosition;
    },

    /** update y axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        newInterval = utils_main.checkforUndefined(newInterval);

        if (!chart) {
            // called when this is used in y_axis_init
            return newInterval;
        }

        if (newInterval > chart.yAxis[0].dataMax) {
            newInterval = chart.yAxis[0].dataMax;
        }

        chart.yAxis[0].update({
            tickInterval: newInterval

        });
        all_chart_options.yAxis.tickInterval = newInterval;
    }

};

module.exports = update_y_axis;

},{"../utils/utils_main.js":46}],25:[function(require,module,exports){
"use strict";

var AllChartOptions = require("../constructors/charts/all_chart_options.js"),
    chartInit = require("./chart_init.js"),
    colorsInit = require("./colors_init.js"),
    creditsInit = require("./credits_init.js"),
    exportingInit = require("./exporting_init.js"),
    legendInit = require("./legend_init.js"),
    plotOptionsInit = require("./plot_options_init.js"),
    seriesInit = require("./series_init.js"),
    subtitleInit = require("./subtitle_init.js"),
    titleInit = require("./title_init.js"),
    tooltipInit = require("./tooltip_init.js"),
    xAxisInit = require("./x_axis_init.js"),
    yAxisInit = require("./y_axis_init.js"),
    parseTableInput = require("../parsers/parse_table_input.js");

/** create and return an instance of all_chart_options 
@module
**/
var allChartOptionsInit = function allChartOptionsInit() {
    var chart_type = $(".selected_chart_type").divVal();
    var load_series_from = $(".selected_load_series_from").divVal();
    var input = $("#table_input_textarea").val();
    var parsed_table_output = parseTableInput(input, load_series_from, chart_type);

    //get options from individual inits
    var options = {
        chart: chartInit(chart_type),
        colors: colorsInit(),
        credits: creditsInit(),
        // exportig: exportingInit(),
        legend: legendInit(),
        plotOptions: plotOptionsInit(chart_type),
        series: seriesInit(parsed_table_output.series),
        subtitle: subtitleInit(),
        title: titleInit(parsed_table_output.title_text),
        tooltip: tooltipInit(),
        xAxis: xAxisInit(parsed_table_output.x_axis_categories, chart_type),
        yAxis: yAxisInit(chart_type)

    };

    var all_chart_options = new AllChartOptions(options);
    return all_chart_options;
};

module.exports = allChartOptionsInit;

},{"../constructors/charts/all_chart_options.js":2,"../parsers/parse_table_input.js":43,"./chart_init.js":26,"./colors_init.js":27,"./credits_init.js":28,"./exporting_init.js":29,"./legend_init.js":30,"./plot_options_init.js":31,"./series_init.js":32,"./subtitle_init.js":33,"./title_init.js":34,"./tooltip_init.js":35,"./x_axis_init.js":36,"./y_axis_init.js":37}],26:[function(require,module,exports){
"use strict";

var ChartOptions = require("../constructors/charts/chart.js");

/** Initializer for "chart" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var chartInit = function chartInit(chart_type) {

    if (chart_type === "drilldown") {
        chart_type = "column";
    }

    //load options from user inputs
    var options = {
        margin: [Number($("#top_margin_textinput").val()), Number($("#right_margin_textinput").val()), Number($("#bottom_margin_textinput").val()), Number($("#left_margin_textinput").val())],
        renderTo: $("#chart_id_textinput").val(),

        type: chart_type
    };

    var chart_options = new ChartOptions(options);
    return chart_options;
};

module.exports = chartInit;

},{"../constructors/charts/chart.js":3}],27:[function(require,module,exports){
"use strict";

var Colors = require("../constructors/charts/colors.js");

/** Initializer for "colors" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var colorsInit = function colorsInit(chart) {
    var color_arr = [];
    $(".color_palette_selected .color_palette_cell").each(function () {
        color_arr.push($(this).css("background-color"));
    });

    if (chart) {
        return color_arr;
    }

    //load options from user inputs
    var options = {
        colors: color_arr
    };

    var colors = new Colors(options);
    return colors.colors;
};

module.exports = colorsInit;

},{"../constructors/charts/colors.js":4}],28:[function(require,module,exports){
"use strict";

var Credits = require("../constructors/charts/credits.js");

/** Initializer for "credits" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var creditsInit = function creditsInit() {

    //load options from user inputs
    var options = {
        text: $("#chart_credits_text_textarea").val(),
        position: {
            y: Number($("#chart_credits_y_position_input").val())
        }

    };

    var credits = new Credits(options);
    return credits;
};

module.exports = creditsInit;

},{"../constructors/charts/credits.js":5}],29:[function(require,module,exports){
"use strict";

var Exporting = require("../constructors/charts/exporting.js");

/** Initializer for "exporting" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var exportingInit = function exportingInit() {

    //load options from user inputs
    var options = {};

    var exporting = new Exporting(options);
    return exporting;
};

module.exports = exportingInit;

},{"../constructors/charts/exporting.js":6}],30:[function(require,module,exports){
"use strict";

var Legend = require("../constructors/charts/legend.js");

/** Initializer for "legend" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var legendInit = function legendInit() {

    var getLegendLayout = function getLegendLayout() {
        var legend_layout_val = $("#legend_layout_select").val();
        return legend_layout_val !== "no_legend" ? legend_layout_val : undefined;
    };

    //load options from user inputs
    var options = {
        layout: getLegendLayout(),
        x: Number($("#legend_placement_x").val()),
        y: Number($("#legend_placement_y").val())

    };

    var legend = new Legend(options);
    return legend;
};

module.exports = legendInit;

},{"../constructors/charts/legend.js":7}],31:[function(require,module,exports){
"use strict";

var PlotOptions = require("../constructors/charts/plot_options.js");

/** Initializer for "plotOptions" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var plotOptionsInit = function plotOptionsInit(chart_type) {

    //load options from user inputs
    var options = {
        series: {
            events: {},
            dataLabels: {},

            lineWidth: 1.5,
            marker: {
                enabled: false,
                states: {
                    hover: {
                        enabled: true,
                        radius: 5
                    }
                }
            },
            states: {
                hover: {
                    lineWidth: 4
                }
            }

        }

    };

    options[chart_type] = {};

    /** unique chart options (choosing to keep these with every chart so I don't have to reload them with individual series when chart types are updated) */
    //just for bar or column
    options.series.groupPadding = 0.2;
    options.series.pointPadding = 0.1;
    options.series.pointPlacement = null;
    options.series.stacking = null;
    options.series.minPointLength = 2;

    //just for bubble charts
    options.series.maxSize = 50;
    options.series.sizeBy = 'width'; //instead of 'area', seems more accurate

    var plotOptions = new PlotOptions(options);
    return plotOptions;
};

module.exports = plotOptionsInit;

},{"../constructors/charts/plot_options.js":8}],32:[function(require,module,exports){
"use strict";

var Series = require("../constructors/charts/series.js");

/** Initializer for "series" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var seriesInit = function seriesInit(series) {

    //load options from user inputs
    var options = series;

    var series = new Series(options);
    return series.series;
};

module.exports = seriesInit;

},{"../constructors/charts/series.js":9}],33:[function(require,module,exports){
"use strict";

var Subtitle = require("../constructors/charts/subtitle.js");

/** Initializer for "subtitle" options section of all_chart_options. Creates and returns a new instance
@module
*/

var subtitleInit = function subtitleInit() {

    //load options from user inputs
    var options = {};

    var subtitle = new Subtitle(options);
    return subtitle;
};

module.exports = subtitleInit;

},{"../constructors/charts/subtitle.js":10}],34:[function(require,module,exports){
"use strict";

var Title = require("../constructors/charts/title.js");

/** Initializer for "title" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var titleInit = function titleInit(title_text) {

    //load options from user inputs
    var options = {
        text: title_text
    };

    var title = new Title(options);
    return title;
};

module.exports = titleInit;

},{"../constructors/charts/title.js":11}],35:[function(require,module,exports){
"use strict";

var Tooltip = require("../constructors/charts/tooltip.js");
var utils_forms = require("../utils/utils_forms.js");

/** Initializer for "tooltip" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var tooltipInit = function tooltipInit() {

    //load options from user inputs
    var options = {
        formatter: undefined ///formatter is created with update_tooltip as a callback (needs chart to exist first)

    };

    var tooltip = new Tooltip(options);
    return tooltip;
};

module.exports = tooltipInit;

},{"../constructors/charts/tooltip.js":12,"../utils/utils_forms.js":45}],36:[function(require,module,exports){
"use strict";

var update_x_axis = require("../form_updates/update_x_axis.js");
var XAxis = require("../constructors/charts/x_axis.js");

/** Initializer for "xAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var xAxisInit = function xAxisInit(categories, chart_type) {

    //load options from user inputs
    var options = {

        categories: categories || undefined,
        plotLines: [{
            "value": 0,
            "color": "#c0c0c0",
            "dashStyle": "solid",
            "width": chart_type === "scatter" || chart_type === "bubble" ? 1 : 0
        }],
        title: {
            align: chart_type === "bar" || chart_type === "stacked_bar" ? "high" : "middle",
            text: $("#chart_x_axis_title_textarea").val(),
            x: chart_type === "bar" || chart_type === "stacked_bar" ? 40 : 0
        },
        tickInterval: update_x_axis.updateTickmarkInterval(Number($("#chart_x_axis_tickmark_interval_input").val()))

    };

    var xAxis = new XAxis(options);
    return xAxis;
};

module.exports = xAxisInit;

},{"../constructors/charts/x_axis.js":13,"../form_updates/update_x_axis.js":23}],37:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");
var YAxis = require("../constructors/charts/y_axis.js");
var update_y_axis = require("../form_updates/update_y_axis.js");
var utils_forms = require("../utils/utils_forms.js");

/** Initializer for "yAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var yAxisInit = function yAxisInit(chart_type) {

    /** load options from user inputs */
    var options = {

        labels: {
            format: update_y_axis.updateFormat($("#chart_y_axis_signs_select").val(), $("#chart_y_axis_decimals_select").val()) //val, decimals
        },

        max: update_y_axis.updateMax(Number($("#chart_y_axis_max_input").val())),
        min: update_y_axis.updateMin(Number($("#chart_y_axis_min_input").val())),
        type: update_y_axis.updateIsLog(utils_forms.getCheckBoxValue($("#chart_y_axis_log_checkbox"))),
        opposite: utils_forms.getCheckBoxValue($("#chart_y_axis_opposite_checkbox")),
        tickInterval: update_y_axis.updateTickmarkInterval(Number($("#chart_y_axis_tickmark_interval_input").val())),

        title: {
            text: $("#chart_y_axis_title_textarea").val(),
            align: chart_type === "bar" ? "middle" : "high",
            x: chart_type === "bar" || chart_type === "stacked_bar" ? 0 : Number($("#chart_y_axis_x_position_input").val()),
            y: chart_type === "bar" || chart_type === "stacked_bar" ? 8 : -20
        }

    };

    var yAxis = new YAxis(options);
    return yAxis;
};

module.exports = yAxisInit;

},{"../constructors/charts/y_axis.js":14,"../form_updates/update_y_axis.js":24,"../utils/utils_forms.js":45,"../utils/utils_main.js":46}],38:[function(require,module,exports){
"use strict";

/**
 * Contains functions that deal with keyboard inputs
 * @namespace
 */
var keyboard_inputs = {

    adjValue: function adjValue(val, direction) {
        var val = Number(val);
        if (!isNaN(val)) {
            return direction === "+" ? val + 10 : val - 10;
        } else {
            return val;
        }
    },

    /** when nothing is selected, pressing up or downchanges which side nav tab is selected */
    sideNavTabShortcuts: function sideNavTabShortcuts() {
        $(document).keydown(function (e) {

            if (e.keyCode === 38) {
                //up
                e.preventDefault();
                $(".selected_tab").prev().click();
            } else if (e.keyCode === 40) {
                //down
                e.preventDefault();
                $(".selected_tab").next().click();
            } else if (e.keyCode === 67) {
                //c
                $("#tab_type").click();
            } else if (e.keyCode === 83) {
                //s
                $("#tab_chart_template").click();
            } else if (e.keyCode === 68) {
                //d
                $("#tab_data").click();
            } else if (e.keyCode === 73) {
                //i
                $("#tab_series_options").click();
            } else if (e.keyCode === 76) {
                //l
                $("#tab_chart_legend").click();
            } else if (e.keyCode === 88) {
                //x
                $("#tab_chart_x_axis").click();
            } else if (e.keyCode === 89) {
                //y
                $("#tab_chart_y_axis").click();
            } else if (e.keyCode === 84) {
                //t
                $("#tab_chart_tooltip").click();
            } else if (e.keyCode === 78) {
                //n
                $("#tab_chart_credits").click();
            } else if (e.keyCode === 69) {
                //69
                $("#tab_chart_extra_options").click();
            }
        });
    },

    /** in number entry inputs, pressing up or down will adjust value */
    numberChange: function numberChange(e) {
        if (e.keyCode === 38) {
            //up
            $(this).val(keyboard_inputs.adjValue($(this).val(), "+"));
        } else if (e.keyCode === 40) {
            //down
            $(this).val(keyboard_inputs.adjValue($(this).val(), "-"));
        }
    },

    /** initialize listenters 
    when a number entry input is focused on, attach those event listeners
    when it leaves to main document, attach those
    **/
    initListeners: function initListeners() {
        $("input, textarea").focus(function () {
            $(document).unbind();
            $(this).off("keydown"); //so it doesnt duplicate when moving from one entry to another
            $(".number_entry").on("keydown", keyboard_inputs.numberChange);
        });
        $("input, textarea").blur(function () {
            $(this).off("keydown");
            //reinit side tab nav shortcuts
            keyboard_inputs.sideNavTabShortcuts();
        });
    }

};

//first init
keyboard_inputs.sideNavTabShortcuts();
keyboard_inputs.initListeners();

module.exports = keyboard_inputs;

},{}],39:[function(require,module,exports){
"use strict";

var utils_main = require("./utils/utils_main.js");

/** object that contains functions for all the navigation, ie changing between options and chart types 
@namespace
*/
var navigation_setup = {

    /** when tabs on left side nav bar are clicked, options displayed are changed **/
    sideNavTabsChange: function sideNavTabsChange() {

        $("#side_nav_tabs .tab").click(function () {
            //change selected menu tab
            $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
            $(this).addClass("selected_tab");

            //change display div showing
            var selectedID = "#" + $(this).attr("id").replace("tab", "display");
            $("#side_display .selected_display").removeClass("selected_display");
            $(selectedID).addClass("selected_display");
        });
    },

    /** when chart code is entered, update **/
    chartOutputCodeFocus: function chartOutputCodeFocus(all_chart_options) {
        $("#chart_output_code").click(function () {
            utils_main.writeCode(all_chart_options);
        });
    },

    /** when chart type icon is clicked and changed **/
    chartTypeIconChange: function chartTypeIconChange() {

        $("#chart_type_icons .chart_type_icon").click(function () {
            //change selected icon
            $("#chart_type_icons .chart_type_icon").removeClass("selected_chart_type");
            $(this).addClass("selected_chart_type");
            var chart_type = $(this).divVal();

            //hide stuff unrelated to that chart type (line, bar, column)
            if (["area", "line", "bar", "column", "stacked_column", "stacked_bar"].indexOf(chart_type) > -1) {
                $(".show_line, .show_bar, .show_column").show();
            } else {
                $(".show_line, .show_bar, .show_column").hide();
            }

            if (chart_type === "scatter") {
                $(".show_scatter").show();
            } else {
                $(".show_scatter").hide();
            }
        });
    },

    /** when clear next text area button (X) is clicked, find and clear the text of the next textarea */
    clearNextTextareaClick: function clearNextTextareaClick() {
        $(".clear_next_textarea_button").click(function () {
            $(this).next("textarea").val("");
        });
    },

    /** when #color_palette_reverse_icon is clicked, reverse the orders of each palette */
    colorPaletteReverseIconClick: function colorPaletteReverseIconClick() {
        $("#color_palette_reverse_icon").click(function () {
            $(".color_palette_row").each(function () {
                var this_row = $(this);
                var color_cells = this_row.children('.color_palette_cell');
                this_row.prepend(color_cells.get().reverse());
            });
            $(".color_palette_selected").click();
        });
    },

    /** when .color_palette_row is clicked, change colors */
    colorPaletteRowClick: function colorPaletteRowClick() {
        $(".color_palette_row").click(function () {
            $(".color_palette_row").removeClass("color_palette_selected");
            $(this).addClass("color_palette_selected");
        });
    },

    /** when a help icon is clicked */

    helpIconClick: function helpIconClick() {

        $(".help_icon").click(function () {
            $(this).toggleClass("help_on");
            $(".notes", $(this).parents("div")).toggle();
        });
    },

    /** when a get code button is clicked, update and show the code area. */

    getCodeButtonClick: function getCodeButtonClick(all_chart_options) {

        $("#get_code_button").click(function (e) {

            var $get_code_span = $("#get_code_text");
            $(this).toggleClass("code_on");
            $("#main_result_code_div").slideToggle(100);
            if ($get_code_span.text() === "Get code") {
                utils_main.writeCode(all_chart_options);
                $get_code_span.text("Hide code");
            } else {
                $get_code_span.text("Get code");
            }
        });
    },

    /** when "Load series names from:" icons are clicked and changed */
    loadSeriesFromIcon: function loadSeriesFromIcon() {

        $("#table_input_load_series_from_icons .load_series_from_icon").click(function () {
            //change selected icon
            $("#table_input_load_series_from_icons .load_series_from_icon").removeClass("selected_load_series_from");
            $(this).addClass("selected_load_series_from");
        });
    },

    /** INIT ALL NAVIGATION, called from app.js when page is loaded **/
    initAllNavigation: function initAllNavigation(all_chart_options) {

        navigation_setup.sideNavTabsChange();
        navigation_setup.chartTypeIconChange();
        navigation_setup.helpIconClick();
        navigation_setup.getCodeButtonClick(all_chart_options);
        navigation_setup.chartOutputCodeFocus(all_chart_options);
        navigation_setup.loadSeriesFromIcon();
        navigation_setup.clearNextTextareaClick();
        navigation_setup.colorPaletteRowClick();
        navigation_setup.colorPaletteReverseIconClick();
    }

};

module.exports = navigation_setup;

},{"./utils/utils_main.js":46}],40:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for bubble charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForBubble = function parseForBubble(input, chart_type) {
    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            _colorIndex: i,
            _symbolIndex: i
        };

        //get data values from each row's td cells (every third cell for xyz groups)
        $("td:nth-child(3n - 1)", this_row).each(function (i) {
            var x = Number($.trim($(this).text()));
            var y = Number($.trim($(this).next().text()));
            var z = Number($.trim($(this).next().next().text()));
            var xyz_arr = [x, y, z];
            seriesObj.data.push(xyz_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForBubble;

},{}],41:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for scatter charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForScatter = function parseForScatter(input, chart_type) {
    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            _colorIndex: i,
            _symbolIndex: i
        };

        //get data values from each row's td cells
        $("td:even", this_row).each(function (i) {
            var x = Number($.trim($(this).text()));
            var y = Number($.trim($(this).next().text()));
            var xy_arr = [x, y];
            seriesObj.data.push(xy_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForScatter;

},{}],42:[function(require,module,exports){
"use strict";

/** 
* Parsing function for typical chart types (line, bar, column) 
* @module
* @param input {element} input jquery table element retrieved from textarea
* @param load_series_from {string} column_heads or column_rows
* @param chart_type {string} type of chart (line, bar etc.)
* @returns {object} Object with chart title, X-axis categories and series array of objects
*/

var parseForTypicalChart = function parseForTypicalChart(input, load_series_from, chart_type) {

    var type = chart_type.replace("stacked_", "");

    var output = {};

    /** If loading series names from column heads is selected*/
    if (load_series_from === "column_heads") {
        //load x-axis categories from row heads
        output.x_axis_categories = [];
        $("tbody th", input).each(function () {
            output.x_axis_categories.push($.trim($(this).text()));
        });

        //load series object names from column heads, and data from each column tds
        output.series = [];

        $("thead tr:last th:gt(0)", input).each(function (i) {
            var seriesObj = {
                name: $.trim($.trim($(this).text())),
                data: [],
                type: type,
                _colorIndex: i,
                _symbolIndex: i,
                stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null

            };

            //data from each column's tds
            $("tbody tr", input).each(function () {
                var this_row = $(this);
                $("td:eq(" + i + ")", this_row).each(function () {
                    seriesObj.data.push($(this).getNumber());
                });
            });

            output.series.push(seriesObj);
        });

        /** Else if loading series names from row heads is selected*/
    } else {

            //load x-axis categories from column heads
            output.x_axis_categories = [];
            $("thead th:gt(0)", input).each(function () {
                output.x_axis_categories.push($.trim($(this).text()));
            });

            //load series object names from row heads, and data from row tds
            output.series = [];
            $("tbody tr", input).each(function (i) {

                var this_row = $(this);

                var seriesObj = {
                    name: $.trim($("th:eq(0)", this_row).text()),
                    data: [],
                    type: type,
                    _colorIndex: i,
                    _symbolIndex: i,
                    stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null
                };

                //get data values from each row's td cells
                $("td", this_row).each(function () {
                    seriesObj.data.push($(this).getNumber());
                });

                output.series.push(seriesObj);
            });
        }

    return output;
};

module.exports = parseForTypicalChart;

},{}],43:[function(require,module,exports){
"use strict";

/* takes the table html from a given textarea and parses it into an object, depending on useer-selected inputs */

/* parsing function for typical chart types (line, bar, column) */
var parseForTypicalChart = require("./parse_for_typical_chart.js");

/* parsing function for scatter charts */
var parseForScatter = require("./parse_for_scatter.js");

/* parsing function for bubble charts */
var parseForBubble = require("./parse_for_bubble.js");

/** parsing function for drilldown charts */
var parseForDrilldown = function parseForDrilldown(input) {};

/** parsing function for map charts */
var parseForMap = function parseForMap(input) {};

/** 
* Function that decides which parse function to run, depending on chart type
* @module
* @param input {element} input jquery table element retrieved from textarea
* @param load_series_from {string} column_heads or column_rows
* @param chart_type {string} type of chart (line, bar etc.)
* @returns {object} Object with chart title, X-axis categories and series array of objects
*/

var parseTableInput = function parseTableInput(input, load_series_from, chart_type) {

    var output;
    /** Depending on the chart type, start that parsing */
    if (["area", "line", "bar", "stacked_bar", "column", "stacked_column"].indexOf(chart_type) > -1) {
        output = parseForTypicalChart(input, load_series_from, chart_type);
    } else if (chart_type == "bubble") {
        output = parseForBubble(input, chart_type);
    } else if (chart_type == "scatter") {
        output = parseForScatter(input, chart_type);
    } else if (chart_type == "drilldown") {
        output = parseForDrilldown(input, chart_type);
    } else if (chart_type == "map") {
        output = parseForMap(input);
    }

    //add chart title (same for all types of charts)
    output.title_text = $("caption", input).text();

    return output;
};

module.exports = parseTableInput;

},{"./parse_for_bubble.js":40,"./parse_for_scatter.js":41,"./parse_for_typical_chart.js":42}],44:[function(require,module,exports){
"use strict";

/** 
* custom jQuery extensions
* @module
*/
var jq_extensions = function () {

    jQuery.fn.extend({

        /** extend so that we can get and set "value" with divs */
        divVal: function divVal(string) {
            if (arguments.length === 0) {
                return $(this).attr("value");
            } else {
                $(this).attr("value", string);
                return $(this);
            }
        },

        /** puts commas in a number */
        addCommas: function addCommas() {
            var val = this[0];
            if (isNaN(val)) {
                return val;
            } else if (val > 999 || val < -999) {
                while (/(\d+)(\d{3})/.test(val.toString())) {
                    val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
                }
            }
            return val;
        },

        /** takes an element's text string and returns a number, trimming spaces and removing non-numbers (good for numbers with commas etc.)*/
        getNumber: function getNumber() {
            var val = Number($.trim($(this).text().replace(/[^0-9\.\-]+/g, '')));
            return isNaN(val) ? null : val;
        }

    });
}();

module.exports = jq_extensions;

},{}],45:[function(require,module,exports){
"use strict";

/**
 * Forms utility object, contains functions that work with form elements
 * @namespace
 */
var utils_forms = {

    /** returns true if checkbox is checked, false if not 
    @param elem {element} checkbox element
    @returns {bool}
    */
    getCheckBoxValue: function getCheckBoxValue(elem) {
        return elem.is(':checked');
    },

    /** gets an array of values from a given class 
    @param class_name {string}
    @returns {array}
    */
    getClassValuesArray: function getClassValuesArray(class_name) {
        var arr = [];
        $("." + class_name).each(function () {
            arr.push(Number($(this).val()));
        });
        return arr;
    }

};

module.exports = utils_forms;

},{}],46:[function(require,module,exports){
'use strict';

/**
 * Main utility object, contains functions that get reused often
 * @namespace
 */
var utils_main = {

    /** check value - if 0 or not a number, return undefined **/
    checkforUndefined: function checkforUndefined(val) {
        return val === 0 || isNaN(val) ? undefined : val;
    },

    /** 
    turns objects into strings, including their methods 
    @returns {string} JSON
    */
    deepStringify: function deepStringify(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (typeof value === 'function') {
                return value.toString();
            } else {
                return value;
            }
        }).replace(/\\n/g, "");
    },

    /** stringify tooltip formatter function **/
    stringifyFormatter: function stringifyFormatter(new_tooltip, decimals, multiplier, signs_arr) {
        return new_tooltip.toString().replace(/multiplier/g, multiplier).replace(/decimals/g, decimals).replace(/signs_arr\[0\]/g, '"' + signs_arr[0] + '"').replace(/signs_arr\[1\]/g, '"' + signs_arr[1] + '"');
    },

    /** place code in chart_output_code and reinit highlight */
    writeCode: function writeCode(all_chart_options) {

        var chart_options_js_string = utils_main.deepStringify(all_chart_options);
        $("#chart_output_code").text(chart_options_js_string).each(function (i, block) {
            hljs.highlightBlock(block);
        });
    }

};

module.exports = utils_main;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzY3JpcHRzX3NyYy9hcHAuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL2FsbF9jaGFydF9vcHRpb25zLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9jaGFydC5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvY29sb3JzLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9jcmVkaXRzLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9leHBvcnRpbmcuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL2xlZ2VuZC5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvcGxvdF9vcHRpb25zLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9zZXJpZXMuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL3N1YnRpdGxlLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy90aXRsZS5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvdG9vbHRpcC5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMveF9heGlzLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy95X2F4aXMuanMiLCJzY3JpcHRzX3NyYy9kcmF3X2NoYXJ0LmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL2FsbF9mb3JtX3VwZGF0ZXMuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX2NoYXJ0X3R5cGUuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX2NvbG9ycy5qcyIsInNjcmlwdHNfc3JjL2Zvcm1fdXBkYXRlcy91cGRhdGVfZGF0YS5qcyIsInNjcmlwdHNfc3JjL2Zvcm1fdXBkYXRlcy91cGRhdGVfbGVnZW5kLmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL3VwZGF0ZV90ZW1wbGF0ZS5qcyIsInNjcmlwdHNfc3JjL2Zvcm1fdXBkYXRlcy91cGRhdGVfdG9vbHRpcC5qcyIsInNjcmlwdHNfc3JjL2Zvcm1fdXBkYXRlcy91cGRhdGVfeF9heGlzLmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL3VwZGF0ZV95X2F4aXMuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvYWxsX2NoYXJ0X29wdGlvbnNfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9jaGFydF9pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL2NvbG9yc19pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL2NyZWRpdHNfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9leHBvcnRpbmdfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9sZWdlbmRfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9wbG90X29wdGlvbnNfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9zZXJpZXNfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9zdWJ0aXRsZV9pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL3RpdGxlX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvdG9vbHRpcF9pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL3hfYXhpc19pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL3lfYXhpc19pbml0LmpzIiwic2NyaXB0c19zcmMva2V5Ym9hcmRfaW5wdXRzLmpzIiwic2NyaXB0c19zcmMvbmF2aWdhdGlvbl9zZXR1cC5qcyIsInNjcmlwdHNfc3JjL3BhcnNlcnMvcGFyc2VfZm9yX2J1YmJsZS5qcyIsInNjcmlwdHNfc3JjL3BhcnNlcnMvcGFyc2VfZm9yX3NjYXR0ZXIuanMiLCJzY3JpcHRzX3NyYy9wYXJzZXJzL3BhcnNlX2Zvcl90eXBpY2FsX2NoYXJ0LmpzIiwic2NyaXB0c19zcmMvcGFyc2Vycy9wYXJzZV90YWJsZV9pbnB1dC5qcyIsInNjcmlwdHNfc3JjL3V0aWxzL2pxX2V4dGVuc2lvbnMuanMiLCJzY3JpcHRzX3NyYy91dGlscy91dGlsc19mb3Jtcy5qcyIsInNjcmlwdHNfc3JjL3V0aWxzL3V0aWxzX21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLEVBQUUsUUFBRixFQUFZLEtBQVosQ0FBa0IsWUFBWTs7O0FBRzFCLFFBQUksZ0JBQWdCLFFBQVEsMEJBQVIsQ0FBaEIsQ0FIc0I7QUFJMUIsUUFBSSxhQUFhLFFBQVEsb0JBQVIsQ0FBYjs7O0FBSnNCLFFBU3RCLHNCQUFzQixRQUFRLDBDQUFSLENBQXRCLENBVHNCO0FBVTFCLFFBQUksb0JBQW9CLHFCQUFwQjs7O0FBVnNCLFFBYXRCLGFBQWEsUUFBUSxpQkFBUixDQUFiLENBYnNCO0FBYzFCLFFBQUksUUFBUSxXQUFXLElBQVgsQ0FBZ0IsaUJBQWhCLENBQVI7OztBQWRzQixjQWlCMUIsQ0FBVyxTQUFYLENBQXFCLGlCQUFyQjs7O0FBakIwQixRQW9CdEIsbUJBQW1CLFFBQVEsdUJBQVIsQ0FBbkIsQ0FwQnNCO0FBcUIxQixxQkFBaUIsaUJBQWpCLENBQW1DLGlCQUFuQyxFQXJCMEI7O0FBdUIxQixRQUFJLGtCQUFrQixRQUFRLG1CQUFSLENBQWxCOzs7QUF2QnNCLFFBMkJ0QixpQkFBaUIsUUFBUSxvQ0FBUixDQUFqQixDQTNCc0I7QUE0QjFCLG1CQUFlLEtBQWYsRUFBc0IsaUJBQXRCLEVBNUIwQjtDQUFaLENBQWxCOzs7Ozs7Ozs7O0FDS0EsSUFBSSxrQkFBa0IsU0FBbEIsZUFBa0IsQ0FBVSxDQUFWLEVBQWE7QUFDL0IsU0FBSyxLQUFMLEdBQWEsRUFBRSxLQUFGLENBRGtCO0FBRS9CLFNBQUssTUFBTCxHQUFjLEVBQUUs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LEVBQW9CLFVBQVUsR0FBVixFQUFlLEtBQWYsRUFBc0I7QUFDN0MsZ0JBQUksT0FBTyxLQUFQLEtBQWlCLFVBQWpCLEVBQTZCO0FBQzdCLHVCQUFPLE1BQU0sUUFBTixFQUFQLENBRDZCO2FBQWpDLE1BRU87QUFDSCx1QkFBTyxLQUFQLENBREc7YUFGUDtTQUR1QixDQUFwQixDQU1KLE9BTkksQ0FNSSxNQU5KLEVBTVksRUFOWixDQUFQLENBRHVDO0tBQTVCOzs7QUFZZix3QkFBb0IsNEJBQVUsV0FBVixFQUF1QixRQUF2QixFQUFpQyxVQUFqQyxFQUE2QyxTQUE3QyxFQUF3RDtBQUN4RSxlQUFPLFlBQVksUUFBWixHQUNGLE9BREUsQ0FDTSxhQUROLEVBQ3FCLFVBRHJCLEVBRUYsT0FGRSxDQUVNLFdBRk4sRUFFbUIsUUFGbkIsRUFHRixPQUhFLENBR00saUJBSE4sRUFHeUIsTUFBTSxVQUFVLENBQVYsQ0FBTixHQUFxQixHQUFyQixDQUh6QixDQUlGLE9BSkUsQ0FJTSxpQkFKTixFQUl5QixNQUFNLFVBQVUsQ0FBVixDQUFOLEdBQXFCLEdBQXJCLENBSmhDLENBRHdFO0tBQXhEOzs7QUFXcEIsZUFBVyxTQUFTLFNBQVQsQ0FBbUIsaUJBQW5CLEVBQXNDOztBQUc3QyxZQUFJLDBCQUEwQixXQUFXLGFBQVgsQ0FBeUIsaUJBQXpCLENBQTFCLENBSHlDO0FBSTdDLFVBQUUsb0JBQUYsRUFBd0IsSUFBeEIsQ0FBNkIsdUJBQTdCLEVBQXNELElBQXRELENBQTJELFVBQVUsQ0FBVixFQUFhLEtBQWIsRUFBb0I7QUFDM0UsaUJBQUssY0FBTCxDQUFvQixLQUFwQixFQUQyRTtTQUFwQixDQUEzRCxDQUo2QztLQUF0Qzs7Q0FsQ1g7O0FBZ0RKLE9BQU8sT0FBUCxHQUFpQixVQUFqQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAvL3V0aWxzXG4gICAgdmFyIGpxX2V4dGVuc2lvbnMgPSByZXF1aXJlKFwiLi91dGlscy9qcV9leHRlbnNpb25zLmpzXCIpO1xuICAgIHZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4vdXRpbHMvdXRpbHNfbWFpblwiKTtcblxuXG5cbiAgICAvL2luaXRpYWwgYWxsIGNoYXJ0IG9wdGlvbnMgaW5pdFxuICAgIHZhciBhbGxDaGFydE9wdGlvbnNJbml0ID0gcmVxdWlyZShcIi4vaW5pdGlhbGl6ZXJzL2FsbF9jaGFydF9vcHRpb25zX2luaXQuanNcIik7XG4gICAgdmFyIGFsbF9jaGFydF9vcHRpb25zID0gYWxsQ2hhcnRPcHRpb25zSW5pdCgpO1xuXG4gICAgLy9kcmF3IGNoYXJ0XG4gICAgdmFyIGRyYXdfY2hhcnQgPSByZXF1aXJlKFwiLi9kcmF3X2NoYXJ0LmpzXCIpO1xuICAgIHZhciBjaGFydCA9IGRyYXdfY2hhcnQuaW5pdChhbGxfY2hhcnRfb3B0aW9ucyk7XG5cbiAgICAvL3dyaXRlIGNvZGUgdG8gXCIjY2hhcnRfb3V0cHV0X2NvZGVcIiBmdW5jdGlvblxuICAgIHV0aWxzX21haW4ud3JpdGVDb2RlKGFsbF9jaGFydF9vcHRpb25zKTtcblxuICAgIC8vcGFnZSBpbml0IChuYXZpZ2F0aW9uIGFuZCBrZXlib2FyZCBlbnRyaWVzKVxuICAgIHZhciBuYXZpZ2F0aW9uX3NldHVwID0gcmVxdWlyZShcIi4vbmF2aWdhdGlvbl9zZXR1cC5qc1wiKTtcbiAgICBuYXZpZ2F0aW9uX3NldHVwLmluaXRBbGxOYXZpZ2F0aW9uKGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICBcbiAgICB2YXIga2V5Ym9hcmRfaW5wdXRzID0gcmVxdWlyZShcIi4va2V5Ym9hcmRfaW5wdXRzXCIpO1xuXG5cbiAgICAvL2FsbCBmb3JtIHVwZGF0ZXMgLSB3aGVuIHVwZGF0ZXMgYXJlIG1hZGUsIHVwZGF0ZSB0aGUgY2hhcnRcbiAgICB2YXIgYWxsRm9ybVVwZGF0ZXMgPSByZXF1aXJlKFwiLi9mb3JtX3VwZGF0ZXMvYWxsX2Zvcm1fdXBkYXRlcy5qc1wiKTtcbiAgICBhbGxGb3JtVXBkYXRlcyhjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG59KTsiLCIvKiogXG4qIEFsbCBDaGFydCBvcHRpb25zIGNvbnN0cnVjdG9yLiBDb21iaW5lcyBhbGwgb3RoZXIgb3B0aW9ucyBpbnRvIG1haW4gb3B0aW9ucyBvYmplY3QuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzIFxuQGNvbnN0cnVjdG9yIEFsbENoYXJ0T3B0aW9uc1xuQHBhcmFtIG8ge29iamVjdH0gY2hhcnQgb3B0aW9ucyBvYmplY3RcbiovXG52YXIgQWxsQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKG8pIHtcbiAgICB0aGlzLmNoYXJ0ID0gby5jaGFydDtcbiAgICB0aGlzLmNvbG9ycyA9IG8uY29sb3JzO1xuICAgIHRoaXMuY3JlZGl0cyA9IG8uY3JlZGl0cztcbiAgICB0aGlzLmV4cG9ydGluZyA9IG8uZXhwb3J0aW5nO1xuICAgIHRoaXMubGVnZW5kID0gby5sZWdlbmQ7XG4gICAgdGhpcy5wbG90T3B0aW9ucyA9IG8ucGxvdE9wdGlvbnM7XG4gICAgdGhpcy5zZXJpZXMgPSBvLnNlcmllcztcbiAgICB0aGlzLnN1YnRpdGxlID0gby5zdWJ0aXRsZTtcbiAgICB0aGlzLnRpdGxlID0gby50aXRsZTtcbiAgICB0aGlzLnRvb2x0aXAgPSBvLnRvb2x0aXA7XG4gICAgdGhpcy54QXhpcyA9IG8ueEF4aXM7XG4gICAgdGhpcy55QXhpcyA9IG8ueUF4aXM7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBbGxDaGFydE9wdGlvbnM7IiwiLyoqIENoYXJ0IG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI2NoYXJ0XG4qIEBjb25zdHJ1Y3RvciBDaGFydE9wdGlvbnMgXG4qICBAcGFyYW0gbyB7b2JqZWN0fSBjaGFydCBvcHRpb25zIG9iamVjdFxuKi9cbnZhciBDaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5yZW5kZXJUbyA9IG8ucmVuZGVyVG8gfHwgXCJjaGFydF9kaXNwbGF5X2FyZWFcIjtcbiAgICB0aGlzLm1hcmdpbiA9IFtvLm1hcmdpblswXSB8fCA5MCwgby5tYXJnaW5bMV0gfHwgNDAsIG8ubWFyZ2luWzJdIHx8IDgwLCBvLm1hcmdpblszXSB8fCA3NV07IC8vW3RvcCxyaWdodCxib3R0b20sbGVmdF1cbiAgICB0aGlzLmJvcmRlcldpZHRoID0gby5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIHRoaXMucGxvdEJvcmRlckNvbG9yID0gby5wbG90Qm9yZGVyQ29sb3IgfHwgJyNmZmYnO1xuICAgIHRoaXMucGxvdEJvcmRlcldpZHRoID0gby5wbG90Qm9yZGVyV2lkdGggfHwgMDtcbiAgICB0aGlzLnR5cGUgPSBvLnR5cGUgfHwgJ2xpbmUnO1xuICAgIHRoaXMuem9vbVR5cGUgPSBvLnpvb21UeXBlIHx8IG51bGw7XG4gICAgdGhpcy5hbGlnblRpY2tzID0gby5hbGlnblRpY2tzIHx8IGZhbHNlO1xuICAgIHRoaXMuaW52ZXJ0ZWQgPSBvLmludmVydGVkIHx8IGZhbHNlO1xuICAgIHRoaXMuaWdub3JlSGlkZGVuU2VyaWVzID0gby5pZ25vcmVIaWRkZW5TZXJpZXMgfHwgdHJ1ZTsgLy9mYWxzZSBmb3IgYnViYmxlIGNoYXJ0cyBzbyBidWJibGVzIHdvbid0IHJlc2l6ZVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhcnRPcHRpb25zOyIsIi8qKiBDb2xvcnMgb3B0aW9ucyBjb25zdHJ1Y3Rvci4gSW5mbyBhdCBodHRwOi8vYXBpLmhpZ2hjaGFydHMuY29tL2hpZ2hjaGFydHMjY29sb3JzIFxuKiBAY29uc3RydWN0b3IgQ29sb3JzIFxuKiAgQHBhcmFtIG8ge29iamVjdH0gY29sb3JzIG9wdGlvbnMgb2JqZWN0IHdpdGggY29sb3JzIGFycmF5XG4qL1xudmFyIENvbG9ycyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLmNvbG9ycyA9IG8uY29sb3JzIHx8IFsnIzdjYjVlYycsICcjNDM0MzQ4JywgJyM5MGVkN2QnLCAnI2Y3YTM1YycsICcjODA4NWU5JyxcbiAgICcjZjE1YzgwJywgJyNlNGQzNTQnLCAnIzJiOTA4ZicsICcjZjQ1YjViJywgJyM5MWU4ZTEnLCAnIzJmN2VkOCcsICcjMGQyMzNhJywgJyM4YmJjMjEnLCAnIzkxMDAwMCcsICcjMWFhZGNlJyxcbiAgICcjNDkyOTcwJywgJyNmMjhmNDMnLCAnIzc3YTFlNScsICcjYzQyNTI1JywgJyNhNmM5NmEnXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb2xvcnM7IiwiLyoqIENyZWRpdHMgb3B0aW9ucyBjb25zdHJ1Y3Rvci4gSW5mbyBhdCBodHRwOi8vYXBpLmhpZ2hjaGFydHMuY29tL2hpZ2hjaGFydHMjY3JlZGl0c1xuKiBAY29uc3RydWN0b3IgQ3JlZGl0cyBcbiogIEBwYXJhbSBvIHtvYmplY3R9IGNyZWRpdHMgb3B0aW9ucyBvYmplY3RcbiovXG52YXIgQ3JlZGl0cyA9IGZ1bmN0aW9uIChvKSB7XG4gICAgdGhpcy5ocmVmID0gXCJodHRwOi8vd3d3LmJscy5nb3ZcIjtcblxuICAgIHRoaXMucG9zaXRpb24gPSB7XG4gICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgIHg6IDEwLFxuICAgICAgICB5OiBvLnBvc2l0aW9uID8gby5wb3NpdGlvbi55IHx8IC0yMCA6IC0yMFxuICAgIH07XG5cbiAgICB0aGlzLnN0eWxlID0ge1xuICAgICAgICBjdXJzb3I6IFwiZGVmYXVsdFwiLFxuICAgICAgICBjb2xvcjogXCIjMkMyQzJDXCJcbiAgICB9O1xuXG4gICAgdGhpcy50ZXh0ID0gby50ZXh0IHx8IFwiXCI7XG4gICAgdGhpcy51c2VIVE1MID0gdHJ1ZTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENyZWRpdHM7IiwiLyoqIEV4cG9ydGluZyBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNleHBvcnRpbmdcbiogQGNvbnN0cnVjdG9yIEV4cG9ydGluZyBcbiogQHBhcmFtIG8ge29iamVjdH0gZXhwb3J0aW5nIG9wdGlvbnMgb2JqZWN0XG4qL1xudmFyIEV4cG9ydGluZyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLmJ1dHRvbnMgPSB7XG4gICAgICAgIGNvbnRleHRCdXR0b246IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJyxcbiAgICAgICAgICAgIHg6IC0xMFxuICAgICAgICB9XG4gICAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEV4cG9ydGluZzsiLCIvKiogTGVnZW5kIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI2xlZ2VuZCBcbiogQGNvbnN0cnVjdG9yIExlZ2VuZCBcbiogQHBhcmFtIG8ge29iamVjdH0gbGVnZW5kIG9wdGlvbnMgb2JqZWN0XG4qL1xudmFyIExlZ2VuZCA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLmFsaWduID0gby5hbGlnbiB8fCAnbGVmdCc7XG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBvLmJhY2tncm91bmRDb2xvciB8fCAnbm9uZSc7XG4gICAgdGhpcy5ib3JkZXJDb2xvciA9IG8uYm9yZGVyQ29sb3IgfHwgJ25vbmUnO1xuICAgIHRoaXMuYm9yZGVyV2lkdGggPSBvLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgdGhpcy5lbmFibGVkID0gby5lbmFibGVkIHx8IHRydWU7XG4gICAgdGhpcy5mbG9hdGluZyA9IG8uZmxvYXRpbmcgfHwgZmFsc2U7XG4gICAgdGhpcy5pdGVtRGlzdGFuY2UgPSBvLml0ZW1EaXN0YW5jZSB8fCAzMDtcbiAgICB0aGlzLmxheW91dCA9IG8ubGF5b3V0IHx8ICdob3Jpem9udGFsJztcbiAgICB0aGlzLnJldmVyc2VkID0gby5yZXZlcnNlZCB8fCBmYWxzZTtcbiAgICB0aGlzLnNoYWRvdyA9IG8uc2hhZG93IHx8IGZhbHNlO1xuICAgIHRoaXMudXNlSFRNTCA9IG8udXNlSFRNTCB8fCBmYWxzZTtcbiAgICB0aGlzLnZlcnRpY2FsQWxpZ24gPSBvLnZlcnRpY2FsQWxpZ24gfHwgJ3RvcCc7XG4gICAgdGhpcy53aWR0aCA9IG8ud2lkdGg7XG4gICAgdGhpcy54ID0gby54IHx8IDA7XG4gICAgdGhpcy55ID0gby55IHx8IDMwO1xuXG4gICAgdGhpcy5pdGVtU3R5bGUgPSB7XG4gICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgY29sb3I6ICcjMDAwJ1xuICAgIH07XG4gICAgdGhpcy5pdGVtSGlkZGVuU3R5bGUgPSB7XG4gICAgICAgIGNvbG9yOiAnZ3JheSdcbiAgICB9O1xuICAgIHRoaXMuaXRlbUhvdmVyU3R5bGUgPSB7XG4gICAgICAgIGN1cnNvcjogby5pdGVtSG92ZXJTdHlsZSA/IG8uaXRlbUhvdmVyU3R5bGUuY3Vyc29yIHx8IFwicG9pbnRlclwiIDogXCJwb2ludGVyXCJcbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZWdlbmQ7IiwiLyoqIFBsb3RPcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNwbG90T3B0aW9uc1xuKiBAY29uc3RydWN0b3IgUGxvdE9wdGlvbnMgXG4qIEBwYXJhbSBvIHtvYmplY3R9IFBsb3RPcHRpb25zIG9wdGlvbnMgb2JqZWN0XG4qL1xudmFyIFBsb3RPcHRpb25zID0gZnVuY3Rpb24gKG8pIHtcblxuICAgIC8vZm9yIGFsbCBjaGFydCB0eXBlcy4gdmFsdWVzIGFyZSB1bmRlZmluZWQgaWYgbm90IGluIG8uXG4gICAgdGhpcy5zZXJpZXMgPSB7XG4vLyAgICAgICAgZXZlbnRzOiB7XG4vLyAgICAgICAgICAgIGxlZ2VuZEl0ZW1DbGljazogby5zZXJpZXMuZXZlbnRzLmxlZ2VuZEl0ZW1DbGlja1xuLy8gICAgICAgIH0sXG4gICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IG8uc2VyaWVzLmRhdGFMYWJlbHMuZW5hYmxlZCB8fCBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBwb2ludFBsYWNlbWVudDogby5zZXJpZXMucG9pbnRQbGFjZW1lbnQsXG4gICAgICAgIHN0YWNraW5nOiBvLnNlcmllcy5zdGFja2luZyxcbiAgICAgICAgcG9pbnRQYWRkaW5nOiBvLnNlcmllcy5wb2ludFBhZGRpbmcsIFxuICAgICAgICBncm91cFBhZGRpbmc6IG8uc2VyaWVzLmdyb3VwUGFkZGluZyxcbiAgICAgICAgbWluUG9pbnRMZW5ndGg6IG8uc2VyaWVzLm1pblBvaW50TGVuZ3RoLFxuICAgICAgICBtYXhTaXplOiBvLnNlcmllcy5tYXhTaXplLFxuICAgICAgICBzaXplQnk6IG8uc2VyaWVzLnNpemVCeSwgXG4gICAgICAgIGxpbmVXaWR0aDogby5zZXJpZXMubGluZVdpZHRoLFxuICAgICAgICBzdGF0ZXM6IG8uc2VyaWVzLnN0YXRlcyxcbiAgICAgICAgbWFya2VyOiBvLnNlcmllcy5tYXJrZXJcblxuICAgIH07XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBsb3RPcHRpb25zOyIsIi8qKiBzZXJpZXMgKGFuIGFycmF5IG9mIG9ianMpIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3NlcmllcyBcbiogQGNvbnN0cnVjdG9yIFNlcmllcyBcbiogQHBhcmFtIG8ge29iamVjdH0gU2VyaWVzIG9wdGlvbnMgb2JqZWN0XG4qL1xudmFyIFNlcmllcyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLnNlcmllcyA9IG8gfHwgW3tcbiAgICAgICAgICBcbiAgICB9XTtcblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gU2VyaWVzOyIsIi8qKiBzdWJ0aXRsZSBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNzdWJ0aXRsZVxuKiBAY29uc3RydWN0b3IgU3VidGl0bGUgXG4qIEBwYXJhbSBvIHtvYmplY3R9IFN1YnRpdGxlIG9wdGlvbnMgb2JqZWN0XG4qL1xudmFyIFN1YnRpdGxlID0gZnVuY3Rpb24gKG8pIHtcbiAgICBcbiAgICB0aGlzLnRleHQgPSBvLnRleHQgfHwgXCJcIjtcbiAgICB0aGlzLmFsaWduID0gby5hbGlnbiB8fCBcImxlZnRcIjtcbiAgICBcbiAgICB0aGlzLnN0eWxlID0ge1xuICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICBmb250RmFtaWx5OiAnc2Fucy1zZXJpZicsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgfTtcblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gU3VidGl0bGU7IiwiLyoqIFRpdGxlIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3RpdGxlXG4qIEBjb25zdHJ1Y3RvciBUaXRsZSBcbiogQHBhcmFtIG8ge29iamVjdH0gVGl0bGUgb3B0aW9ucyBvYmplY3RcbiovXG52YXIgVGl0bGUgPSBmdW5jdGlvbiAobykge1xuICAgIFxuICAgIHRoaXMudGV4dCA9IG8udGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuYWxpZ24gPSBvLmFsaWduIHx8IFwibGVmdFwiO1xuICAgIFxuICAgIHRoaXMuc3R5bGUgPSB7XG4gICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdzYW5zLXNlcmlmJyxcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnXG4gICAgfTtcblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gVGl0bGU7XG5cbiIsIi8qKiBUb29sdGlwIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3Rvb2x0aXBcbiogQGNvbnN0cnVjdG9yIFRvb2x0aXAgXG4qIEBwYXJhbSBvIHtvYmplY3R9IFRvb2x0aXAgb3B0aW9ucyBvYmplY3RcbiovXG5cbnZhciBUb29sdGlwID0gZnVuY3Rpb24gKG8pIHtcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICcjRkVGRkVGJztcbiAgICB0aGlzLmNyb3NzaGFpcnMgPSBvLmNyb3NzaGFpcnMgfHwgW2ZhbHNlLCBmYWxzZV07XG4gICAgdGhpcy5mb3JtYXR0ZXIgPSBvLmZvcm1hdHRlcjtcbiAgICBcbiAgICB0aGlzLnN0eWxlID0ge1xuICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICBmb250RmFtaWx5OiAnQ2FsaWJyaSwgVmVyZGFuYSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZidcbiAgICB9O1xuICAgIFxuICAgIHRoaXMudXNlSFRNTCA9IHRydWU7XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2x0aXA7IiwiLyoqIHhBeGlzIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3hBeGlzXG4gKiBAY29uc3RydWN0b3IgWEF4aXMgXG4gKiBAcGFyYW0gbyB7b2JqZWN0fSBYQXhpcyBvcHRpb25zIG9iamVjdFxuICovXG52YXIgWEF4aXMgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5jYXRlZ29yaWVzID0gby5jYXRlZ29yaWVzO1xuICAgIHRoaXMuZ3JpZExpbmVDb2xvciA9IG8uZ3JpZExpbmVDb2xvciB8fCAnI2MwYzBjMCc7XG4gICAgdGhpcy5ncmlkTGluZVdpZHRoID0gby5ncmlkTGluZVdpZHRoIHx8IDA7XG4gICAgdGhpcy5ncmlkTGluZURhc2hTdHlsZSA9IG8uZ3JpZExpbmVEYXNoU3R5bGUgfHwgJ0RvdCc7XG5cbiAgICB0aGlzLmxhYmVscyA9IHtcbiAgICAgICAgZm9ybWF0dGVyOiBvLmxhYmVscyA/IG8ubGFiZWxzLmZvcm1hdHRlciB8fCB1bmRlZmluZWQgOiB1bmRlZmluZWQsXG4gICAgICAgIHJvdGF0aW9uOiBvLmxhYmVscyA/IG8ubGFiZWxzLnJvdGF0aW9uIHx8IDAgOiAwLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB0aGlzLmxpbmVXaWR0aCA9IG8ubGluZVdpZHRoIHx8IDEuMjtcbiAgICB0aGlzLmxpbmVDb2xvciA9IG8ubGluZUNvbG9yIHx8ICdncmF5JztcbiAgICB0aGlzLnBsb3RCYW5kcyA9IG8ucGxvdEJhbmRzIHx8IFtdO1xuICAgIHRoaXMucGxvdExpbmVzID0gby5wbG90TGluZXMgfHwgW3tcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxuICAgICAgICBcImNvbG9yXCI6IFwiI2MwYzBjMFwiLFxuICAgICAgICBcImRhc2hTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICAgIFwid2lkdGhcIjogMFxuICAgIH1dO1xuXG4gICAgdGhpcy50aWNrSW50ZXJ2YWwgPSBvLnRpY2tJbnRlcnZhbCB8fCBudWxsO1xuICAgIHRoaXMudGlja21hcmtQbGFjZW1lbnQgPSBvLnRpY2ttYXJrUGxhY2VtZW50IHx8ICdvbic7XG4gICAgdGhpcy50aWNrUG9zaXRpb24gPSBvLnRpY2tQb3NpdGlvbiB8fCAnb3V0c2lkZSc7XG4gICAgdGhpcy50aWNrQ29sb3IgPSBvLnRpY2tDb2xvciB8fCAnI0MwRDBFMCc7XG5cbiAgICB0aGlzLnRpdGxlID0ge1xuICAgICAgICBhbGlnbjogby50aXRsZS5hbGlnbixcbiAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgdGV4dDogby50aXRsZSA/IG8udGl0bGUudGV4dCB8fCAnJyA6ICcnLFxuICAgICAgICBtYXJnaW46IG8udGl0bGUgPyBvLnRpdGxlLm1hcmdpbiB8fCA2IDogJycsXG4gICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICBmb250U2l6ZTogJzEzcHgnXG4gICAgICAgIH0sXG4gICAgICAgIHg6IG8udGl0bGUueFxuICAgIH07XG5cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gWEF4aXM7IiwiLyoqIHlBeGlzIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3lBeGlzXG4qIEBjb25zdHJ1Y3RvciB5QXhpcyBcbiogQHBhcmFtIG8ge29iamVjdH0geUF4aXMgb3B0aW9ucyBvYmplY3RcbiovXG5cbnZhciB5QXhpcyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLmdyaWRMaW5lQ29sb3IgPSBvLmdyaWRMaW5lQ29sb3IgfHwgJyNjMGMwYzAnO1xuICAgIHRoaXMuZ3JpZExpbmVXaWR0aCA9IG8uZ3JpZExpbmVXaWR0aCB8fCAxO1xuICAgIHRoaXMuZ3JpZExpbmVEYXNoU3R5bGUgPSBvLmdyaWRMaW5lRGFzaFN0eWxlIHx8ICdEb3QnO1xuXG4gICAgdGhpcy5sYWJlbHMgPSB7XG4gICAgICAgIFxuICAgICAgICBmb3JtYXQ6IG8ubGFiZWxzID8gby5sYWJlbHMuZm9ybWF0IDoge3ZhbHVlfSxcbiAgICAgICAgZm9ybWF0dGVyOiBvLmxhYmVscyA/IG8ubGFiZWxzLmZvcm1hdHRlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgcm90YXRpb246IG8ubGFiZWxzID8gby5sYWJlbHMucm90YXRpb24gfHwgMCA6IDAsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0NhbGlicmksIFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHRoaXMubGluZUNvbG9yID0gby5saW5lQ29sb3IgfHwgJ2dyYXknO1xuICAgIHRoaXMubGluZVdpZHRoID0gby5saW5lV2lkdGggfHwgMTtcbiAgICB0aGlzLm1heCA9IG8ubWF4IHx8IG51bGw7XG4gICAgdGhpcy5taW4gPSBvLm1pbiB8fCBudWxsO1xuICAgIHRoaXMub3Bwb3NpdGUgPSBvLm9wcG9zaXRlIHx8IGZhbHNlO1xuICAgIHRoaXMucGxvdEJhbmRzID0gby5wbG90QmFuZHMgfHwgW107XG5cbiAgICB0aGlzLnBsb3RMaW5lcyA9IG8ucGxvdExpbmVzIHx8IFt7XG4gICAgICAgIFwidmFsdWVcIjogMCxcbiAgICAgICAgXCJjb2xvclwiOiBcIiNjMGMwYzBcIixcbiAgICAgICAgXCJkYXNoU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgICBcIndpZHRoXCI6IDFcbiAgICB9XTtcblxuICAgIHRoaXMudGlja0ludGVydmFsID0gby50aWNrSW50ZXJ2YWwgfHwgbnVsbDtcbiAgICB0aGlzLnRpY2ttYXJrUGxhY2VtZW50ID0gby50aWNrbWFya1BsYWNlbWVudCB8fCAnb24nO1xuICAgIHRoaXMudGlja1Bvc2l0aW9uID0gby50aWNrUG9zaXRpb24gfHwgJ291dHNpZGUnO1xuICAgIHRoaXMudGlja0NvbG9yID0gby50aWNrQ29sb3IgfHwgJyNDMEQwRTAnO1xuICAgIHRoaXMudGlja1dpZHRoID0gby50aWNrV2lkdGggfHwgMTtcblxuICAgIHRoaXMudGl0bGUgPSB7XG4gICAgICAgIHVzZUhUTUw6IHRydWUsXG4gICAgICAgIHRleHQ6IG8udGl0bGUgPyBvLnRpdGxlLnRleHQgfHwgJycgOiAnJyxcbiAgICAgICAgbWFyZ2luOiBvLnRpdGxlID8gby50aXRsZS5tYXJnaW4gfHwgNiA6IDYsXG4gICAgICAgIGFsaWduOiBvLnRpdGxlID8gby50aXRsZS5hbGlnbiB8fCAnbWlkZGxlJyA6ICdtaWRkbGUnLFxuICAgICAgICBvZmZzZXQ6IDIwLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgeDogby50aXRsZSA/IG8udGl0bGUueCB8fCAzNSA6IDM1LFxuICAgICAgICB5OiBvLnRpdGxlID8gby50aXRsZS55IHx8IC0xNSA6IC0xNSxcbiAgICAgICAgXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0NhbGlicmksIFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTNweCdcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnR5cGUgPSBvLnR5cGUgfHwgJ2xpbmVhcic7XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHlBeGlzOyIsIi8qKiB0YWtlcyBhbGxfY2hhcnRfb3B0aW9ucyBhbmQgcHJpbnRzIGEgY2hhcnQgdG8gdGhlIHNjcmVlbiBcbkBuYW1lc3BhY2VcbiovXG5cbnZhciBkcmF3X2NoYXJ0ID0ge1xuICAgIFxuICAgIC8qKiBpbml0aWFsaXplIGZ1bmN0aW9uICoqL1xuICAgIGluaXQ6IGZ1bmN0aW9uIChhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgSGlnaGNoYXJ0cy5DaGFydChhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gY2hhcnQ7XG4gICAgfSxcbiAgICBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkcmF3X2NoYXJ0OyIsInZhciB1cGRhdGVfdGVtcGxhdGUgPSByZXF1aXJlKFwiLi91cGRhdGVfdGVtcGxhdGUuanNcIik7XG52YXIgdXBkYXRlQ2hhcnRUeXBlID0gcmVxdWlyZShcIi4vdXBkYXRlX2NoYXJ0X3R5cGUuanNcIik7XG52YXIgdXBkYXRlQ29sb3JzID0gcmVxdWlyZShcIi4vdXBkYXRlX2NvbG9ycy5qc1wiKTtcbnZhciB1dGlsc19mb3JtcyA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc19mb3Jtc1wiKTtcbnZhciB1cGRhdGVfbGVnZW5kID0gcmVxdWlyZShcIi4vdXBkYXRlX2xlZ2VuZC5qc1wiKTtcbnZhciB1cGRhdGVfeF9heGlzID0gcmVxdWlyZShcIi4vdXBkYXRlX3hfYXhpcy5qc1wiKTtcbnZhciB1cGRhdGVfeV9heGlzID0gcmVxdWlyZShcIi4vdXBkYXRlX3lfYXhpcy5qc1wiKTtcbnZhciB1cGRhdGVfdG9vbHRpcCA9IHJlcXVpcmUoXCIuL3VwZGF0ZV90b29sdGlwLmpzXCIpO1xudmFyIHVwZGF0ZV9kYXRhID0gcmVxdWlyZShcIi4vdXBkYXRlX2RhdGEuanNcIik7XG5cbi8qKiBsaXN0ZW5zIGZvciBhbnkgZm9ybSB1cGRhdGVzIGFuZCBjYWxscyBhcHByb3ByaWF0ZSBmdW5jdGlvbiBcbkBtb2R1bGVcbiovXG52YXIgYWxsRm9ybVVwZGF0ZXMgPSBmdW5jdGlvbiAoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cblxuICAgIC8qIENIQVJUIFRZUEUgQ0hBTkdFUyAqL1xuXG4gICAgLy9jaGFydCB0eXBlIGNoYW5nZWRcbiAgICAkLmVhY2goWydhcmVhJywgJ2xpbmUnLCAnYmFyJywgJ3N0YWNrZWRfYmFyJywgJ2NvbHVtbicsICdzdGFja2VkX2NvbHVtbicsICdidWJibGUnLCAnc2NhdHRlcicsIFwiZHJpbGxkb3duXCJdLCBmdW5jdGlvbiAoaSwgdHlwZSkge1xuICAgICAgICAkKCcjY2hhcnRfdHlwZV8nICsgdHlwZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdXBkYXRlQ2hhcnRUeXBlKGksIHR5cGUsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuICAgIC8qKiBURU1QTEFURSBDSEFOR0VTICovXG5cbiAgICAvL2NoYXJ0IHdpZHRoXG4gICAgJChcIiNjaGFydF93aWR0aF90ZXh0aW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVfdGVtcGxhdGUucmVzaXplKCQodGhpcykudmFsKCksIFwid2lkdGhcIiwgY2hhcnQpO1xuICAgIH0pO1xuXG4gICAgLy9jaGFydCBoZWlnaHRcbiAgICAkKFwiI2NoYXJ0X2hlaWdodF90ZXh0aW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVfdGVtcGxhdGUucmVzaXplKCQodGhpcykudmFsKCksIFwiaGVpZ2h0XCIsIGNoYXJ0KTtcbiAgICB9KTtcblxuICAgIC8vaW5uZXIgY2hhcnQgbWFyZ2luc1xuICAgICQoXCIubWFyZ2luX2lucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgbWFyZ2luc19hcnIgPSB1dGlsc19mb3Jtcy5nZXRDbGFzc1ZhbHVlc0FycmF5KFwibWFyZ2luX2lucHV0XCIpO1xuXG4gICAgICAgIHVwZGF0ZV90ZW1wbGF0ZS5tYXJnaW4obWFyZ2luc19hcnIsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG5cbiAgICB9KTtcblxuXG4gICAgLypDSEFSVCBEQVRBIENIQU5HRVMgLSAoeC1heGlzIGNhdGVnb3JpZXMgYW5kIHNlcmllcyBhcnJheSkqL1xuICAgIC8vXCJzZXJpZXMgbmFtZXMgbG9hZGVkIGZyb21cIiBpY29uIGNsaWNrZWRcbiAgICAkKFwiLmxvYWRfc2VyaWVzX2Zyb21faWNvblwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV9kYXRhLnVwZGF0ZURhdGEoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgICQoXCIjdGFibGVfaW5wdXRfdGV4dGFyZWFcIikuYmluZCgnaW5wdXQgcHJvcGVydHljaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV9kYXRhLnVwZGF0ZURhdGEoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuXG4gICAgLyogQ09MT1IgUEFMRVRURSBDSEFOR0VTICovXG4gICAgJChcIi5jb2xvcl9wYWxldHRlX3Jvd1wiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZUNvbG9ycyhjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLyogTEVHRU5EIENIQU5HRVMgKi9cblxuICAgIC8vbGVnZW5kIGxheW91dCBjaGFuZ2VkXG4gICAgJChcIiNsZWdlbmRfbGF5b3V0X3NlbGVjdFwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVfbGVnZW5kLnVwZGF0ZUxheW91dCgkKHRoaXMpLnZhbCgpLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG5cbiAgICAvL2xlZ2VuZCByZXZlcnNlIGNlY2tib3ggY2hhbmdlZFxuICAgICQoXCIjbGVnZW5kX3JldmVyc2VfbGF5b3V0X2NoZWNrYm94XCIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWwgPSB1dGlsc19mb3Jtcy5nZXRDaGVja0JveFZhbHVlKCQodGhpcykpO1xuICAgICAgICB1cGRhdGVfbGVnZW5kLnVwZGF0ZUlzUmV2ZXJzZWQodmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy9sZWdlbmQgWCBvciBZIHBsYWNlbWVudCB2YWx1ZXMgY2hhbmdlZFxuICAgICQoXCIjbGVnZW5kX3BsYWNlbWVudF94LCAjbGVnZW5kX3BsYWNlbWVudF95XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld1ggPSBOdW1iZXIoJChcIiNsZWdlbmRfcGxhY2VtZW50X3hcIikudmFsKCkpO1xuICAgICAgICB2YXIgbmV3WSA9IE51bWJlcigkKFwiI2xlZ2VuZF9wbGFjZW1lbnRfeVwiKS52YWwoKSk7XG5cbiAgICAgICAgdXBkYXRlX2xlZ2VuZC51cGRhdGVYWXBvc2l0aW9ucyhuZXdYLCBuZXdZLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLyogWC1BWElTIENIQU5HRVMgKi9cblxuICAgIC8veC1heGlzIHRpdGxlIHRleHRhcmVhIGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3hfYXhpc190aXRsZV90ZXh0YXJlYVwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdUaXRsZSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgIHVwZGF0ZV94X2F4aXMudXBkYXRlVGl0bGUobmV3VGl0bGUsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL3gtYXhpcyB0aWNrbWFyayBpbnRlcnZhbCBpbnB1dCBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF94X2F4aXNfdGlja21hcmtfaW50ZXJ2YWxfaW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3SW50ZXJ2YWwgPSBOdW1iZXIoJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIHVwZGF0ZV94X2F4aXMudXBkYXRlVGlja21hcmtJbnRlcnZhbChuZXdJbnRlcnZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuXG4gICAgLyoqIFktQVhJUyBDSEFOR0VTICovXG5cbiAgICAvL3ktYXhpcyB0aXRsZSB0ZXh0YXJlYSBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF95X2F4aXNfdGl0bGVfdGV4dGFyZWFcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3VGl0bGUgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICB1cGRhdGVfeV9heGlzLnVwZGF0ZVRpdGxlKG5ld1RpdGxlLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy95LWF4aXMgdGl0bGUgaW5kZW50IGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3lfYXhpc194X3Bvc2l0aW9uX2lucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld1hQb3NpdGlvbiA9IE51bWJlcigkKHRoaXMpLnZhbCgpKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVYUG9zaXRpb24obmV3WFBvc2l0aW9uLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy95LWF4aXMgdGlja21hcmsgaW50ZXJ2YWwgaW5wdXQgY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeV9heGlzX3RpY2ttYXJrX2ludGVydmFsX2lucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld0ludGVydmFsID0gTnVtYmVyKCQodGhpcykudmFsKCkpO1xuICAgICAgICB1cGRhdGVfeV9heGlzLnVwZGF0ZVRpY2ttYXJrSW50ZXJ2YWwobmV3SW50ZXJ2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL3ktYXhpcyBtYXggaW5wdXQgY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeV9heGlzX21heF9pbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdNYXggPSBOdW1iZXIoJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIHVwZGF0ZV95X2F4aXMudXBkYXRlTWF4KG5ld01heCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8veS1heGlzIG1pbiBpbnB1dCBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF95X2F4aXNfbWluX2lucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld01pbiA9IE51bWJlcigkKHRoaXMpLnZhbCgpKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVNaW4obmV3TWluLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy95LWF4aXMgb3Bwb3NpdGUgc2lkZSBjZWNrYm94IGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3lfYXhpc19vcHBvc2l0ZV9jaGVja2JveFwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsID0gdXRpbHNfZm9ybXMuZ2V0Q2hlY2tCb3hWYWx1ZSgkKHRoaXMpKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVJc09wcG9zaXRlKHZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8veS1heGlzIGxvZyBjZWNrYm94IGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3lfYXhpc19sb2dfY2hlY2tib3hcIikuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbCA9IHV0aWxzX2Zvcm1zLmdldENoZWNrQm94VmFsdWUoJCh0aGlzKSk7XG4gICAgICAgIHVwZGF0ZV95X2F4aXMudXBkYXRlSXNMb2codmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy95LWF4aXMgZG9sbGFyIC8gcGVyY2VudCBvciBkZWNpbWFsIHNlbGVjdHMgY2hhbmdlZCAoZm9ybWF0KVxuICAgICQoXCIjY2hhcnRfeV9heGlzX3NpZ25zX3NlbGVjdCwgI2NoYXJ0X3lfYXhpc19kZWNpbWFsc19zZWxlY3RcIikuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAkKFwiI2NoYXJ0X3lfYXhpc19zaWduc19zZWxlY3RcIikudmFsKCk7XG4gICAgICAgIHZhciBkZWNpbWFscyA9ICQoXCIjY2hhcnRfeV9heGlzX2RlY2ltYWxzX3NlbGVjdFwiKS52YWwoKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVGb3JtYXQoc2lnbiwgZGVjaW1hbHMsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucylcbiAgICB9KTtcblxuXG5cbiAgICAvKiogVE9PTFRJUCBDSEFOR0VTICovXG5cbiAgICAvL2NoYW5nZSBzaGFyZWQgdG9vbHRpcCBjaGVja2JveCwgZGVjaW1hbHMsIHNpZ25zLCBvciBtdWxpdHBsaWVyIHNlbGVjdHNcbiAgICAkKFwiI2NoYXJ0X3Rvb2x0aXBfc2hhcmVkX2NoZWNrYm94LCAjY2hhcnRfdG9vbHRpcF9mb3JjZV9kZWNpbWFsc19zZWxlY3QsICNjaGFydF90b29sdGlwX3NpZ25zX3NlbGVjdCwgI2NoYXJ0X3Rvb2x0aXBfeV9tdWx0aXBsZV9zZWxlY3RcIikuY2hhbmdlKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB1cGRhdGVfdG9vbHRpcC51cGRhdGVUb29sVGlwKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL2NhbGwgdXBkYXRlIHRvb2x0aXAgYWZ0ZXIgcGFnZSBhbmQgY2hhcnQgaXMgbG9hZGVkIChoYXMgdG8gYmUgb24gYSBjYWxsYmFjayB3aXRoIHRoZSAnY2hhcnQnIG9iamVjdClcbiAgICB1cGRhdGVfdG9vbHRpcC51cGRhdGVUb29sVGlwKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYWxsRm9ybVVwZGF0ZXM7IiwidmFyIHBsb3RPcHRpb25zSW5pdCA9IHJlcXVpcmUoXCIuLi9pbml0aWFsaXplcnMvcGxvdF9vcHRpb25zX2luaXQuanNcIik7XG52YXIgdXBkYXRlX2RhdGEgPSByZXF1aXJlKFwiLi91cGRhdGVfZGF0YS5qc1wiKTtcbnZhciB1cGRhdGVfdG9vbHRpcCA9IHJlcXVpcmUoXCIuL3VwZGF0ZV90b29sdGlwLmpzXCIpO1xuXG5cbi8qKiB3aGVuIGEgY2hhcnQgaWNvbiBpcyBjbGlja2VkLCB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCAtIGNoYW5nZXMgdGhlIGNoYXJ0IHR5cGUgc2hvd24gXG5AbW9kdWxlXG4qL1xudmFyIHVwZGF0ZUNoYXJ0VHlwZSA9IGZ1bmN0aW9uIChpLCB0eXBlLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgIHR5cGUgPSB0eXBlLnJlcGxhY2UoXCJzdGFja2VkX1wiLCBcIlwiKTtcblxuICAgIGlmICh0eXBlID09PSBcImJhclwiKSB7XG4gICAgICAgIC8vZml4IHkgYXhpcyBwb3NpdGlvblxuICAgICAgICBjaGFydC5pbnZlcnRlZCA9IHRydWU7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLmFsaWduID0gXCJtaWRkbGVcIjtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUuYWxpZ24gPSBcImhpZ2hcIjtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueCA9IDA7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLnkgPSA4O1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aXRsZS55ID0gLTIwO1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aXRsZS54ID0gNDA7XG5cbiAgICAgICAgLy9oaWRlIG5vbi1yZWxldmFudCBlbGVtZW50c1xuICAgICAgICAkKFwiLm5vdF9iYXJcIikuaGlkZSgpO1xuXG4gICAgfSBlbHNlIHsgLy9jaGFydCBub3QgYmFyXG4gICAgICAgIGNoYXJ0LmludmVydGVkID0gZmFsc2U7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLmFsaWduID0gXCJoaWdoXCI7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnhBeGlzLnRpdGxlLmFsaWduID0gXCJtaWRkbGVcIjtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueCA9IE51bWJlcigkKFwiI2NoYXJ0X3lfYXhpc194X3Bvc2l0aW9uX2lucHV0XCIpLnZhbCgpKTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueSA9IC0yMDtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUueSA9IDA7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnhBeGlzLnRpdGxlLnggPSAwO1xuICAgICAgICBcbiAgICAgICAgJChcIi5ub3RfYmFyXCIpLnNob3coKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gXCJkcmlsbGRvd25cIikge1xuICAgICAgICB0eXBlID0gXCJjb2x1bW5cIjtcbiAgICB9XG5cbiAgICBjaGFydC54QXhpc1swXS51cGRhdGUoe1xuICAgICAgICBwbG90TGluZXM6IFt7XG4gICAgICAgICAgICBcInZhbHVlXCI6IDAsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiI2MwYzBjMFwiLFxuICAgICAgICAgICAgXCJkYXNoU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgICAgICAgXCJ3aWR0aFwiOiB0eXBlID09PSBcInNjYXR0ZXJcIiB8fCB0eXBlID09PSBcImJ1YmJsZVwiID8gMSA6IDBcbiAgICAgICAgfV1cbiAgICB9LCBmYWxzZSk7XG5cbiAgICBcbiAgICBjaGFydC54QXhpc1swXS5zZXRUaXRsZSh7XG4gICAgICAgIGFsaWduOiBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aXRsZS5hbGlnbixcbiAgICAgICAgeTogYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUueSxcbiAgICAgICAgeDogYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUueFxuICAgIH0sIGZhbHNlKTtcbiAgICBcbiAgICBjaGFydC55QXhpc1swXS5zZXRUaXRsZSh7XG4gICAgICAgIGFsaWduOiBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy50aXRsZS5hbGlnbixcbiAgICAgICAgeDogYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueCxcbiAgICAgICAgeTogYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueVxuICAgIH0sIGZhbHNlKTtcblxuICAgIC8vcmUgcGFyc2UgZGF0YVxuICAgIHVwZGF0ZV9kYXRhLnVwZGF0ZURhdGEoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcblxuXG4gICAgYWxsX2NoYXJ0X29wdGlvbnMuY2hhcnQudHlwZSA9IHR5cGU7XG5cbiAgICAvL3VwZGF0ZSB0b29sdGlwXG4gICAgdXBkYXRlX3Rvb2x0aXAudXBkYXRlVG9vbFRpcChjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVDaGFydFR5cGU7IiwidmFyIGNvbG9yc0luaXQgPSByZXF1aXJlKFwiLi4vaW5pdGlhbGl6ZXJzL2NvbG9yc19pbml0LmpzXCIpO1xuXG4vKiogdXBkYXRlcyB0aGUgY2hhcnQncyBjb2xvcnMgLSBjYWxsZWQgd2hlbiBwYWxldHRlIGlzIGNoYW5nZWQuIENhbGxzIGNvbG9yc0luaXQgXG5AbW9kdWxlXG5AcGFyYW0gY2hhcnQge29iamVjdH0gdGhlIG1haW4gY2hhcnQgb2JqZWN0LCBidWlsdCB3aGVuIGNoYXJ0IGlzIGxvYWRlZFxuQHBhcmFtIGFsbF9jaGFydF9vcHRpb25zIHtvYmplY3R9IHRoZSBtYWluIGNoYXJ0IG9wdGlvbnMgdGhhdCBsb2FkIGludG8gYnVpbGRpbmcgb2YgdGhlIGNoYXJ0IGFuZCBhcmUgdHVybmVkIHRvIHN0cmluZyBmb3IgdGhlIG91dHB1dFxuKiovXG52YXIgdXBkYXRlQ29sb3JzID0gZnVuY3Rpb24gKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgIGFsbF9jaGFydF9vcHRpb25zLmNvbG9ycyA9IGNvbG9yc0luaXQoY2hhcnQpO1xuICAgIGNoYXJ0Lm9wdGlvbnMuY29sb3JzID0gYWxsX2NoYXJ0X29wdGlvbnMuY29sb3JzO1xuXG4gICAgJChjaGFydC5zZXJpZXMpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoe1xuICAgICAgICAgICAgX2NvbG9ySW5kZXg6IGlcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH0pO1xuICAgIFxuICAgIGNoYXJ0LnJlZHJhdygpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVwZGF0ZUNvbG9yczsiLCJ2YXIgcGFyc2VUYWJsZUlucHV0ID0gcmVxdWlyZShcIi4uL3BhcnNlcnMvcGFyc2VfdGFibGVfaW5wdXQuanNcIik7XG5cbi8qKiBjYWxsZWQgd2hlbiAuc2VsZWN0ZWRfY2hhcnRfdHlwZSBvciAjdGFibGVfaW5wdXRfdGV4dGFyZWEgaXMgY2hhbmdlZCAtIGNhbGxzIGZ1bmN0aW9ucyB0byByZXBhcnNlIGRhdGFcbkBuYW1lc3BhY2VcbiovXG5cbnZhciB1cGRhdGVfZGF0YSA9IHtcblxuICAgIC8qKiBjYWxsZWQgd2hlbiAuc2VsZWN0ZWRfY2hhcnRfdHlwZSBvciAjdGFibGVfaW5wdXRfdGV4dGFyZWEgaXMgY2hhbmdlZCAtIGNhbGxzIGZ1bmN0aW9ucyB0byByZXBhcnNlIGRhdGEgKi9cbiAgICB1cGRhdGVEYXRhOiBmdW5jdGlvbiAoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG4gICAgICAgIHZhciBjaGFydF90eXBlID0gJChcIi5zZWxlY3RlZF9jaGFydF90eXBlXCIpLmRpdlZhbCgpO1xuICAgICAgICB2YXIgbG9hZF9zZXJpZXNfZnJvbSA9ICQoXCIuc2VsZWN0ZWRfbG9hZF9zZXJpZXNfZnJvbVwiKS5kaXZWYWwoKTtcbiAgICAgICAgdmFyIGlucHV0ID0gJChcIiN0YWJsZV9pbnB1dF90ZXh0YXJlYVwiKS52YWwoKTtcbiAgICAgICAgdmFyIHBhcnNlZF90YWJsZV9vdXRwdXQgPSBwYXJzZVRhYmxlSW5wdXQoaW5wdXQsIGxvYWRfc2VyaWVzX2Zyb20sIGNoYXJ0X3R5cGUpO1xuXG4gICAgICAgIC8vdXBkYXRlIHgtYXhpcyBjYXRlZ29yaWVzXG4gICAgICAgIGNoYXJ0LnhBeGlzWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICBjYXRlZ29yaWVzOiBwYXJzZWRfdGFibGVfb3V0cHV0LnhfYXhpc19jYXRlZ29yaWVzXG4gICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICAvL3JlbW92ZSBleGlzdGluZyBzZXJpZXMgYXJyYXlcbiAgICAgICAgJChjaGFydC5zZXJpZXMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZmFsc2UpOyAvL2ZhbHNlIHRvIG5vdCByZWRyYXcgeWV0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vYWRkIG5ldyBzZXJpZXNcbiAgICAgICAgJChwYXJzZWRfdGFibGVfb3V0cHV0LnNlcmllcykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjaGFydC5hZGRTZXJpZXModGhpcywgZmFsc2UpOyAvL2ZhbHNlIHRvIG5vdCByZWRyYXcgeWV0XG4gICAgICAgIH0pO1xuICAgICAgICBjaGFydC5yZWRyYXcodHJ1ZSk7XG5cblxuICAgICAgICAvL3VwZGF0ZSBjaGFydCBvcHRpb25zIGZvciBjb2RlIG91dHB1dFxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5zZXJpZXMgPSBwYXJzZWRfdGFibGVfb3V0cHV0LnNlcmllcztcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMuY2F0ZWdvcmllcyA9IHBhcnNlZF90YWJsZV9vdXRwdXQueF9heGlzX2NhdGVnb3JpZXM7XG5cbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVfZGF0YTtcblxuXG4iLCIvKiogd2hlbiBsZWdlbmQgb3B0aW9ucyBhcmUgY2hhbmdlZCBpbiB0aGUgc2lkZSBhcmVhIFxuQG5hbWVzcGFjZVxuKi9cblxudmFyIHVwZGF0ZV9sZWdlbmQgPSB7XG5cbiAgICAvKiogZGVjaWRlIGlmIHRoZSBsZWdlbmQgc2hvdWxkIGJlIHJldmVyc2Ugb3JkZXIgKiovXG4gICAgdXBkYXRlSXNSZXZlcnNlZDogZnVuY3Rpb24gdXBkYXRlSXNSZXZlcnNlZCh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgIHZhciBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgICAgIGxlZ2VuZC5vcHRpb25zLnJldmVyc2VkID0gdmFsO1xuICAgICAgICBsZWdlbmQucmVuZGVyKCk7XG5cblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5sZWdlbmQucmV2ZXJzZWQgPSB2YWw7XG4gICAgfSxcblxuXG4gICAgLyoqIGlmICdubyBsZWdlbmQnIGlzIHNlbGVjdGVkLCBoaWRlIHRoZSBsZWdlbmQsIGFuZCBzZXQgb3B0aW9ucywgZWxzZSwgc2hvdyBpdCB3aXRoIHRoZSBjb3JyZWN0IGxheW91dCAqL1xuICAgIHVwZGF0ZUxheW91dDogZnVuY3Rpb24gdXBkYXRlTGF5b3V0KHZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgaWYgKHZhbCA9PT0gXCJub19sZWdlbmRcIikge1xuICAgICAgICAgICAgbGVnZW5kLmdyb3VwLmhpZGUoKTtcbiAgICAgICAgICAgIGxlZ2VuZC5ib3guaGlkZSgpO1xuICAgICAgICAgICAgbGVnZW5kLmRpc3BsYXkgPSBmYWxzZTtcbiAgICAgICAgICAgIGxlZ2VuZC5vcHRpb25zLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxlZ2VuZC5yZW5kZXIoZmFsc2UpO1xuXG4gICAgICAgICAgICB2YWwgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgbGVnZW5kLm9wdGlvbnMubGF5b3V0ID0gdmFsO1xuICAgICAgICAgICAgbGVnZW5kLnJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICBsZWdlbmQuZ3JvdXAuc2hvdygpO1xuICAgICAgICAgICAgbGVnZW5kLmJveC5zaG93KCk7XG4gICAgICAgICAgICBsZWdlbmQuZGlzcGxheSA9IHRydWU7XG4gICAgICAgICAgICBsZWdlbmQub3B0aW9ucy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC5sYXlvdXQgPSB2YWw7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC5lbmFibGVkID0gbGVnZW5kLm9wdGlvbnMuZW5hYmxlZDtcblxuICAgIH0sXG5cbiAgICAvKiogdXBkYXRlIFggYW5kIFkgcG9zaXRpb25zIG9uIGxlZ2VuZCAqL1xuXG4gICAgdXBkYXRlWFlwb3NpdGlvbnM6IGZ1bmN0aW9uIChuZXdYLCBuZXdZLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgdmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGVnZW5kLm9wdGlvbnMueCA9IG5ld1g7XG4gICAgICAgIGxlZ2VuZC5vcHRpb25zLnkgPSBuZXdZO1xuICAgICAgICBsZWdlbmQucmVuZGVyKGZhbHNlKTtcblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5sZWdlbmQueCA9IG5ld1g7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC55ID0gbmV3WTtcblxuICAgIH1cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX2xlZ2VuZDsiLCIvKiogd2hlbiB0ZW1wbGF0ZSBhcmUgY2hhbmdlZCBpbiB0aGUgc2lkZSBhcmVhLCB0aGVzZSBtZXRob2RzIGFyZSBjYWxsZWQgXG5AbmFtZXNwYWNlXG4qL1xudmFyIHVwZGF0ZV90ZW1wbGF0ZSA9IHtcbiAgICByZXNpemU6IGZ1bmN0aW9uICh2YWwsIGRpbWVuc2lvbiwgY2hhcnQpIHtcbiAgICAgICAgdmFsID0gTnVtYmVyKHZhbCk7XG4gICAgICAgIGlmICghaXNOYU4odmFsKSkge1xuICAgICAgICAgICAgJChcIi5jaGFydF9kaXNwbGF5X2FyZWFcIikuY3NzKGRpbWVuc2lvbiwgdmFsICsgXCJweFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjaGFydC5yZWZsb3coKTtcbiAgICB9LFxuXG4gICAgbWFyZ2luOiBmdW5jdGlvbiAobWFyZ2luc19hcnIsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgICQuZWFjaChjaGFydC5heGVzLCBmdW5jdGlvbiAoaSwgZSkge1xuICAgICAgICAgICAgZS5pc0RpcnR5ID0gdHJ1ZTsgLy90byB0ZWxsIGF4ZXMgdG8gcmVmcmVzaFxuICAgICAgICB9KTtcbiAgICAgICAgY2hhcnQubWFyZ2luID0gbWFyZ2luc19hcnI7XG4gICAgICAgIGNoYXJ0LnJlZHJhdyhmYWxzZSk7XG4gICAgICAgIFxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5jaGFydC5tYXJnaW4gPSBtYXJnaW5zX2FycjtcblxuICAgIH1cbn1cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX3RlbXBsYXRlOyIsInZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG52YXIgdXRpbHNfZm9ybXMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNfZm9ybXNcIik7XG5cblxuLyoqIHdoZW4gdG9vbHRpcCBvcHRpb25zIGFyZSBjaGFuZ2VkIGluIHRoZSBzaWRlIGFyZWEsIHRoZXNlIG1ldGhvZHMgYXJlIGNhbGxlZCBcbkBuYW1lc3BhY2VcbiovXG52YXIgdXBkYXRlX3Rvb2x0aXAgPSB7XG5cbiAgICAvKiogZ2V0cyBhIHRvb2x0aXAgZm9yIHNjYXR0ZXIgY2hhcnRzLiBDYWxsZWQgZnJvbSB1cGRhdGVUb29sVGlwKiovXG4gICAgZ2V0U2NhdHRlclRvb2x0aXA6IGZ1bmN0aW9uIChjaGFydCwgaXNfc2hhcmVkLCBkZWNpbWFscywgc2lnbnNfYXJyLCBtdWx0aXBsaWVyLCBjaGFydF90eXBlKSB7XG4gICAgICAgIHZhciBuZXdfdG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHlfYXhpc190aXRsZSA9IHRoaXMuc2VyaWVzLnlBeGlzLmF4aXNUaXRsZSA/IHRoaXMuc2VyaWVzLnlBeGlzLmF4aXNUaXRsZS50ZXh0U3RyIDogXCJZLUF4aXNcIjtcbiAgICAgICAgICAgIHZhciB4X2F4aXNfdGl0bGUgPSB0aGlzLnNlcmllcy54QXhpcy5heGlzVGl0bGUgPyB0aGlzLnNlcmllcy54QXhpcy5heGlzVGl0bGUudGV4dFN0ciA6IFwiWC1BeGlzXCI7XG5cbiAgICAgICAgICAgIHJldHVybiBcIjxiPlwiICsgdGhpcy5zZXJpZXMubmFtZSArIFwiPC9iPjxicj5cIiArIHlfYXhpc190aXRsZSArIFwiOiA8Yj5cIiArIHNpZ25zX2FyclswXSArXG4gICAgICAgICAgICAgICAgSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQoKHRoaXMueSAqIG11bHRpcGxpZXIpLCBkZWNpbWFscykgKyBzaWduc19hcnJbMV0gKyBcIjwvYj48YnIvPlwiICtcbiAgICAgICAgICAgICAgICB4X2F4aXNfdGl0bGUgKyBcIjogPGI+XCIgKyBzaWduc19hcnJbMF0gKyBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCgodGhpcy54ICogbXVsdGlwbGllciksIGRlY2ltYWxzKSArIHNpZ25zX2FyclsxXSArIFwiPGJyLz5cIjtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXdfdG9vbHRpcDtcbiAgICB9LFxuXG4gICAgLyoqIGdldHMgYSB0b29sdGlwIGZvciB0eXBpY2FsIGNoYXJ0cyAobGluZSwgYXJlYSwgYmFyIGV0YykuIENhbGxlZCBmcm9tIHVwZGF0ZVRvb2xUaXAqKi9cbiAgICBnZXRUeXBpY2FsVG9vbHRpcDogZnVuY3Rpb24gKGNoYXJ0LCBpc19zaGFyZWQsIGRlY2ltYWxzLCBzaWduc19hcnIsIG11bHRpcGxpZXIsIGNoYXJ0X3R5cGUpIHtcblxuICAgICAgICB2YXIgbmV3X3Rvb2x0aXA7XG5cbiAgICAgICAgaWYgKGlzX3NoYXJlZCkgeyAvL1NIQVJFRCBUT09MVElQXG5cbiAgICAgICAgICAgIGlmIChkZWNpbWFscyA+IDApIHsgLy91c2UgZGVjaW1hbCBmb3JtYXR0ZXJcblxuICAgICAgICAgICAgICAgIG5ld190b29sdGlwID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZWRfdG9vbHRpcF9hcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gdGhpcy5wb2ludDtcblxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goY2hhcnQuc2VyaWVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFyZWRfdG9vbHRpcF9hcnIucHVzaChcIjxiPlwiICsgdGhpcy5uYW1lICsgXCI8L2I+IDxicj5cIiArIHRoaXMucG9pbnRzW3BvaW50LnhdLnggKyBcIjogXCIgKyBzaWduc19hcnJbMF0gKyBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCgodGhpcy5wb2ludHNbcG9pbnQueF0ueSAqIG11bHRpcGxpZXIpLCBkZWNpbWFscykgKyBzaWduc19hcnJbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYXJlZF90b29sdGlwX2Fyci5qb2luKCc8YnIvPicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHsgLy9kb24ndCB1c2UgZGVjaW1hbCBmb3JtYXR0ZXJcblxuICAgICAgICAgICAgICAgIG5ld190b29sdGlwID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZWRfdG9vbHRpcF9hcnIgPSBbXCI8Yj5cIiArIHRoaXMua2V5ICsgXCI8L2I+XCJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSB0aGlzLnBvaW50O1xuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChjaGFydC5zZXJpZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlZF90b29sdGlwX2Fyci5wdXNoKHRoaXMubmFtZSArIFwiOiBcIiArIHNpZ25zX2FyclswXSArICQodGhpcy5wb2ludHNbcG9pbnQueF0ueSAqIG11bHRpcGxpZXIpLmFkZENvbW1hcygpICsgc2lnbnNfYXJyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFyZWRfdG9vbHRpcF9hcnIuam9pbignPGJyLz4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9IGVsc2UgeyAvL05PVCBTSEFSRUQgVE9PTFRJUFxuXG4gICAgICAgICAgICBpZiAoZGVjaW1hbHMgPiAwKSB7IC8vdXNlIGRlY2ltYWwgZm9ybWF0dGVyXG4gICAgICAgICAgICAgICAgbmV3X3Rvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjxiPlwiICsgdGhpcy5zZXJpZXMubmFtZSArIFwiPC9iPjxicj5cIiArIHRoaXMueCArIFwiOiBcIiArIHNpZ25zX2FyclswXSArXG4gICAgICAgICAgICAgICAgICAgICAgICBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCgodGhpcy55ICogbXVsdGlwbGllciksIGRlY2ltYWxzKSArIHNpZ25zX2FyclsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgeyAvL2Rvbid0IHVzZSBkZWNpbWFsIGZvcm1hdHRlclxuICAgICAgICAgICAgICAgIG5ld190b29sdGlwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCI8Yj5cIiArIHRoaXMuc2VyaWVzLm5hbWUgKyBcIjwvYj48YnI+XCIgKyB0aGlzLnggKyBcIjogXCIgKyBzaWduc19hcnJbMF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzLnkgKiBtdWx0aXBsaWVyKS5hZGRDb21tYXMoKSArIHNpZ25zX2FyclsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3X3Rvb2x0aXA7XG4gICAgfSxcblxuXG5cblxuXG4gICAgLyoqIHVwZGF0ZSB0b29sdGlwIC0gZGVjaWRlIHdoaWNoIGtpbmQgb2YgY2hhcnQgYW5kIGNhbGwgdGhhdCBnZXQgdG9vbHRpcCBmdW5jdGlvbiAqKi9cbiAgICB1cGRhdGVUb29sVGlwOiBmdW5jdGlvbiAoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIGlzX3NoYXJlZCA9IHV0aWxzX2Zvcm1zLmdldENoZWNrQm94VmFsdWUoJChcIiNjaGFydF90b29sdGlwX3NoYXJlZF9jaGVja2JveFwiKSk7XG4gICAgICAgIHZhciBkZWNpbWFscyA9IE51bWJlcigkKFwiI2NoYXJ0X3Rvb2x0aXBfZm9yY2VfZGVjaW1hbHNfc2VsZWN0XCIpLnZhbCgpKTtcbiAgICAgICAgdmFyIHNpZ25zID0gJChcIiNjaGFydF90b29sdGlwX3NpZ25zX3NlbGVjdFwiKS52YWwoKTtcbiAgICAgICAgdmFyIG11bHRpcGxpZXIgPSAkKFwiI2NoYXJ0X3Rvb2x0aXBfeV9tdWx0aXBsZV9zZWxlY3RcIikudmFsKCk7XG4gICAgICAgIHZhciBjaGFydF90eXBlID0gYWxsX2NoYXJ0X29wdGlvbnMuY2hhcnQudHlwZTtcbiAgICAgICAgdmFyIG5ld190b29sdGlwO1xuICAgICAgICB2YXIgc2lnbnNfYXJyID0gW3NpZ25zID09PSBcIiRcIiA/IFwiJFwiIDogXCJcIiwgc2lnbnMgPT09IFwiJVwiID8gXCIlXCIgOiBcIlwiXTtcblxuXG4gICAgICAgIC8vSUYgQSBUWVBJQ0FMIENIQVJUXG4gICAgICAgIGlmIChbXCJhcmVhXCIsIFwibGluZVwiLCBcImJhclwiLCBcInN0YWNrZWRfYmFyXCIsIFwiY29sdW1uXCIsIFwic3RhY2tlZF9jb2x1bW5cIl0uaW5kZXhPZihjaGFydF90eXBlKSA+IC0xKSB7XG4gICAgICAgICAgICBuZXdfdG9vbHRpcCA9IHVwZGF0ZV90b29sdGlwLmdldFR5cGljYWxUb29sdGlwKGNoYXJ0LCBpc19zaGFyZWQsIGRlY2ltYWxzLCBzaWduc19hcnIsIG11bHRpcGxpZXIsIGNoYXJ0X3R5cGUpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvL0lGIEEgU0NBVFRFUiBDSEFSVFxuICAgICAgICBlbHNlIGlmIChjaGFydF90eXBlID09PSBcInNjYXR0ZXJcIikge1xuICAgICAgICAgICAgbmV3X3Rvb2x0aXAgPSB1cGRhdGVfdG9vbHRpcC5nZXRTY2F0dGVyVG9vbHRpcChjaGFydCwgaXNfc2hhcmVkLCBkZWNpbWFscywgc2lnbnNfYXJyLCBtdWx0aXBsaWVyLCBjaGFydF90eXBlKTtcblxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoIWNoYXJ0KSB7IC8vZm9yIHVzZSBpbiB0b29sdGlwX2luaXRcbiAgICAgICAgICAgIHJldHVybiBuZXdfdG9vbHRpcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0LnRvb2x0aXAub3B0aW9ucy5mb3JtYXR0ZXIgPSBuZXdfdG9vbHRpcDtcbiAgICAvLyAgICBjaGFydC50b29sdGlwLnJlZnJlc2goY2hhcnQuc2VyaWVzWzBdLmRhdGFbMF0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnRvb2x0aXAuZm9ybWF0dGVyID0gdXRpbHNfbWFpbi5zdHJpbmdpZnlGb3JtYXR0ZXIobmV3X3Rvb2x0aXAsIGRlY2ltYWxzLCBtdWx0aXBsaWVyLCBzaWduc19hcnIpO1xuICAgICAgICBcbiAgICB9XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHVwZGF0ZV90b29sdGlwO1xuXG5cbiIsIi8qKiB3aGVuIFgtYXhpcyBvcHRpb25zIGFyZSBjaGFuZ2VkIGluIHRoZSBzaWRlIGFyZWEsIHRoZXNlIG1ldGhvZHMgYXJlIGNhbGxlZCBcbkBuYW1lc3BhY2VcbiovXG5cbnZhciB1cGRhdGVfeF9heGlzID0ge1xuXG4gICAgLyoqIHVwZGF0ZSB0aGUgeCBheGlzIHRpdGxlICovXG4gICAgdXBkYXRlVGl0bGU6IGZ1bmN0aW9uIChuZXdUaXRsZSwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG4gICAgICAgIGNoYXJ0LnhBeGlzWzBdLnNldFRpdGxlKHtcbiAgICAgICAgICAgIHRleHQ6IG5ld1RpdGxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnhBeGlzLnRpdGxlLnRleHQgPSBuZXdUaXRsZTtcblxuICAgIH0sXG5cblxuICAgIC8qKiB1cGRhdGUgeCBheGlzIHRpY2ttYXJrIGludGVydmFsICovXG4gICAgdXBkYXRlVGlja21hcmtJbnRlcnZhbDogZnVuY3Rpb24gKG5ld0ludGVydmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuXG4gICAgICAgIGlmIChpc05hTihuZXdJbnRlcnZhbCkgfHwgbmV3SW50ZXJ2YWwgPT09IDApIHtcbiAgICAgICAgICAgIG5ld0ludGVydmFsID0gdW5kZWZpbmVkO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghY2hhcnQpIHsgLy8gY2FsbGVkIHdoZW4gdGhpcyBpcyB1c2VkIGluIHhfYXhpc19pbml0XG4gICAgICAgICAgICByZXR1cm4gbmV3SW50ZXJ2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SW50ZXJ2YWwgPiBjaGFydC54QXhpc1swXS5kYXRhTWF4KSB7XG4gICAgICAgICAgICBuZXdJbnRlcnZhbCA9IGNoYXJ0LnhBeGlzWzBdLmRhdGFNYXg7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFydC54QXhpc1swXS51cGRhdGUoe1xuICAgICAgICAgICAgdGlja0ludGVydmFsOiBuZXdJbnRlcnZhbFxuICAgICAgICB9KTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGlja0ludGVydmFsID0gbmV3SW50ZXJ2YWw7XG5cbiAgICB9XG5cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX3hfYXhpczsiLCJ2YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG5cbi8qKiB3aGVuIFktYXhpcyBvcHRpb25zIGFyZSBjaGFuZ2VkIGluIHRoZSBzaWRlIGFyZWEsIHRoZXNlIG1ldGhvZHMgYXJlIGNhbGxlZCBcbkBuYW1lc3BhY2VcbiovXG52YXIgdXBkYXRlX3lfYXhpcyA9IHtcblxuXG4gICAgLyoqIHVwZGF0ZSBmb3JtYXQgd2hlbiBkb2xsYXIgLyBwZXJjZW50IHNpZ25zIHNlbGVjdCBpcyBjaGFuZ2VkICovXG4gICAgdXBkYXRlRm9ybWF0OiBmdW5jdGlvbiAoc2lnbiwgZGVjaW1hbHMsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgIHZhciBuZXdGb3JtYXQgPSBcInt2YWx1ZTosLlwiICsgZGVjaW1hbHMgKyBcImZ9XCI7XG4gICAgICAgIGlmIChzaWduID09PSBcIiRcIikge1xuICAgICAgICAgICAgbmV3Rm9ybWF0ID0gXCIke3ZhbHVlOiwuXCIgKyBkZWNpbWFscyArIFwiZn1cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaWduID09PSBcIiVcIikge1xuICAgICAgICAgICAgbmV3Rm9ybWF0ID0gXCJ7dmFsdWU6LC5cIiArIGRlY2ltYWxzICsgXCJmfSVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY2hhcnQpIHsgLy8gY2FsbGVkIHdoZW4gdGhpcyBpcyB1c2VkIGluIHlfYXhpc19pbml0XG4gICAgICAgICAgICByZXR1cm4gbmV3Rm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnQueUF4aXNbMF0udXBkYXRlKHtcbiAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3Rm9ybWF0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLmZvcm1hdCA9IG5ld0Zvcm1hdDtcblxuICAgIH0sXG5cblxuICAgIC8qKiB1cGRhdGUgaWYgeS1heGlzIGlzIGxvZyAqL1xuICAgIHVwZGF0ZUlzTG9nOiBmdW5jdGlvbiAodmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgICAgICB2YXIgdHlwZSA9IHZhbCA9PT0gdHJ1ZSA/IFwibG9nYXJpdGhtaWNcIiA6IFwibGluZWFyXCI7XG4gICAgICAgIGlmICghY2hhcnQpIHsgLy8gY2FsbGVkIHdoZW4gdGhpcyBpcyB1c2VkIGluIHlfYXhpc19pbml0XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0LnlBeGlzWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy50eXBlID0gdHlwZTtcblxuICAgIH0sXG5cblxuICAgIC8qKiB1cGRhdGUgaWYgeSBheGlzIGxhYmVscyBhcmUgb24gb3Bwb3NpdGUgc2lkZSAqL1xuICAgIHVwZGF0ZUlzT3Bwb3NpdGU6IGZ1bmN0aW9uICh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICBjaGFydC55QXhpc1swXS51cGRhdGUoe1xuICAgICAgICAgICAgb3Bwb3NpdGU6IHZhbFxuICAgICAgICB9KTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMub3Bwb3NpdGUgPSB2YWw7XG5cbiAgICB9LFxuXG4gICAgLyoqIHVwZGF0ZSB5LWF4aXMgbWF4ICovXG4gICAgdXBkYXRlTWF4OiBmdW5jdGlvbiAobmV3TWF4LCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgbmV3TWF4ID0gdXRpbHNfbWFpbi5jaGVja2ZvclVuZGVmaW5lZChuZXdNYXgpO1xuICAgICAgICBpZiAoIWNoYXJ0KSB7IC8vIGNhbGxlZCB3aGVuIHRoaXMgaXMgdXNlZCBpbiB5X2F4aXNfaW5pdFxuICAgICAgICAgICAgcmV0dXJuIG5ld01heDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0LnlBeGlzWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICBtYXg6IG5ld01heFxuICAgICAgICB9KTtcblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy5tYXggPSBuZXdNYXg7XG4gICAgfSxcblxuICAgIC8qKiB1cGRhdGUgeS1heGlzIG1pbiAqL1xuICAgIHVwZGF0ZU1pbjogZnVuY3Rpb24gKG5ld01pbiwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG4gICAgICAgIG5ld01pbiA9IHV0aWxzX21haW4uY2hlY2tmb3JVbmRlZmluZWQobmV3TWluKTtcbiAgICAgICAgaWYgKCFjaGFydCkgeyAvLyBjYWxsZWQgd2hlbiB0aGlzIGlzIHVzZWQgaW4geV9heGlzX2luaXRcbiAgICAgICAgICAgIHJldHVybiBuZXdNaW47XG4gICAgICAgIH1cblxuICAgICAgICBjaGFydC55QXhpc1swXS51cGRhdGUoe1xuICAgICAgICAgICAgbWluOiBuZXdNaW5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMubWluID0gbmV3TWluO1xuICAgIH0sXG5cbiAgICAvKiogdXBkYXRlIHRoZSB5IGF4aXMgdGl0bGUgKi9cbiAgICB1cGRhdGVUaXRsZTogZnVuY3Rpb24gKG5ld1RpdGxlLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgY2hhcnQueUF4aXNbMF0uc2V0VGl0bGUoe1xuICAgICAgICAgICAgdGV4dDogbmV3VGl0bGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUudGV4dCA9IG5ld1RpdGxlO1xuXG4gICAgfSxcblxuICAgIC8qKiB1cGRhdGUgeSBheGlzIHgtcG9zaXRpb24gKHRpdGxlLngpICovXG5cblxuICAgIHVwZGF0ZVhQb3NpdGlvbjogZnVuY3Rpb24gKG5ld1hQb3NpdGlvbiwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgbmV3WFBvc2l0aW9uID0gdXRpbHNfbWFpbi5jaGVja2ZvclVuZGVmaW5lZChuZXdYUG9zaXRpb24pO1xuXG4gICAgICAgIGNoYXJ0LnlBeGlzWzBdLnNldFRpdGxlKHtcbiAgICAgICAgICAgIHg6IG5ld1hQb3NpdGlvblxuICAgICAgICB9KTtcblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy50aXRsZS54ID0gbmV3WFBvc2l0aW9uO1xuXG4gICAgfSxcblxuICAgIC8qKiB1cGRhdGUgeSBheGlzIHRpY2ttYXJrIGludGVydmFsICovXG4gICAgdXBkYXRlVGlja21hcmtJbnRlcnZhbDogZnVuY3Rpb24gKG5ld0ludGVydmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuXG4gICAgICAgIG5ld0ludGVydmFsID0gdXRpbHNfbWFpbi5jaGVja2ZvclVuZGVmaW5lZChuZXdJbnRlcnZhbCk7XG5cbiAgICAgICAgaWYgKCFjaGFydCkgeyAvLyBjYWxsZWQgd2hlbiB0aGlzIGlzIHVzZWQgaW4geV9heGlzX2luaXRcbiAgICAgICAgICAgIHJldHVybiBuZXdJbnRlcnZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdJbnRlcnZhbCA+IGNoYXJ0LnlBeGlzWzBdLmRhdGFNYXgpIHtcbiAgICAgICAgICAgIG5ld0ludGVydmFsID0gY2hhcnQueUF4aXNbMF0uZGF0YU1heDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0LnlBeGlzWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICB0aWNrSW50ZXJ2YWw6IG5ld0ludGVydmFsXG5cbiAgICAgICAgfSk7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpY2tJbnRlcnZhbCA9IG5ld0ludGVydmFsO1xuXG4gICAgfVxuXG5cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX3lfYXhpczsiLCIgdmFyIEFsbENoYXJ0T3B0aW9ucyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2FsbF9jaGFydF9vcHRpb25zLmpzXCIpLFxuICAgICBjaGFydEluaXQgPSByZXF1aXJlKFwiLi9jaGFydF9pbml0LmpzXCIpLFxuICAgICBjb2xvcnNJbml0ID0gcmVxdWlyZShcIi4vY29sb3JzX2luaXQuanNcIiksXG4gICAgIGNyZWRpdHNJbml0ID0gcmVxdWlyZShcIi4vY3JlZGl0c19pbml0LmpzXCIpLFxuICAgICBleHBvcnRpbmdJbml0ID0gcmVxdWlyZShcIi4vZXhwb3J0aW5nX2luaXQuanNcIiksXG4gICAgIGxlZ2VuZEluaXQgPSByZXF1aXJlKFwiLi9sZWdlbmRfaW5pdC5qc1wiKSxcbiAgICAgcGxvdE9wdGlvbnNJbml0ID0gcmVxdWlyZShcIi4vcGxvdF9vcHRpb25zX2luaXQuanNcIiksXG4gICAgIHNlcmllc0luaXQgPSByZXF1aXJlKFwiLi9zZXJpZXNfaW5pdC5qc1wiKSxcbiAgICAgc3VidGl0bGVJbml0ID0gcmVxdWlyZShcIi4vc3VidGl0bGVfaW5pdC5qc1wiKSxcbiAgICAgdGl0bGVJbml0ID0gcmVxdWlyZShcIi4vdGl0bGVfaW5pdC5qc1wiKSxcbiAgICAgdG9vbHRpcEluaXQgPSByZXF1aXJlKFwiLi90b29sdGlwX2luaXQuanNcIiksXG4gICAgIHhBeGlzSW5pdCA9IHJlcXVpcmUoXCIuL3hfYXhpc19pbml0LmpzXCIpLFxuICAgICB5QXhpc0luaXQgPSByZXF1aXJlKFwiLi95X2F4aXNfaW5pdC5qc1wiKSxcbiAgICAgcGFyc2VUYWJsZUlucHV0ID0gcmVxdWlyZShcIi4uL3BhcnNlcnMvcGFyc2VfdGFibGVfaW5wdXQuanNcIik7XG5cblxuIC8qKiBjcmVhdGUgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBhbGxfY2hhcnRfb3B0aW9ucyBcbiBAbW9kdWxlXG4gKiovXG4gdmFyIGFsbENoYXJ0T3B0aW9uc0luaXQgPSBmdW5jdGlvbiBhbGxDaGFydE9wdGlvbnNJbml0KCkge1xuICAgICB2YXIgY2hhcnRfdHlwZSA9ICQoXCIuc2VsZWN0ZWRfY2hhcnRfdHlwZVwiKS5kaXZWYWwoKTtcbiAgICAgdmFyIGxvYWRfc2VyaWVzX2Zyb20gPSAkKFwiLnNlbGVjdGVkX2xvYWRfc2VyaWVzX2Zyb21cIikuZGl2VmFsKCk7XG4gICAgIHZhciBpbnB1dCA9ICQoXCIjdGFibGVfaW5wdXRfdGV4dGFyZWFcIikudmFsKCk7XG4gICAgIHZhciBwYXJzZWRfdGFibGVfb3V0cHV0ID0gcGFyc2VUYWJsZUlucHV0KGlucHV0LCBsb2FkX3Nlcmllc19mcm9tLCBjaGFydF90eXBlKTtcbiAgICAgXG5cbiAgICAgLy9nZXQgb3B0aW9ucyBmcm9tIGluZGl2aWR1YWwgaW5pdHNcbiAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICBjaGFydDogY2hhcnRJbml0KGNoYXJ0X3R5cGUpLFxuICAgICAgICAgY29sb3JzOiBjb2xvcnNJbml0KCksXG4gICAgICAgICBjcmVkaXRzOiBjcmVkaXRzSW5pdCgpLFxuICAgICAgICAgLy8gZXhwb3J0aWc6IGV4cG9ydGluZ0luaXQoKSxcbiAgICAgICAgIGxlZ2VuZDogbGVnZW5kSW5pdCgpLFxuICAgICAgICAgcGxvdE9wdGlvbnM6IHBsb3RPcHRpb25zSW5pdChjaGFydF90eXBlKSxcbiAgICAgICAgIHNlcmllczogc2VyaWVzSW5pdChwYXJzZWRfdGFibGVfb3V0cHV0LnNlcmllcyksXG4gICAgICAgICBzdWJ0aXRsZTogc3VidGl0bGVJbml0KCksXG4gICAgICAgICB0aXRsZTogdGl0bGVJbml0KHBhcnNlZF90YWJsZV9vdXRwdXQudGl0bGVfdGV4dCksXG4gICAgICAgICB0b29sdGlwOiB0b29sdGlwSW5pdCgpLFxuICAgICAgICAgeEF4aXM6IHhBeGlzSW5pdChwYXJzZWRfdGFibGVfb3V0cHV0LnhfYXhpc19jYXRlZ29yaWVzLCBjaGFydF90eXBlKSxcbiAgICAgICAgIHlBeGlzOiB5QXhpc0luaXQoY2hhcnRfdHlwZSlcblxuICAgICB9O1xuXG5cbiAgICAgdmFyIGFsbF9jaGFydF9vcHRpb25zID0gbmV3IEFsbENoYXJ0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgcmV0dXJuIGFsbF9jaGFydF9vcHRpb25zO1xuIH07XG5cbiBtb2R1bGUuZXhwb3J0cyA9IGFsbENoYXJ0T3B0aW9uc0luaXQ7IiwidmFyIENoYXJ0T3B0aW9ucyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2NoYXJ0LmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwiY2hhcnRcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIGNoYXJ0SW5pdCA9IGZ1bmN0aW9uIGNoYXJ0SW5pdChjaGFydF90eXBlKSB7XG4gICAgXG4gICAgICAgIGlmIChjaGFydF90eXBlID09PSBcImRyaWxsZG93blwiKXtcbiAgICAgICAgICAgIGNoYXJ0X3R5cGUgPSBcImNvbHVtblwiO1xuICAgICAgICB9XG5cbiAgICAvL2xvYWQgb3B0aW9ucyBmcm9tIHVzZXIgaW5wdXRzXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIG1hcmdpbjogW051bWJlcigkKFwiI3RvcF9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbCgpKSxcbiAgICAgICAgICAgICAgICAgIE51bWJlcigkKFwiI3JpZ2h0X21hcmdpbl90ZXh0aW5wdXRcIikudmFsKCkpLFxuICAgICAgICAgICAgICAgICAgTnVtYmVyKCQoXCIjYm90dG9tX21hcmdpbl90ZXh0aW5wdXRcIikudmFsKCkpLFxuICAgICAgICAgICAgICAgICAgTnVtYmVyKCQoXCIjbGVmdF9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbCgpKSxcbiAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgcmVuZGVyVG86ICQoXCIjY2hhcnRfaWRfdGV4dGlucHV0XCIpLnZhbCgpLFxuXG4gICAgICAgIHR5cGU6IGNoYXJ0X3R5cGVcbiAgICB9XG4gICAgXG5cblxuICAgIHZhciBjaGFydF9vcHRpb25zID0gbmV3IENoYXJ0T3B0aW9ucyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hhcnRfb3B0aW9ucztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2hhcnRJbml0OyIsInZhciBDb2xvcnMgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy9jb2xvcnMuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJjb2xvcnNcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIGNvbG9yc0luaXQgPSBmdW5jdGlvbiBjb2xvcnNJbml0KGNoYXJ0KSB7XG4gICAgdmFyIGNvbG9yX2FyciA9IFtdO1xuICAgICQoXCIuY29sb3JfcGFsZXR0ZV9zZWxlY3RlZCAuY29sb3JfcGFsZXR0ZV9jZWxsXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjb2xvcl9hcnIucHVzaCgkKHRoaXMpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIikpO1xuICAgIH0pO1xuICAgIFxuICAgIGlmIChjaGFydCl7XG4gICAgICAgIHJldHVybiBjb2xvcl9hcnI7XG4gICAgfVxuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBjb2xvcnM6IGNvbG9yX2FyclxuICAgIH07XG5cbiAgICB2YXIgY29sb3JzID0gbmV3IENvbG9ycyhvcHRpb25zKTtcbiAgICByZXR1cm4gY29sb3JzLmNvbG9ycztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29sb3JzSW5pdDsiLCJ2YXIgQ3JlZGl0cyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2NyZWRpdHMuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJjcmVkaXRzXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi9cbnZhciBjcmVkaXRzSW5pdCA9IGZ1bmN0aW9uIGNyZWRpdHNJbml0KCkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICB0ZXh0OiAkKFwiI2NoYXJ0X2NyZWRpdHNfdGV4dF90ZXh0YXJlYVwiKS52YWwoKSxcbiAgICAgICAgcG9zaXRpb246e1xuICAgICAgICAgICAgeTogTnVtYmVyKCQoXCIjY2hhcnRfY3JlZGl0c195X3Bvc2l0aW9uX2lucHV0XCIpLnZhbCgpKVxuICAgICAgICB9XG5cblxuICAgIH07XG5cblxuICAgIHZhciBjcmVkaXRzID0gbmV3IENyZWRpdHMob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNyZWRpdHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWRpdHNJbml0OyIsInZhciBFeHBvcnRpbmcgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy9leHBvcnRpbmcuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJleHBvcnRpbmdcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIGV4cG9ydGluZ0luaXQgPSBmdW5jdGlvbiBleHBvcnRpbmdJbml0KCkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuXG4gICAgfTtcblxuXG4gICAgdmFyIGV4cG9ydGluZyA9IG5ldyBFeHBvcnRpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGV4cG9ydGluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0aW5nSW5pdDsiLCJ2YXIgTGVnZW5kID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvbGVnZW5kLmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwibGVnZW5kXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi8gXG4gdmFyIGxlZ2VuZEluaXQgPSBmdW5jdGlvbiBsZWdlbmRJbml0KCkge1xuICAgICBcbiAgICAgXG4gICAgIHZhciBnZXRMZWdlbmRMYXlvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgdmFyIGxlZ2VuZF9sYXlvdXRfdmFsID0gJChcIiNsZWdlbmRfbGF5b3V0X3NlbGVjdFwiKS52YWwoKTtcbiAgICAgICAgIHJldHVybiBsZWdlbmRfbGF5b3V0X3ZhbCAhPT0gXCJub19sZWdlbmRcIiA/IGxlZ2VuZF9sYXlvdXRfdmFsIDogdW5kZWZpbmVkO1xuICAgICB9O1xuICAgICBcbiAgICAgXG5cbiAgICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgIGxheW91dDogZ2V0TGVnZW5kTGF5b3V0KCksXG4gICAgICAgICB4OiBOdW1iZXIoJChcIiNsZWdlbmRfcGxhY2VtZW50X3hcIikudmFsKCkpLFxuICAgICAgICAgeTogTnVtYmVyKCQoXCIjbGVnZW5kX3BsYWNlbWVudF95XCIpLnZhbCgpKVxuXG4gICAgIH07XG5cblxuICAgICB2YXIgbGVnZW5kID0gbmV3IExlZ2VuZChvcHRpb25zKTtcbiAgICAgcmV0dXJuIGxlZ2VuZDtcbiB9O1xuXG4gbW9kdWxlLmV4cG9ydHMgPSBsZWdlbmRJbml0OyIsInZhciBQbG90T3B0aW9ucyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3Bsb3Rfb3B0aW9ucy5qc1wiKTtcblxuLyoqIEluaXRpYWxpemVyIGZvciBcInBsb3RPcHRpb25zXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi9cbnZhciBwbG90T3B0aW9uc0luaXQgPSBmdW5jdGlvbiBwbG90T3B0aW9uc0luaXQoY2hhcnRfdHlwZSkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgIGV2ZW50czoge30sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7fSxcblxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLjUsXG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIG9wdGlvbnNbY2hhcnRfdHlwZV0gPSB7fTtcblxuICAgIC8qKiB1bmlxdWUgY2hhcnQgb3B0aW9ucyAoY2hvb3NpbmcgdG8ga2VlcCB0aGVzZSB3aXRoIGV2ZXJ5IGNoYXJ0IHNvIEkgZG9uJ3QgaGF2ZSB0byByZWxvYWQgdGhlbSB3aXRoIGluZGl2aWR1YWwgc2VyaWVzIHdoZW4gY2hhcnQgdHlwZXMgYXJlIHVwZGF0ZWQpICovXG4gICAgLy9qdXN0IGZvciBiYXIgb3IgY29sdW1uIFxuICAgIG9wdGlvbnMuc2VyaWVzLmdyb3VwUGFkZGluZyA9IDAuMjtcbiAgICBvcHRpb25zLnNlcmllcy5wb2ludFBhZGRpbmcgPSAwLjE7XG4gICAgb3B0aW9ucy5zZXJpZXMucG9pbnRQbGFjZW1lbnQgPSBudWxsO1xuICAgIG9wdGlvbnMuc2VyaWVzLnN0YWNraW5nID0gbnVsbDtcbiAgICBvcHRpb25zLnNlcmllcy5taW5Qb2ludExlbmd0aCA9IDI7XG5cblxuICAgIC8vanVzdCBmb3IgYnViYmxlIGNoYXJ0c1xuICAgIG9wdGlvbnMuc2VyaWVzLm1heFNpemUgPSA1MDtcbiAgICBvcHRpb25zLnNlcmllcy5zaXplQnkgPSAnd2lkdGgnOyAvL2luc3RlYWQgb2YgJ2FyZWEnLCBzZWVtcyBtb3JlIGFjY3VyYXRlXG5cblxuICAgIHZhciBwbG90T3B0aW9ucyA9IG5ldyBQbG90T3B0aW9ucyhvcHRpb25zKTtcbiAgICByZXR1cm4gcGxvdE9wdGlvbnM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBsb3RPcHRpb25zSW5pdDsiLCJ2YXIgU2VyaWVzID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvc2VyaWVzLmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwic2VyaWVzXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi9cbnZhciBzZXJpZXNJbml0ID0gZnVuY3Rpb24gc2VyaWVzSW5pdChzZXJpZXMpIHtcblxuICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICB2YXIgb3B0aW9ucyA9IHNlcmllcztcblxuXG4gICAgdmFyIHNlcmllcyA9IG5ldyBTZXJpZXMob3B0aW9ucyk7XG4gICAgcmV0dXJuIHNlcmllcy5zZXJpZXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNlcmllc0luaXQ7IiwidmFyIFN1YnRpdGxlID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvc3VidGl0bGUuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJzdWJ0aXRsZVwiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZVxuQG1vZHVsZVxuKi9cblxudmFyIHN1YnRpdGxlSW5pdCA9IGZ1bmN0aW9uIHN1YnRpdGxlSW5pdCgpIHtcblxuICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICB2YXIgb3B0aW9ucyA9IHtcblxuICAgIH07XG5cblxuICAgIHZhciBzdWJ0aXRsZSA9IG5ldyBTdWJ0aXRsZShvcHRpb25zKTtcbiAgICByZXR1cm4gc3VidGl0bGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1YnRpdGxlSW5pdDsiLCJ2YXIgVGl0bGUgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy90aXRsZS5qc1wiKTtcblxuLyoqIEluaXRpYWxpemVyIGZvciBcInRpdGxlXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi9cbnZhciB0aXRsZUluaXQgPSBmdW5jdGlvbiB0aXRsZUluaXQodGl0bGVfdGV4dCkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICB0ZXh0OiB0aXRsZV90ZXh0XG4gICAgfTtcblxuXG4gICAgdmFyIHRpdGxlID0gbmV3IFRpdGxlKG9wdGlvbnMpO1xuICAgIHJldHVybiB0aXRsZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdGl0bGVJbml0OyIsInZhciBUb29sdGlwID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvdG9vbHRpcC5qc1wiKTtcbnZhciB1dGlsc19mb3JtcyA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc19mb3Jtcy5qc1wiKTtcblxuLyoqIEluaXRpYWxpemVyIGZvciBcInRvb2x0aXBcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIHRvb2x0aXBJbml0ID0gZnVuY3Rpb24gdG9vbHRpcEluaXQoKSB7XG5cbiAgICAvL2xvYWQgb3B0aW9ucyBmcm9tIHVzZXIgaW5wdXRzXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkICAvLy9mb3JtYXR0ZXIgaXMgY3JlYXRlZCB3aXRoIHVwZGF0ZV90b29sdGlwIGFzIGEgY2FsbGJhY2sgKG5lZWRzIGNoYXJ0IHRvIGV4aXN0IGZpcnN0KVxuICAgICAgICBcbiAgICB9O1xuXG4gICAgdmFyIHRvb2x0aXAgPSBuZXcgVG9vbHRpcChvcHRpb25zKTtcbiAgICByZXR1cm4gdG9vbHRpcDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdG9vbHRpcEluaXQ7IiwidmFyIHVwZGF0ZV94X2F4aXMgPSByZXF1aXJlKFwiLi4vZm9ybV91cGRhdGVzL3VwZGF0ZV94X2F4aXMuanNcIik7XG52YXIgWEF4aXMgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy94X2F4aXMuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJ4QXhpc1wiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBcbkBtb2R1bGVcbiovXG52YXIgeEF4aXNJbml0ID0gZnVuY3Rpb24geEF4aXNJbml0KGNhdGVnb3JpZXMsIGNoYXJ0X3R5cGUpIHtcblxuICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICB2YXIgb3B0aW9ucyA9IHtcblxuICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcGxvdExpbmVzOiBbe1xuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAwLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNjMGMwYzBcIixcbiAgICAgICAgICAgIFwiZGFzaFN0eWxlXCI6IFwic29saWRcIixcbiAgICAgICAgICAgIFwid2lkdGhcIjogY2hhcnRfdHlwZSA9PT0gXCJzY2F0dGVyXCIgfHwgY2hhcnRfdHlwZSA9PT0gXCJidWJibGVcIiA/IDEgOiAwXG4gICAgICAgIH1dLFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgYWxpZ246IGNoYXJ0X3R5cGUgPT09IFwiYmFyXCIgfHwgY2hhcnRfdHlwZSA9PT0gXCJzdGFja2VkX2JhclwiID8gXCJoaWdoXCIgOiBcIm1pZGRsZVwiLFxuICAgICAgICAgICAgdGV4dDogJChcIiNjaGFydF94X2F4aXNfdGl0bGVfdGV4dGFyZWFcIikudmFsKCksXG4gICAgICAgICAgICB4OiAgY2hhcnRfdHlwZSA9PT0gXCJiYXJcIiB8fCBjaGFydF90eXBlID09PSBcInN0YWNrZWRfYmFyXCIgPyA0MCA6IDAgXG4gICAgICAgIH0sXG4gICAgICAgIHRpY2tJbnRlcnZhbDogdXBkYXRlX3hfYXhpcy51cGRhdGVUaWNrbWFya0ludGVydmFsKE51bWJlcigkKFwiI2NoYXJ0X3hfYXhpc190aWNrbWFya19pbnRlcnZhbF9pbnB1dFwiKS52YWwoKSkpXG5cbiAgICB9O1xuXG5cbiAgICB2YXIgeEF4aXMgPSBuZXcgWEF4aXMob3B0aW9ucyk7XG4gICAgcmV0dXJuIHhBeGlzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB4QXhpc0luaXQ7IiwidmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNfbWFpbi5qc1wiKTtcbnZhciBZQXhpcyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3lfYXhpcy5qc1wiKTtcbnZhciB1cGRhdGVfeV9heGlzID0gcmVxdWlyZShcIi4uL2Zvcm1fdXBkYXRlcy91cGRhdGVfeV9heGlzLmpzXCIpO1xudmFyIHV0aWxzX2Zvcm1zID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzX2Zvcm1zLmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwieUF4aXNcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIHlBeGlzSW5pdCA9IGZ1bmN0aW9uIHlBeGlzSW5pdChjaGFydF90eXBlKSB7XG5cbiAgICAvKiogbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHMgKi9cbiAgICB2YXIgb3B0aW9ucyA9IHtcblxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogdXBkYXRlX3lfYXhpcy51cGRhdGVGb3JtYXQoJChcIiNjaGFydF95X2F4aXNfc2lnbnNfc2VsZWN0XCIpLnZhbCgpLCAkKFwiI2NoYXJ0X3lfYXhpc19kZWNpbWFsc19zZWxlY3RcIikudmFsKCkpIC8vdmFsLCBkZWNpbWFsc1xuICAgICAgICB9LFxuXG4gICAgICAgIG1heDogdXBkYXRlX3lfYXhpcy51cGRhdGVNYXgoTnVtYmVyKCQoXCIjY2hhcnRfeV9heGlzX21heF9pbnB1dFwiKS52YWwoKSkpLFxuICAgICAgICBtaW46IHVwZGF0ZV95X2F4aXMudXBkYXRlTWluKE51bWJlcigkKFwiI2NoYXJ0X3lfYXhpc19taW5faW5wdXRcIikudmFsKCkpKSxcbiAgICAgICAgdHlwZTogdXBkYXRlX3lfYXhpcy51cGRhdGVJc0xvZyh1dGlsc19mb3Jtcy5nZXRDaGVja0JveFZhbHVlKCQoXCIjY2hhcnRfeV9heGlzX2xvZ19jaGVja2JveFwiKSkpLFxuICAgICAgICBvcHBvc2l0ZTogdXRpbHNfZm9ybXMuZ2V0Q2hlY2tCb3hWYWx1ZSgkKFwiI2NoYXJ0X3lfYXhpc19vcHBvc2l0ZV9jaGVja2JveFwiKSksXG4gICAgICAgIHRpY2tJbnRlcnZhbDogdXBkYXRlX3lfYXhpcy51cGRhdGVUaWNrbWFya0ludGVydmFsKE51bWJlcigkKFwiI2NoYXJ0X3lfYXhpc190aWNrbWFya19pbnRlcnZhbF9pbnB1dFwiKS52YWwoKSkpLFxuXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiAkKFwiI2NoYXJ0X3lfYXhpc190aXRsZV90ZXh0YXJlYVwiKS52YWwoKSxcbiAgICAgICAgICAgIGFsaWduOiBjaGFydF90eXBlID09PSBcImJhclwiID8gXCJtaWRkbGVcIiA6IFwiaGlnaFwiLFxuICAgICAgICAgICAgeDogY2hhcnRfdHlwZSA9PT0gXCJiYXJcIiB8fCBjaGFydF90eXBlID09PSBcInN0YWNrZWRfYmFyXCIgPyAwIDogTnVtYmVyKCQoXCIjY2hhcnRfeV9heGlzX3hfcG9zaXRpb25faW5wdXRcIikudmFsKCkpLFxuICAgICAgICAgICAgeTogY2hhcnRfdHlwZSA9PT0gXCJiYXJcIiB8fCBjaGFydF90eXBlID09PSBcInN0YWNrZWRfYmFyXCIgPyA4IDogLTIwLFxuICAgICAgICB9XG5cblxuICAgIH07XG5cblxuICAgIHZhciB5QXhpcyA9IG5ldyBZQXhpcyhvcHRpb25zKTtcbiAgICByZXR1cm4geUF4aXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHlBeGlzSW5pdDtcbiIsIi8qKlxuICogQ29udGFpbnMgZnVuY3Rpb25zIHRoYXQgZGVhbCB3aXRoIGtleWJvYXJkIGlucHV0c1xuICogQG5hbWVzcGFjZVxuICovXG52YXIga2V5Ym9hcmRfaW5wdXRzID0ge1xuXG4gICAgYWRqVmFsdWU6IGZ1bmN0aW9uICh2YWwsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgdmFsID0gTnVtYmVyKHZhbCk7XG4gICAgICAgIGlmICghaXNOYU4odmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gXCIrXCIgPyB2YWwgKyAxMCA6IHZhbCAtIDEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKiB3aGVuIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHByZXNzaW5nIHVwIG9yIGRvd25jaGFuZ2VzIHdoaWNoIHNpZGUgbmF2IHRhYiBpcyBzZWxlY3RlZCAqL1xuICAgIHNpZGVOYXZUYWJTaG9ydGN1dHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChkb2N1bWVudCkua2V5ZG93bihmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCkgeyAvL3VwXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICQoXCIuc2VsZWN0ZWRfdGFiXCIpLnByZXYoKS5jbGljaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDQwKSB7IC8vZG93blxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkKFwiLnNlbGVjdGVkX3RhYlwiKS5uZXh0KCkuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA2NykgeyAvL2NcbiAgICAgICAgICAgICAgICAkKFwiI3RhYl90eXBlXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gODMpIHsgLy9zXG4gICAgICAgICAgICAgICAgJChcIiN0YWJfY2hhcnRfdGVtcGxhdGVcIikuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA2OCkgeyAvL2RcbiAgICAgICAgICAgICAgICAkKFwiI3RhYl9kYXRhXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gNzMpIHsgLy9pXG4gICAgICAgICAgICAgICAgJChcIiN0YWJfc2VyaWVzX29wdGlvbnNcIikuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA3NikgeyAvL2xcbiAgICAgICAgICAgICAgICAkKFwiI3RhYl9jaGFydF9sZWdlbmRcIikuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA4OCkgeyAvL3hcbiAgICAgICAgICAgICAgICAkKFwiI3RhYl9jaGFydF94X2F4aXNcIikuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA4OSkgeyAvL3lcbiAgICAgICAgICAgICAgICAkKFwiI3RhYl9jaGFydF95X2F4aXNcIikuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA4NCkgeyAvL3RcbiAgICAgICAgICAgICAgICAkKFwiI3RhYl9jaGFydF90b29sdGlwXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gNzgpIHsgLy9uXG4gICAgICAgICAgICAgICAgJChcIiN0YWJfY2hhcnRfY3JlZGl0c1wiKS5jbGljaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDY5KSB7IC8vNjlcbiAgICAgICAgICAgICAgICAkKFwiI3RhYl9jaGFydF9leHRyYV9vcHRpb25zXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiBpbiBudW1iZXIgZW50cnkgaW5wdXRzLCBwcmVzc2luZyB1cCBvciBkb3duIHdpbGwgYWRqdXN0IHZhbHVlICovXG4gICAgbnVtYmVyQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCkgeyAvL3VwIFxuICAgICAgICAgICAgJCh0aGlzKS52YWwoa2V5Ym9hcmRfaW5wdXRzLmFkalZhbHVlKCQodGhpcykudmFsKCksIFwiK1wiKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCkgeyAvL2Rvd25cbiAgICAgICAgICAgICQodGhpcykudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKHRoaXMpLnZhbCgpLCBcIi1cIikpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKiBpbml0aWFsaXplIGxpc3RlbnRlcnMgXG4gICAgd2hlbiBhIG51bWJlciBlbnRyeSBpbnB1dCBpcyBmb2N1c2VkIG9uLCBhdHRhY2ggdGhvc2UgZXZlbnQgbGlzdGVuZXJzXG4gICAgd2hlbiBpdCBsZWF2ZXMgdG8gbWFpbiBkb2N1bWVudCwgYXR0YWNoIHRob3NlXG4gICAgKiovXG4gICAgaW5pdExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAkKFwiaW5wdXQsIHRleHRhcmVhXCIpLmZvY3VzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLnVuYmluZCgpO1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoXCJrZXlkb3duXCIpOyAvL3NvIGl0IGRvZXNudCBkdXBsaWNhdGUgd2hlbiBtb3ZpbmcgZnJvbSBvbmUgZW50cnkgdG8gYW5vdGhlclxuICAgICAgICAgICAgJChcIi5udW1iZXJfZW50cnlcIikub24oXCJrZXlkb3duXCIsIGtleWJvYXJkX2lucHV0cy5udW1iZXJDaGFuZ2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChcImlucHV0LCB0ZXh0YXJlYVwiKS5ibHVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykub2ZmKFwia2V5ZG93blwiKTtcbiAgICAgICAgICAgIC8vcmVpbml0IHNpZGUgdGFiIG5hdiBzaG9ydGN1dHNcbiAgICAgICAgICAgIGtleWJvYXJkX2lucHV0cy5zaWRlTmF2VGFiU2hvcnRjdXRzKCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICB9XG5cbn1cblxuLy9maXJzdCBpbml0XG5rZXlib2FyZF9pbnB1dHMuc2lkZU5hdlRhYlNob3J0Y3V0cygpO1xua2V5Ym9hcmRfaW5wdXRzLmluaXRMaXN0ZW5lcnMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlib2FyZF9pbnB1dHM7IiwidmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG4vKiogb2JqZWN0IHRoYXQgY29udGFpbnMgZnVuY3Rpb25zIGZvciBhbGwgdGhlIG5hdmlnYXRpb24sIGllIGNoYW5naW5nIGJldHdlZW4gb3B0aW9ucyBhbmQgY2hhcnQgdHlwZXMgXG5AbmFtZXNwYWNlXG4qL1xudmFyIG5hdmlnYXRpb25fc2V0dXAgPSB7XG5cbiAgICAvKiogd2hlbiB0YWJzIG9uIGxlZnQgc2lkZSBuYXYgYmFyIGFyZSBjbGlja2VkLCBvcHRpb25zIGRpc3BsYXllZCBhcmUgY2hhbmdlZCAqKi9cbiAgICBzaWRlTmF2VGFic0NoYW5nZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQoXCIjc2lkZV9uYXZfdGFicyAudGFiXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vY2hhbmdlIHNlbGVjdGVkIG1lbnUgdGFiXG4gICAgICAgICAgICAkKFwiI3NpZGVfbmF2X3RhYnMgLnNlbGVjdGVkX3RhYlwiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkX3RhYlwiKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJzZWxlY3RlZF90YWJcIik7XG5cbiAgICAgICAgICAgIC8vY2hhbmdlIGRpc3BsYXkgZGl2IHNob3dpbmdcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZElEID0gXCIjXCIgKyAkKHRoaXMpLmF0dHIoXCJpZFwiKS5yZXBsYWNlKFwidGFiXCIsIFwiZGlzcGxheVwiKTtcbiAgICAgICAgICAgICQoXCIjc2lkZV9kaXNwbGF5IC5zZWxlY3RlZF9kaXNwbGF5XCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRfZGlzcGxheVwiKTtcbiAgICAgICAgICAgICQoc2VsZWN0ZWRJRCkuYWRkQ2xhc3MoXCJzZWxlY3RlZF9kaXNwbGF5XCIpO1xuXG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKiB3aGVuIGNoYXJ0IGNvZGUgaXMgZW50ZXJlZCwgdXBkYXRlICoqL1xuICAgIGNoYXJ0T3V0cHV0Q29kZUZvY3VzOiBmdW5jdGlvbiAoYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgJChcIiNjaGFydF9vdXRwdXRfY29kZVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB1dGlsc19tYWluLndyaXRlQ29kZShhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgfSxcblxuXG4gICAgLyoqIHdoZW4gY2hhcnQgdHlwZSBpY29uIGlzIGNsaWNrZWQgYW5kIGNoYW5nZWQgKiovXG4gICAgY2hhcnRUeXBlSWNvbkNoYW5nZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQoXCIjY2hhcnRfdHlwZV9pY29ucyAuY2hhcnRfdHlwZV9pY29uXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vY2hhbmdlIHNlbGVjdGVkIGljb25cbiAgICAgICAgICAgICQoXCIjY2hhcnRfdHlwZV9pY29ucyAuY2hhcnRfdHlwZV9pY29uXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRfY2hhcnRfdHlwZVwiKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJzZWxlY3RlZF9jaGFydF90eXBlXCIpO1xuICAgICAgICAgICAgdmFyIGNoYXJ0X3R5cGUgPSAkKHRoaXMpLmRpdlZhbCgpO1xuXG4gICAgICAgICAgICAvL2hpZGUgc3R1ZmYgdW5yZWxhdGVkIHRvIHRoYXQgY2hhcnQgdHlwZSAobGluZSwgYmFyLCBjb2x1bW4pXG4gICAgICAgICAgICBpZiAoW1wiYXJlYVwiLCBcImxpbmVcIiwgXCJiYXJcIiwgXCJjb2x1bW5cIiwgXCJzdGFja2VkX2NvbHVtblwiLCBcInN0YWNrZWRfYmFyXCJdLmluZGV4T2YoY2hhcnRfdHlwZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICQoXCIuc2hvd19saW5lLCAuc2hvd19iYXIsIC5zaG93X2NvbHVtblwiKS5zaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoXCIuc2hvd19saW5lLCAuc2hvd19iYXIsIC5zaG93X2NvbHVtblwiKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGFydF90eXBlID09PSBcInNjYXR0ZXJcIikge1xuICAgICAgICAgICAgICAgICQoXCIuc2hvd19zY2F0dGVyXCIpLnNob3coKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChcIi5zaG93X3NjYXR0ZXJcIikuaGlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKiB3aGVuIGNsZWFyIG5leHQgdGV4dCBhcmVhIGJ1dHRvbiAoWCkgaXMgY2xpY2tlZCwgZmluZCBhbmQgY2xlYXIgdGhlIHRleHQgb2YgdGhlIG5leHQgdGV4dGFyZWEgKi9cbiAgICBjbGVhck5leHRUZXh0YXJlYUNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoXCIuY2xlYXJfbmV4dF90ZXh0YXJlYV9idXR0b25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5uZXh0KFwidGV4dGFyZWFcIikudmFsKFwiXCIpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICAvKiogd2hlbiAjY29sb3JfcGFsZXR0ZV9yZXZlcnNlX2ljb24gaXMgY2xpY2tlZCwgcmV2ZXJzZSB0aGUgb3JkZXJzIG9mIGVhY2ggcGFsZXR0ZSAqL1xuICAgIGNvbG9yUGFsZXR0ZVJldmVyc2VJY29uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChcIiNjb2xvcl9wYWxldHRlX3JldmVyc2VfaWNvblwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKFwiLmNvbG9yX3BhbGV0dGVfcm93XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3JvdyA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yX2NlbGxzID0gdGhpc19yb3cuY2hpbGRyZW4oJy5jb2xvcl9wYWxldHRlX2NlbGwnKTtcbiAgICAgICAgICAgICAgICB0aGlzX3Jvdy5wcmVwZW5kKGNvbG9yX2NlbGxzLmdldCgpLnJldmVyc2UoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoXCIuY29sb3JfcGFsZXR0ZV9zZWxlY3RlZFwiKS5jbGljaygpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIHdoZW4gLmNvbG9yX3BhbGV0dGVfcm93IGlzIGNsaWNrZWQsIGNoYW5nZSBjb2xvcnMgKi9cbiAgICBjb2xvclBhbGV0dGVSb3dDbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAkKFwiLmNvbG9yX3BhbGV0dGVfcm93XCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoXCIuY29sb3JfcGFsZXR0ZV9yb3dcIikucmVtb3ZlQ2xhc3MoXCJjb2xvcl9wYWxldHRlX3NlbGVjdGVkXCIpO1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImNvbG9yX3BhbGV0dGVfc2VsZWN0ZWRcIik7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKiB3aGVuIGEgaGVscCBpY29uIGlzIGNsaWNrZWQgKi9cblxuICAgIGhlbHBJY29uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkKFwiLmhlbHBfaWNvblwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwiaGVscF9vblwiKTtcbiAgICAgICAgICAgICQoXCIubm90ZXNcIiwgJCh0aGlzKS5wYXJlbnRzKFwiZGl2XCIpKS50b2dnbGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICB9LFxuXG4gICAgLyoqIHdoZW4gYSBnZXQgY29kZSBidXR0b24gaXMgY2xpY2tlZCwgdXBkYXRlIGFuZCBzaG93IHRoZSBjb2RlIGFyZWEuICovXG5cbiAgICBnZXRDb2RlQnV0dG9uQ2xpY2s6IGZ1bmN0aW9uIChhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgICQoXCIjZ2V0X2NvZGVfYnV0dG9uXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgIHZhciAkZ2V0X2NvZGVfc3BhbiA9ICQoXCIjZ2V0X2NvZGVfdGV4dFwiKTtcbiAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJjb2RlX29uXCIpO1xuICAgICAgICAgICAgJChcIiNtYWluX3Jlc3VsdF9jb2RlX2RpdlwiKS5zbGlkZVRvZ2dsZSgxMDApO1xuICAgICAgICAgICAgaWYgKCRnZXRfY29kZV9zcGFuLnRleHQoKSA9PT0gXCJHZXQgY29kZVwiKSB7XG4gICAgICAgICAgICAgICAgdXRpbHNfbWFpbi53cml0ZUNvZGUoYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgICAgICAgICAgICAgICRnZXRfY29kZV9zcGFuLnRleHQoXCJIaWRlIGNvZGVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRnZXRfY29kZV9zcGFuLnRleHQoXCJHZXQgY29kZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9LFxuXG4gICAgLyoqIHdoZW4gXCJMb2FkIHNlcmllcyBuYW1lcyBmcm9tOlwiIGljb25zIGFyZSBjbGlja2VkIGFuZCBjaGFuZ2VkICovXG4gICAgbG9hZFNlcmllc0Zyb21JY29uOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJChcIiN0YWJsZV9pbnB1dF9sb2FkX3Nlcmllc19mcm9tX2ljb25zIC5sb2FkX3Nlcmllc19mcm9tX2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9jaGFuZ2Ugc2VsZWN0ZWQgaWNvblxuICAgICAgICAgICAgJChcIiN0YWJsZV9pbnB1dF9sb2FkX3Nlcmllc19mcm9tX2ljb25zIC5sb2FkX3Nlcmllc19mcm9tX2ljb25cIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZF9sb2FkX3Nlcmllc19mcm9tXCIpO1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcInNlbGVjdGVkX2xvYWRfc2VyaWVzX2Zyb21cIik7XG5cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiBJTklUIEFMTCBOQVZJR0FUSU9OLCBjYWxsZWQgZnJvbSBhcHAuanMgd2hlbiBwYWdlIGlzIGxvYWRlZCAqKi9cbiAgICBpbml0QWxsTmF2aWdhdGlvbjogZnVuY3Rpb24gKGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgbmF2aWdhdGlvbl9zZXR1cC5zaWRlTmF2VGFic0NoYW5nZSgpO1xuICAgICAgICBuYXZpZ2F0aW9uX3NldHVwLmNoYXJ0VHlwZUljb25DaGFuZ2UoKTtcbiAgICAgICAgbmF2aWdhdGlvbl9zZXR1cC5oZWxwSWNvbkNsaWNrKCk7XG4gICAgICAgIG5hdmlnYXRpb25fc2V0dXAuZ2V0Q29kZUJ1dHRvbkNsaWNrKGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICAgICAgbmF2aWdhdGlvbl9zZXR1cC5jaGFydE91dHB1dENvZGVGb2N1cyhhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgIG5hdmlnYXRpb25fc2V0dXAubG9hZFNlcmllc0Zyb21JY29uKCk7XG4gICAgICAgIG5hdmlnYXRpb25fc2V0dXAuY2xlYXJOZXh0VGV4dGFyZWFDbGljaygpO1xuICAgICAgICBuYXZpZ2F0aW9uX3NldHVwLmNvbG9yUGFsZXR0ZVJvd0NsaWNrKCk7XG4gICAgICAgIG5hdmlnYXRpb25fc2V0dXAuY29sb3JQYWxldHRlUmV2ZXJzZUljb25DbGljaygpO1xuXG4gICAgfVxuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0aW9uX3NldHVwOyIsIi8qKiBcbiAqIFBhcnNpbmcgZnVuY3Rpb24gZm9yIGJ1YmJsZSBjaGFydHNcbiAqIEBtb2R1bGVcbiAqIEBwYXJhbSBpbnB1dCB7ZWxlbWVudH0gaW5wdXQganF1ZXJ5IHRhYmxlIGVsZW1lbnQgcmV0cmlldmVkIGZyb20gdGV4dGFyZWFcbiAqIEBwYXJhbSBjaGFydF90eXBlIHtzdHJpbmd9IHR5cGUgb2YgY2hhcnQgKGxpbmUsIGJhciBldGMuKVxuICogQHJldHVybnMge29iamVjdH0gT2JqZWN0IHdpdGggY2hhcnQgdGl0bGUsIFgtYXhpcyBjYXRlZ29yaWVzIGFuZCBzZXJpZXMgYXJyYXkgb2Ygb2JqZWN0c1xuICovXG52YXIgcGFyc2VGb3JCdWJibGUgPSBmdW5jdGlvbiAoaW5wdXQsIGNoYXJ0X3R5cGUpIHtcbiAgICB2YXIgb3V0cHV0ID0ge307XG4gICAgb3V0cHV0LnhfYXhpc19jYXRlZ29yaWVzID0gdW5kZWZpbmVkOyAvL3Jlc2V0cyB0aGlzIGluIGNhc2UgdGhlcmUgd2VyZSBwcmV2aW91cyBjYXRlZ29yaWVzXG5cbiAgICAvL2xvYWQgc2VyaWVzIG5hbWVzIGZyb20gcm93IGhlYWRzLCBhbmQgZGF0YSBmcm9tIHJvdyB0ZHNcbiAgICBvdXRwdXQuc2VyaWVzID0gW107XG4gICAgJChcInRib2R5IHRyXCIsIGlucHV0KS5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cbiAgICAgICAgdmFyIHRoaXNfcm93ID0gJCh0aGlzKTtcblxuICAgICAgICB2YXIgc2VyaWVzT2JqID0ge1xuICAgICAgICAgICAgbmFtZTogJC50cmltKCQoXCJ0aDplcSgwKVwiLCB0aGlzX3JvdykudGV4dCgpKSxcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgdHlwZTogY2hhcnRfdHlwZSxcbiAgICAgICAgICAgIGxpbmVXaWR0aDogMCxcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY29sb3JJbmRleDogaSxcbiAgICAgICAgICAgIF9zeW1ib2xJbmRleDogaVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vZ2V0IGRhdGEgdmFsdWVzIGZyb20gZWFjaCByb3cncyB0ZCBjZWxscyAoZXZlcnkgdGhpcmQgY2VsbCBmb3IgeHl6IGdyb3VwcylcbiAgICAgICAgJChcInRkOm50aC1jaGlsZCgzbiAtIDEpXCIsIHRoaXNfcm93KS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgeCA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKTtcbiAgICAgICAgICAgIHZhciB5ID0gTnVtYmVyKCQudHJpbSgkKHRoaXMpLm5leHQoKS50ZXh0KCkpKTtcbiAgICAgICAgICAgIHZhciB6ID0gTnVtYmVyKCQudHJpbSgkKHRoaXMpLm5leHQoKS5uZXh0KCkudGV4dCgpKSk7XG4gICAgICAgICAgICB2YXIgeHl6X2FyciA9IFt4LCB5LCB6XTtcbiAgICAgICAgICAgIHNlcmllc09iai5kYXRhLnB1c2goeHl6X2Fycik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG91dHB1dC5zZXJpZXMucHVzaChzZXJpZXNPYmopO1xuXG4gICAgfSk7XG5cblxuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlRm9yQnViYmxlOyIsIi8qKiBcbiAqIFBhcnNpbmcgZnVuY3Rpb24gZm9yIHNjYXR0ZXIgY2hhcnRzXG4gKiBAbW9kdWxlXG4gKiBAcGFyYW0gaW5wdXQge2VsZW1lbnR9IGlucHV0IGpxdWVyeSB0YWJsZSBlbGVtZW50IHJldHJpZXZlZCBmcm9tIHRleHRhcmVhXG4gKiBAcGFyYW0gY2hhcnRfdHlwZSB7c3RyaW5nfSB0eXBlIG9mIGNoYXJ0IChsaW5lLCBiYXIgZXRjLilcbiAqIEByZXR1cm5zIHtvYmplY3R9IE9iamVjdCB3aXRoIGNoYXJ0IHRpdGxlLCBYLWF4aXMgY2F0ZWdvcmllcyBhbmQgc2VyaWVzIGFycmF5IG9mIG9iamVjdHNcbiAqL1xudmFyIHBhcnNlRm9yU2NhdHRlciA9IGZ1bmN0aW9uIChpbnB1dCwgY2hhcnRfdHlwZSkge1xuICAgIHZhciBvdXRwdXQgPSB7fTtcbiAgICBvdXRwdXQueF9heGlzX2NhdGVnb3JpZXMgPSB1bmRlZmluZWQ7IC8vcmVzZXRzIHRoaXMgaW4gY2FzZSB0aGVyZSB3ZXJlIHByZXZpb3VzIGNhdGVnb3JpZXNcblxuICAgIC8vbG9hZCBzZXJpZXMgbmFtZXMgZnJvbSByb3cgaGVhZHMsIGFuZCBkYXRhIGZyb20gcm93IHRkc1xuICAgIG91dHB1dC5zZXJpZXMgPSBbXTtcbiAgICAkKFwidGJvZHkgdHJcIiwgaW5wdXQpLmVhY2goZnVuY3Rpb24gKGkpIHtcblxuICAgICAgICB2YXIgdGhpc19yb3cgPSAkKHRoaXMpO1xuXG4gICAgICAgIHZhciBzZXJpZXNPYmogPSB7XG4gICAgICAgICAgICBuYW1lOiAkLnRyaW0oJChcInRoOmVxKDApXCIsIHRoaXNfcm93KS50ZXh0KCkpLFxuICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICB0eXBlOiBjaGFydF90eXBlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAwLFxuICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jb2xvckluZGV4OiBpLFxuICAgICAgICAgICAgX3N5bWJvbEluZGV4OiBpXG4gICAgICAgIH07XG5cbiAgICAgICAgLy9nZXQgZGF0YSB2YWx1ZXMgZnJvbSBlYWNoIHJvdydzIHRkIGNlbGxzXG4gICAgICAgICQoXCJ0ZDpldmVuXCIsIHRoaXNfcm93KS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgeCA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKTtcbiAgICAgICAgICAgIHZhciB5ID0gTnVtYmVyKCQudHJpbSgkKHRoaXMpLm5leHQoKS50ZXh0KCkpKTtcbiAgICAgICAgICAgIHZhciB4eV9hcnIgPSBbeCwgeV07XG4gICAgICAgICAgICBzZXJpZXNPYmouZGF0YS5wdXNoKHh5X2Fycik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG91dHB1dC5zZXJpZXMucHVzaChzZXJpZXNPYmopO1xuXG4gICAgfSk7XG5cblxuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlRm9yU2NhdHRlcjsiLCIvKiogXG4qIFBhcnNpbmcgZnVuY3Rpb24gZm9yIHR5cGljYWwgY2hhcnQgdHlwZXMgKGxpbmUsIGJhciwgY29sdW1uKSBcbiogQG1vZHVsZVxuKiBAcGFyYW0gaW5wdXQge2VsZW1lbnR9IGlucHV0IGpxdWVyeSB0YWJsZSBlbGVtZW50IHJldHJpZXZlZCBmcm9tIHRleHRhcmVhXG4qIEBwYXJhbSBsb2FkX3Nlcmllc19mcm9tIHtzdHJpbmd9IGNvbHVtbl9oZWFkcyBvciBjb2x1bW5fcm93c1xuKiBAcGFyYW0gY2hhcnRfdHlwZSB7c3RyaW5nfSB0eXBlIG9mIGNoYXJ0IChsaW5lLCBiYXIgZXRjLilcbiogQHJldHVybnMge29iamVjdH0gT2JqZWN0IHdpdGggY2hhcnQgdGl0bGUsIFgtYXhpcyBjYXRlZ29yaWVzIGFuZCBzZXJpZXMgYXJyYXkgb2Ygb2JqZWN0c1xuKi9cblxuXG52YXIgcGFyc2VGb3JUeXBpY2FsQ2hhcnQgPSBmdW5jdGlvbiAoaW5wdXQsIGxvYWRfc2VyaWVzX2Zyb20sIGNoYXJ0X3R5cGUpIHtcbiAgICBcbiAgICB2YXIgdHlwZSA9IGNoYXJ0X3R5cGUucmVwbGFjZShcInN0YWNrZWRfXCIsXCJcIik7XG4gICAgXG4gICAgICAgIHZhciBvdXRwdXQgPSB7fTtcblxuICAgIC8qKiBJZiBsb2FkaW5nIHNlcmllcyBuYW1lcyBmcm9tIGNvbHVtbiBoZWFkcyBpcyBzZWxlY3RlZCovXG4gICAgaWYgKGxvYWRfc2VyaWVzX2Zyb20gPT09IFwiY29sdW1uX2hlYWRzXCIpIHtcbiAgICAgICAgLy9sb2FkIHgtYXhpcyBjYXRlZ29yaWVzIGZyb20gcm93IGhlYWRzXG4gICAgICAgIG91dHB1dC54X2F4aXNfY2F0ZWdvcmllcyA9IFtdO1xuICAgICAgICAkKFwidGJvZHkgdGhcIiwgaW5wdXQpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb3V0cHV0LnhfYXhpc19jYXRlZ29yaWVzLnB1c2goJC50cmltKCQodGhpcykudGV4dCgpKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vbG9hZCBzZXJpZXMgb2JqZWN0IG5hbWVzIGZyb20gY29sdW1uIGhlYWRzLCBhbmQgZGF0YSBmcm9tIGVhY2ggY29sdW1uIHRkc1xuICAgICAgICBvdXRwdXQuc2VyaWVzID0gW107XG5cbiAgICAgICAgJChcInRoZWFkIHRyOmxhc3QgdGg6Z3QoMClcIiwgaW5wdXQpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBzZXJpZXNPYmogPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJC50cmltKCQudHJpbSgkKHRoaXMpLnRleHQoKSkpLFxuICAgICAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgX2NvbG9ySW5kZXg6IGksXG4gICAgICAgICAgICAgICAgX3N5bWJvbEluZGV4OiBpLFxuICAgICAgICAgICAgICAgIHN0YWNraW5nOiBbXCJhcmVhXCIsIFwic3RhY2tlZF9iYXJcIiwgXCJzdGFja2VkX2NvbHVtblwiXS5pbmRleE9mKGNoYXJ0X3R5cGUpID4gLTEgPyBcInN0YWNrZWRcIiA6IG51bGxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vZGF0YSBmcm9tIGVhY2ggY29sdW1uJ3MgdGRzXG4gICAgICAgICAgICAkKFwidGJvZHkgdHJcIiwgaW5wdXQpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3JvdyA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgJChcInRkOmVxKFwiICsgaSArIFwiKVwiLCB0aGlzX3JvdykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllc09iai5kYXRhLnB1c2goJCh0aGlzKS5nZXROdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3V0cHV0LnNlcmllcy5wdXNoKHNlcmllc09iaik7XG5cbiAgICAgICAgfSk7XG5cblxuXG4gICAgICAgIC8qKiBFbHNlIGlmIGxvYWRpbmcgc2VyaWVzIG5hbWVzIGZyb20gcm93IGhlYWRzIGlzIHNlbGVjdGVkKi9cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vbG9hZCB4LWF4aXMgY2F0ZWdvcmllcyBmcm9tIGNvbHVtbiBoZWFkc1xuICAgICAgICBvdXRwdXQueF9heGlzX2NhdGVnb3JpZXMgPSBbXTtcbiAgICAgICAgJChcInRoZWFkIHRoOmd0KDApXCIsIGlucHV0KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG91dHB1dC54X2F4aXNfY2F0ZWdvcmllcy5wdXNoKCQudHJpbSgkKHRoaXMpLnRleHQoKSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2xvYWQgc2VyaWVzIG9iamVjdCBuYW1lcyBmcm9tIHJvdyBoZWFkcywgYW5kIGRhdGEgZnJvbSByb3cgdGRzXG4gICAgICAgIG91dHB1dC5zZXJpZXMgPSBbXTtcbiAgICAgICAgJChcInRib2R5IHRyXCIsIGlucHV0KS5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cbiAgICAgICAgICAgIHZhciB0aGlzX3JvdyA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHZhciBzZXJpZXNPYmogPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJC50cmltKCQoXCJ0aDplcSgwKVwiLCB0aGlzX3JvdykudGV4dCgpKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICBfY29sb3JJbmRleDogaSxcbiAgICAgICAgICAgICAgICBfc3ltYm9sSW5kZXg6IGksXG4gICAgICAgICAgICAgICAgc3RhY2tpbmc6IFtcImFyZWFcIiwgXCJzdGFja2VkX2JhclwiLCBcInN0YWNrZWRfY29sdW1uXCJdLmluZGV4T2YoY2hhcnRfdHlwZSkgPiAtMSA/IFwic3RhY2tlZFwiIDogbnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy9nZXQgZGF0YSB2YWx1ZXMgZnJvbSBlYWNoIHJvdydzIHRkIGNlbGxzXG4gICAgICAgICAgICAkKFwidGRcIiwgdGhpc19yb3cpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlcmllc09iai5kYXRhLnB1c2goJCh0aGlzKS5nZXROdW1iZXIoKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3V0cHV0LnNlcmllcy5wdXNoKHNlcmllc09iaik7XG5cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBvdXRwdXQ7XG5cbn07IFxuXG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VGb3JUeXBpY2FsQ2hhcnQ7IiwiLyogdGFrZXMgdGhlIHRhYmxlIGh0bWwgZnJvbSBhIGdpdmVuIHRleHRhcmVhIGFuZCBwYXJzZXMgaXQgaW50byBhbiBvYmplY3QsIGRlcGVuZGluZyBvbiB1c2Vlci1zZWxlY3RlZCBpbnB1dHMgKi9cblxuLyogcGFyc2luZyBmdW5jdGlvbiBmb3IgdHlwaWNhbCBjaGFydCB0eXBlcyAobGluZSwgYmFyLCBjb2x1bW4pICovXG52YXIgcGFyc2VGb3JUeXBpY2FsQ2hhcnQgPSByZXF1aXJlKFwiLi9wYXJzZV9mb3JfdHlwaWNhbF9jaGFydC5qc1wiKTtcblxuLyogcGFyc2luZyBmdW5jdGlvbiBmb3Igc2NhdHRlciBjaGFydHMgKi9cbnZhciBwYXJzZUZvclNjYXR0ZXIgPSByZXF1aXJlKFwiLi9wYXJzZV9mb3Jfc2NhdHRlci5qc1wiKTtcblxuLyogcGFyc2luZyBmdW5jdGlvbiBmb3IgYnViYmxlIGNoYXJ0cyAqL1xudmFyIHBhcnNlRm9yQnViYmxlID0gcmVxdWlyZShcIi4vcGFyc2VfZm9yX2J1YmJsZS5qc1wiKTtcblxuXG5cbi8qKiBwYXJzaW5nIGZ1bmN0aW9uIGZvciBkcmlsbGRvd24gY2hhcnRzICovXG52YXIgcGFyc2VGb3JEcmlsbGRvd24gPSBmdW5jdGlvbiAoaW5wdXQpIHt9O1xuXG5cbi8qKiBwYXJzaW5nIGZ1bmN0aW9uIGZvciBtYXAgY2hhcnRzICovXG52YXIgcGFyc2VGb3JNYXAgPSBmdW5jdGlvbiAoaW5wdXQpIHt9O1xuXG5cblxuLyoqIFxuKiBGdW5jdGlvbiB0aGF0IGRlY2lkZXMgd2hpY2ggcGFyc2UgZnVuY3Rpb24gdG8gcnVuLCBkZXBlbmRpbmcgb24gY2hhcnQgdHlwZVxuKiBAbW9kdWxlXG4qIEBwYXJhbSBpbnB1dCB7ZWxlbWVudH0gaW5wdXQganF1ZXJ5IHRhYmxlIGVsZW1lbnQgcmV0cmlldmVkIGZyb20gdGV4dGFyZWFcbiogQHBhcmFtIGxvYWRfc2VyaWVzX2Zyb20ge3N0cmluZ30gY29sdW1uX2hlYWRzIG9yIGNvbHVtbl9yb3dzXG4qIEBwYXJhbSBjaGFydF90eXBlIHtzdHJpbmd9IHR5cGUgb2YgY2hhcnQgKGxpbmUsIGJhciBldGMuKVxuKiBAcmV0dXJucyB7b2JqZWN0fSBPYmplY3Qgd2l0aCBjaGFydCB0aXRsZSwgWC1heGlzIGNhdGVnb3JpZXMgYW5kIHNlcmllcyBhcnJheSBvZiBvYmplY3RzXG4qL1xuXG52YXIgcGFyc2VUYWJsZUlucHV0ID0gZnVuY3Rpb24gKGlucHV0LCBsb2FkX3Nlcmllc19mcm9tLCBjaGFydF90eXBlKSB7XG5cbiAgICB2YXIgb3V0cHV0O1xuICAgIC8qKiBEZXBlbmRpbmcgb24gdGhlIGNoYXJ0IHR5cGUsIHN0YXJ0IHRoYXQgcGFyc2luZyAqL1xuICAgIGlmIChbXCJhcmVhXCIsIFwibGluZVwiLCBcImJhclwiLFwic3RhY2tlZF9iYXJcIiwgXCJjb2x1bW5cIiwgXCJzdGFja2VkX2NvbHVtblwiXS5pbmRleE9mKGNoYXJ0X3R5cGUpID4gLTEpIHtcbiAgICAgICAgb3V0cHV0ID0gcGFyc2VGb3JUeXBpY2FsQ2hhcnQoaW5wdXQsIGxvYWRfc2VyaWVzX2Zyb20sIGNoYXJ0X3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoY2hhcnRfdHlwZSA9PSBcImJ1YmJsZVwiKSB7XG4gICAgICAgIG91dHB1dCA9IHBhcnNlRm9yQnViYmxlKGlucHV0LCBjaGFydF90eXBlKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJ0X3R5cGUgPT0gXCJzY2F0dGVyXCIpIHtcbiAgICAgICAgb3V0cHV0ID0gcGFyc2VGb3JTY2F0dGVyKGlucHV0LCBjaGFydF90eXBlKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJ0X3R5cGUgPT0gXCJkcmlsbGRvd25cIikge1xuICAgICAgICBvdXRwdXQgPSBwYXJzZUZvckRyaWxsZG93bihpbnB1dCwgY2hhcnRfdHlwZSk7XG4gICAgfSBlbHNlIGlmIChjaGFydF90eXBlID09IFwibWFwXCIpIHtcbiAgICAgICAgb3V0cHV0ID0gcGFyc2VGb3JNYXAoaW5wdXQpO1xuICAgIH1cblxuICAgIC8vYWRkIGNoYXJ0IHRpdGxlIChzYW1lIGZvciBhbGwgdHlwZXMgb2YgY2hhcnRzKVxuICAgIG91dHB1dC50aXRsZV90ZXh0ID0gJChcImNhcHRpb25cIiwgaW5wdXQpLnRleHQoKTtcbiAgICBcbiAgICByZXR1cm4gb3V0cHV0O1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlVGFibGVJbnB1dDsiLCIvKiogXG4qIGN1c3RvbSBqUXVlcnkgZXh0ZW5zaW9uc1xuKiBAbW9kdWxlXG4qL1xudmFyIGpxX2V4dGVuc2lvbnMgPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgalF1ZXJ5LmZuLmV4dGVuZCh7XG5cbiAgICAgICAgLyoqIGV4dGVuZCBzbyB0aGF0IHdlIGNhbiBnZXQgYW5kIHNldCBcInZhbHVlXCIgd2l0aCBkaXZzICovXG4gICAgICAgIGRpdlZhbDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5hdHRyKFwidmFsdWVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cihcInZhbHVlXCIsIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICAvKiogcHV0cyBjb21tYXMgaW4gYSBudW1iZXIgKi9cbiAgICAgICAgYWRkQ29tbWFzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gdGhpc1swXTtcbiAgICAgICAgICAgIGlmIChpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHZhbCA+IDk5OSkgfHwgKHZhbCA8IC05OTkpKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKC8oXFxkKykoXFxkezN9KS8udGVzdCh2YWwudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsLnRvU3RyaW5nKCkucmVwbGFjZSgvKFxcZCspKFxcZHszfSkvLCAnJDEnICsgJywnICsgJyQyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKiB0YWtlcyBhbiBlbGVtZW50J3MgdGV4dCBzdHJpbmcgYW5kIHJldHVybnMgYSBudW1iZXIsIHRyaW1taW5nIHNwYWNlcyBhbmQgcmVtb3Zpbmcgbm9uLW51bWJlcnMgKGdvb2QgZm9yIG51bWJlcnMgd2l0aCBjb21tYXMgZXRjLikqL1xuICAgICAgICBnZXROdW1iZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgdmFsID0gTnVtYmVyKCQudHJpbSgkKHRoaXMpLnRleHQoKS5yZXBsYWNlKC9bXjAtOVxcLlxcLV0rL2csICcnKSkpO1xuICAgICAgICAgICAgcmV0dXJuIGlzTmFOKHZhbCkgPyBudWxsIDogdmFsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0pO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpxX2V4dGVuc2lvbnM7IiwiLyoqXG4gKiBGb3JtcyB1dGlsaXR5IG9iamVjdCwgY29udGFpbnMgZnVuY3Rpb25zIHRoYXQgd29yayB3aXRoIGZvcm0gZWxlbWVudHNcbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHV0aWxzX2Zvcm1zID0ge1xuICAgIFxuICAgIFxuICAgIC8qKiByZXR1cm5zIHRydWUgaWYgY2hlY2tib3ggaXMgY2hlY2tlZCwgZmFsc2UgaWYgbm90IFxuICAgIEBwYXJhbSBlbGVtIHtlbGVtZW50fSBjaGVja2JveCBlbGVtZW50XG4gICAgQHJldHVybnMge2Jvb2x9XG4gICAgKi9cbiAgICBnZXRDaGVja0JveFZhbHVlOiBmdW5jdGlvbiBnZXRDaGVja0JveFZhbHVlKGVsZW0pe1xuICAgICAgICByZXR1cm4gZWxlbS5pcygnOmNoZWNrZWQnKTtcbiAgICB9LFxuXG4gICAgLyoqIGdldHMgYW4gYXJyYXkgb2YgdmFsdWVzIGZyb20gYSBnaXZlbiBjbGFzcyBcbiAgICBAcGFyYW0gY2xhc3NfbmFtZSB7c3RyaW5nfVxuICAgIEByZXR1cm5zIHthcnJheX1cbiAgICAqL1xuICAgIGdldENsYXNzVmFsdWVzQXJyYXk6IGZ1bmN0aW9uIChjbGFzc19uYW1lKSB7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgJChcIi5cIiArIGNsYXNzX25hbWUpLmVhY2goXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goTnVtYmVyKCQodGhpcykudmFsKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1dGlsc19mb3JtczsiLCIvKipcbiAqIE1haW4gdXRpbGl0eSBvYmplY3QsIGNvbnRhaW5zIGZ1bmN0aW9ucyB0aGF0IGdldCByZXVzZWQgb2Z0ZW5cbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHV0aWxzX21haW4gPSB7XG5cbiAgICAvKiogY2hlY2sgdmFsdWUgLSBpZiAwIG9yIG5vdCBhIG51bWJlciwgcmV0dXJuIHVuZGVmaW5lZCAqKi9cbiAgICBjaGVja2ZvclVuZGVmaW5lZDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gdmFsID09PSAwIHx8IGlzTmFOKHZhbCkgPyB1bmRlZmluZWQgOiB2YWw7XG4gICAgfSxcblxuICAgIC8qKiBcbiAgICB0dXJucyBvYmplY3RzIGludG8gc3RyaW5ncywgaW5jbHVkaW5nIHRoZWlyIG1ldGhvZHMgXG4gICAgQHJldHVybnMge3N0cmluZ30gSlNPTlxuICAgICovXG4gICAgZGVlcFN0cmluZ2lmeTogZnVuY3Rpb24gZGVlcFN0cmluZ2lmeShvYmopIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5yZXBsYWNlKC9cXFxcbi9nLCBcIlwiKTtcblxuICAgIH0sXG5cbiAgICAvKiogc3RyaW5naWZ5IHRvb2x0aXAgZm9ybWF0dGVyIGZ1bmN0aW9uICoqL1xuICAgIHN0cmluZ2lmeUZvcm1hdHRlcjogZnVuY3Rpb24gKG5ld190b29sdGlwLCBkZWNpbWFscywgbXVsdGlwbGllciwgc2lnbnNfYXJyKSB7XG4gICAgICAgIHJldHVybiBuZXdfdG9vbHRpcC50b1N0cmluZygpXG4gICAgICAgICAgICAucmVwbGFjZSgvbXVsdGlwbGllci9nLCBtdWx0aXBsaWVyKVxuICAgICAgICAgICAgLnJlcGxhY2UoL2RlY2ltYWxzL2csIGRlY2ltYWxzKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3NpZ25zX2FyclxcWzBcXF0vZywgJ1wiJyArIHNpZ25zX2FyclswXSArICdcIicpXG4gICAgICAgICAgICAucmVwbGFjZSgvc2lnbnNfYXJyXFxbMVxcXS9nLCAnXCInICsgc2lnbnNfYXJyWzFdICsgJ1wiJyk7XG5cbiAgICB9LFxuXG5cbiAgICAvKiogcGxhY2UgY29kZSBpbiBjaGFydF9vdXRwdXRfY29kZSBhbmQgcmVpbml0IGhpZ2hsaWdodCAqL1xuICAgIHdyaXRlQ29kZTogZnVuY3Rpb24gd3JpdGVDb2RlKGFsbF9jaGFydF9vcHRpb25zKSB7XG5cblxuICAgICAgICB2YXIgY2hhcnRfb3B0aW9uc19qc19zdHJpbmcgPSB1dGlsc19tYWluLmRlZXBTdHJpbmdpZnkoYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgICAgICAkKFwiI2NoYXJ0X291dHB1dF9jb2RlXCIpLnRleHQoY2hhcnRfb3B0aW9uc19qc19zdHJpbmcpLmVhY2goZnVuY3Rpb24gKGksIGJsb2NrKSB7XG4gICAgICAgICAgICBobGpzLmhpZ2hsaWdodEJsb2NrKGJsb2NrKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXRpbHNfbWFpbjsiXX0=
