(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** main app file, starts everything off **/
'use strict';

$(function () {

    //utils
    var jq_extensions = require("./utils/jq_extensions.js");
    var utils_main = require("./utils/utils_main");

    //load test table into table_input_textarea

    $.get("./dev/test_tables/test_table.htm", function (table) {
        $("#table_input_textarea").val(table);
        //check if app was opened from the chart wizard (imediately invoked function)
        var loadFromTableWizard = require("./utils/load_from_table_wizard");

        //initial empty all map options

        var all_map_options = {};
        var chart_type = $("#chart_type_icons .selected").divVal();

        //initial all chart options init
        var allChartOptionsInit = require("./initializers/charts/all_chart_options_init.js");
        var all_chart_options = allChartOptionsInit(chart_type);

        //draw chart
        var draw_chart = require("./draw_chart.js");
        var chart = draw_chart.init(all_chart_options, draw_chart.chartCallback);

        //page init (navigation and keyboard entries)
        var navigation_setup = require("./navigation_setup.js");
        navigation_setup.firstNavInit();

        //all form updates - when updates are made, update the chart. this also calls some nav and keyboard input inits
        var allFormUpdates = require("./form_updates/all_form_updates.js");
        allFormUpdates(chart, all_chart_options, all_map_options);

        //diplay only options related to chart type
        allFormUpdates.displayOptions(chart_type);

        //click selected map icon to make sure everything in the map loads correctly
        if (chart_type === "map") {
            $("#chart_type_map").click();
        }
    });

    //set app version (better through JS than statically to make sure JS is new)
    $("#app_version").text("v2.6.8");
});

},{"./draw_chart.js":14,"./form_updates/all_form_updates.js":15,"./initializers/charts/all_chart_options_init.js":29,"./navigation_setup.js":54,"./utils/jq_extensions.js":68,"./utils/load_from_table_wizard":69,"./utils/utils_main":71}],2:[function(require,module,exports){
"use strict";

/** 
* All Chart options constructor. Combines all other options into main options object. Info at http://api.highcharts.com/highcharts 
@constructor AllChartOptions
@param o {object} chart options object
*/
var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart;
    this.colors = o.colors;
    this.legend = o.legend;
    this.plotOptions = o.plotOptions;
    this.series = o.series;
    this.drilldown = o.drilldown;
    this.subtitle = o.subtitle;
    this.title = o.title;
    this.tooltip = o.tooltip;
    this.xAxis = o.xAxis;
    this.yAxis = o.yAxis;
    this.credits = o.credits;
    this.exporting = o.exporting;
};

module.exports = AllChartOptions;

},{}],3:[function(require,module,exports){
'use strict';

/** Chart options constructor. Info at http://api.highcharts.com/highcharts#chart
* @constructor ChartOptions 
*  @param o {object} chart options object
*/
var ChartOptions = function ChartOptions(o) {

    this.renderTo = o.renderTo || "chart_display_area";
    this.margin = [o.margin[0] || 90, o.margin[1] || 40, o.margin[2] || 80, o.margin[3] || 75]; //[top,right,bottom,left]
    this.borderWidth = o.borderWidth || 0;
    this.plotBorderColor = o.plotBorderColor || '#000';
    this.plotBorderWidth = o.plotBorderWidth || 0;
    this.type = o.type || 'line';
    this.events = o.events;
    this.zoomType = 'xy';
    this.alignTicks = o.alignTicks || false;
    this.ignoreHiddenSeries = o.ignoreHiddenSeries || true; //false for bubble charts so bubbles won't resize
    this.inverted = o.inverted;
};

module.exports = ChartOptions;

},{}],4:[function(require,module,exports){
"use strict";

/** Credits options constructor. Info at http://api.highcharts.com/highcharts#credits
 * @constructor Credits 
 *  @param o {object} credits options object
 */
var Credits = function Credits(o) {

    this.href = "/";

    this.position = {
        align: 'left',
        x: 10,
        y: o.position ? o.position.y || -20 : -20
    };

    this.style = {
        cursor: "default",
        color: "#2C2C2C"
    };

    this.target = "_blank";
    this.text = o.text || "";
    this.useHTML = true;
};

module.exports = Credits;

},{}],5:[function(require,module,exports){
'use strict';

/** Exporting options constructor. Info at http://api.highcharts.com/highcharts#exporting
* @constructor Exporting 
* @param o {object} exporting options object
*/
var Exporting = function Exporting(o) {
    this.sourceWidth = 640;
    this.scale = 1;

    this.buttons = {
        contextButton: {
            enabled: true,
            verticalAlign: 'bottom',
            x: -10
        }
    };
};

module.exports = Exporting;

},{}],6:[function(require,module,exports){
'use strict';

/** Legend options constructor. Info at http://api.highcharts.com/highcharts#legend 
 * @constructor Legend 
 * @param o {object} legend options object
 */
var Legend = function Legend(o) {

    this.align = o.align || 'left';
    this.alignColumns = o.alignColumns || false;
    this.backgroundColor = o.backgroundColor || 'none';
    this.borderColor = o.borderColor || 'none';
    this.borderWidth = o.borderWidth || 0;
    this.enabled = o.enabled || true;
    this.floating = o.floating || true;
    this.itemDistance = o.itemDistance || 30;
    this.itemWidth = o.itemWidth;
    this.layout = o.layout || 'horizontal';
    this.reversed = o.reversed || false;
    this.shadow = o.shadow || false;
    this.symbolRadius = 0;
    this.title = {};
    this.useHTML = o.useHTML || false;
    this.verticalAlign = o.verticalAlign || 'top';
    this.width = o.width || 540;
    this.x = o.x || 0;
    this.y = o.y || 30;

    this.itemStyle = {
        fontFamily: 'Calibri, Arial, Helvetica, sans-serif',
        color: '#000',
        cursor: o.itemStyle.cursor
    };
    this.itemHiddenStyle = {
        color: 'gray'
    };
    this.itemHoverStyle = {
        cursor: o.itemHoverStyle.cursor
    };
};

module.exports = Legend;

},{}],7:[function(require,module,exports){
"use strict";

/** PlotOptions constructor. Info at http://api.highcharts.com/highcharts#plotOptions
 * @constructor PlotOptions 
 * @param o {object} PlotOptions options object
 */
var PlotOptions = function PlotOptions(o) {

    //for all chart types. values are undefined if not in o.
    this.series = {
        events: {
            legendItemClick: o.series.events.legendItemClick
        },
        dataLabels: {
            enabled: o.series.dataLabels.enabled || false,
            allowOverlap: o.series.dataLabels.allowOverlap || false,
            padding: 0,
            verticalAlign: "bottom",
            style: {
                "textShadow": "none",
                "color": "#000"
            }
        },
        pointPlacement: o.series.pointPlacement,
        stacking: o.series.stacking,
        pointPadding: o.series.pointPadding,
        groupPadding: o.series.groupPadding,
        minPointLength: o.series.minPointLength,
        //  maxSize: o.series.maxSize,
        minSize: o.series.minSize,
        sizeBy: o.series.sizeBy,
        lineWidth: o.series.lineWidth,
        states: o.series.states,
        marker: o.series.marker

    };

    this.bubble = {
        tooltip: {
            followPointer: true
        }
    };

    this.line = {};

    this.boxplot = {
        fillColor: '#F0F0E0'
    };

    this.pie = {
        showInLegend: true,
        size: "130%"
    };
};

module.exports = PlotOptions;

},{}],8:[function(require,module,exports){
"use strict";

/** series (an array of objs) options constructor. Info at http://api.highcharts.com/highcharts#series 
* @constructor Series 
* @param o {object} Series options object
*/
var Series = function Series(o) {

    this.series = o || [{}];
};

module.exports = Series;

},{}],9:[function(require,module,exports){
"use strict";

/** subtitle options constructor. Info at http://api.highcharts.com/highcharts#subtitle
* @constructor Subtitle 
* @param o {object} Subtitle options object
*/
var Subtitle = function Subtitle(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'arial',
        fontWeight: 'normal',
        fontSize: '12px'
    };
};

module.exports = Subtitle;

},{}],10:[function(require,module,exports){
"use strict";

/** Title options constructor. Info at http://api.highcharts.com/highcharts#title
* @constructor Title 
* @param o {object} Title options object
*/
var Title = function Title(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'arial',
        fontWeight: 'bold',
        fontSize: '14px'
    };
};

module.exports = Title;

},{}],11:[function(require,module,exports){
'use strict';

/** Tooltip options constructor. Info at http://api.highcharts.com/highcharts#tooltip
 * @constructor Tooltip 
 * @param o {object} Tooltip options object
 */

var Tooltip = function Tooltip(o) {
    this.backgroundColor = '#FEFFEF';
    this.crosshairs = o.crosshairs || [false, false];
    this.formatter = o.formatter;

    this.style = {
        color: '#000000',
        fontFamily: 'Calibri, Arial, Helvetica, sans-serif'
    };

    this.useHTML = false;
};

module.exports = Tooltip;

},{}],12:[function(require,module,exports){
'use strict';

/** xAxis options constructor. Info at http://api.highcharts.com/highcharts#xAxis
 * @constructor XAxis 
 * @param o {object} XAxis options object
 */
var XAxis = function XAxis(o) {
    this.categories = o.categories;
    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 0;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter || undefined : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        useHTML: false,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px',
            textOverflow: 'none'
        }

    };

    this.lineWidth = o.lineWidth || 1.2;
    this.lineColor = o.lineColor || 'gray';
    this.max = o.max || null;
    this.min = o.min || null;
    this.plotBands = o.plotBands || [];
    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 0
    }];

    this.startOnTick = o.startOnTick;
    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';

    this.title = {
        align: o.title.align,
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : '',
        rotation: 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        },
        x: o.title.x
    };

    this.type = o.type;
};

module.exports = XAxis;

},{}],13:[function(require,module,exports){
'use strict';

/** yAxis options constructor. Info at http://api.highcharts.com/highcharts#yAxis
* @constructor yAxis 
* @param o {object} yAxis options object
*/

var yAxis = function yAxis(o) {

    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 1;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {

        //   format: o.labels ? o.labels.format : {value},
        formatter: o.labels ? o.labels.formatter : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineColor = o.lineColor || 'gray';
    this.lineWidth = o.lineWidth || 1;
    this.max = o.max || null;
    this.min = o.min || null;
    this.opposite = o.opposite || false;
    this.plotBands = o.plotBands || [];

    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 1
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';
    this.tickWidth = o.tickWidth || 1;

    this.title = {
        useHTML: false,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : 6,
        align: o.title ? o.title.align || 'middle' : 'middle',
        offset: 20,
        rotation: 0,
        x: o.title ? o.title.x || 35 : 35,
        y: o.title ? o.title.y || -15 : -15,

        style: {
            color: '#000000',
            fontFamily: 'Calibri, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            fontSize: '13px'
        }
    };

    this.type = o.type || 'linear';
};

module.exports = yAxis;

},{}],14:[function(require,module,exports){
"use strict";

/** takes all_chart_options and prints a chart to the screen 
@namespace
*/

var draw_chart = {

    chartCallback: function chartCallback(all_chart_options) {

        if (all_chart_options.timeline) {
            //call animation if applicable
            all_chart_options.timeline.animation();
        }

        $(".highcharts-legend-item").css("min-height", "0px").css("z-index", 100); //fix so CMS CSS doesn't make legend taller than it should
        $(".highcharts-tooltip").css("z-index", 200);

        /**
         * Highcharts plugin for setting a lower opacity for other series than the one that is hovered
         * in the legend
         */
        (function (Highcharts) {
            var each = Highcharts.each;

            Highcharts.wrap(Highcharts.Legend.prototype, 'renderItem', function (proceed, item) {

                proceed.call(this, item);

                var isPoint = !!item.series,
                    collection = isPoint ? item.series.points : this.chart.series,
                    groups = isPoint ? ['graphic'] : ['group', 'markerGroup'],
                    element = (this.options.useHTML ? item.legendItem : item.legendGroup).element;

                element.onmouseover = function () {
                    each(collection, function (seriesItem) {
                        if (seriesItem !== item) {
                            each(groups, function (group) {
                                seriesItem[group].animate({
                                    opacity: 0.25
                                }, {
                                    duration: 150
                                });
                            });
                        }
                    });
                };
                element.onmouseout = function () {
                    each(collection, function (seriesItem) {
                        if (seriesItem !== item) {
                            each(groups, function (group) {
                                seriesItem[group].animate({
                                    opacity: 1
                                }, {
                                    duration: 50
                                });
                            });
                        }
                    });
                };
            });

            Highcharts.wrap(Highcharts.Chart.prototype, 'showCredits', function (proceed, credits) {
                proceed.call(this, credits);

                if (this.credits && credits.target) {
                    this.credits.on('click', function () {
                        $('<a>').attr({
                            href: credits.href,
                            target: credits.target
                        })[0].click();
                    });
                }
            });
        })(Highcharts); //end gray other series plugin
    },

    /** initialize function **/
    init: function init(all_chart_options, chartCallback) {

        $(".chart_display_area").attr("id", all_chart_options.chart.renderTo); //change ID of chart area to make sure it matches the renderTo value

        //set highcharts globals default
        Highcharts.setOptions({
            lang: {
                thousandsSep: ','
            }
        });

        var chart = new Highcharts.Chart(all_chart_options, draw_chart.chartCallback(all_chart_options));

        //add individual point styles after the fact (not supported with API)

        return chart;
    }

};

module.exports = draw_chart;

},{}],15:[function(require,module,exports){
"use strict";

var calculate_recession_dates = require("../utils/calculate_recession_dates.js");
var navigation_setup = require("../navigation_setup.js");
var update_template = require("./update_template.js");
var updateChartType = require("./update_chart_type.js");
var updateColors = require("./update_colors.js");
var utils_forms = require("../utils/utils_forms.js");
var utils_main = require("../utils/utils_main.js");
var update_legend = require("./update_legend.js");
var update_x_axis = require("./update_x_axis.js");
var update_y_axis = require("./update_y_axis.js");
var update_tooltip = require("./update_tooltip.js");
var update_data = require("./update_data.js");
var update_credits = require("./update_credits.js");
var update_chart_options = require("./update_chart_options.js");
var chart_recall = require("../utils/chart_recall.js");
var update_individual_series = require("./update_individual_series.js");
var update_map_palettes = require("./update_map_palettes.js");

var map_init = require("../initializers/maps/map_init.js");
var map_colors_init = require("../initializers/maps/map_colors_init.js");

/** listens for any form updates and calls appropriate function 
@module
*/
var allFormUpdates = function allFormUpdates(chart, all_chart_options, all_map_options) {

    /* CHART TYPE CHANGES */

    /** highlights the icon clicked by adding 'selected' class **/
    allFormUpdates.selectChart = function (selected) {
        //change selected icon
        $("#chart_type_icons .chart_type_icon").removeClass("selected");
        $(selected).addClass("selected");

        //change small icon in setup options menu
        var new_img_url = $(selected).css("background-image");
        var y_pos = new_img_url.match("map") ? "-1px" : "1px";

        $("#side_nav_tab_icon_chart_type").css({
            "background-image": new_img_url,
            "background-position-y": y_pos
        });
    };

    /** shows and hides elements depending on what chart type is selected **/
    allFormUpdates.displayOptions = function (chart_type) {

        //reset alert message to nothing
        $(".alert-danger").text("");

        $(".chart_tab, .display_options>*").not(".notes").show(); //start showing all, and might hide later if map selected

        //hide stuff unrelated to that chart type (line, bar, column)
        if (["area", "line", "bar", "column", "stacked_column", "stacked_bar"].indexOf(chart_type) > -1) {
            //if one of these
            $(".show_line, .show_bar, .show_column").show();
        } else {
            $(".show_line, .show_bar, .show_column").hide();
        }

        //hide all classes with just_ ...
        $(".just_drilldown, .just_scatter, .just_bubble, .just_column, .just_bar, .just_arearange, .just_columnrange, .just_map, .just_line, .just_boxplot, .just_pie").hide();

        //show just_...
        if (["scatter", "drilldown", "bubble", "bar", "column", "line", "stacked_column", "stacked_bar", "pie", "arearange", "columnrange", "boxplot"].indexOf(chart_type) > -1) {
            $(".just_" + chart_type.replace("stacked_", "")).show();
            $(".show_" + chart_type.replace("stacked_", "")).show();
        }

        //if drilldown, hide unrelated
        if (chart_type === "drilldown") {
            $("#tab_series_options").hide();
            if ($("#drilldown_type_select").val() === "bubble") {
                $("#display_chart_tooltip .just_bubble").show();
            }
        } else {
            $("#tab_series_options").show();
        }
    };

    /* when chart type icon is clicked and changed */

    $('.chart_type_icon').unbind().click(function () {

        var clicked_icon = this;

        $("#chart_loading_icon").removeClass("invisible");
        setTimeout(function () {
            allFormUpdates.selectChart(clicked_icon);
            var chart_type = $(clicked_icon).divVal();
            allFormUpdates.displayOptions(chart_type);

            updateChartType(chart_type, chart, all_chart_options);

            if (chart_type === "map") {
                //if map
                $(".chart_display_area").hide();
                $(".map_display_area").show();

                $(".chart_tab").not(".map_tab").hide();
                $(".display_options:gt(0)>*").not(".notes").not(".show_map").hide(); //hide everything except map relevent options
                $(".just_map").show();

                //update credits input box with custom text
                update_credits.updateTextAreaBox(all_chart_options);

                if (utils_forms.getCheckBoxValue($("#map_color_by_names_checkbox"))) {
                    //color by name
                    map_colors_init.loadMapColorPalettes(11);
                } else {
                    map_colors_init.loadMapColorPalettes(4); //loads color palettes then loads new map
                }
            } else {
                    //if not map
                    $(".map_display_area").hide();
                    $(".chart_display_area").show();
                    chart.reflow(); //fits chart to size
                    navigation_setup.chartClicks();
                    //update tickmark interval (recalculates if not set)
                    var new_x_interval = $("#chart_x_axis_tickmark_interval_input").val();

                    update_x_axis.updateTickmarkInterval(new_x_interval, chart, all_chart_options, all_chart_options.xAxis.categories, all_chart_options.chart.type);
                }

            $("#chart_loading_icon").addClass("invisible");
        }, 10);
    });

    /* when drilldown type dropdown is changed */

    $("#drilldown_type_select").unbind().change(function () {

        //show bubble tooltip options if selected
        if ($(this).val() === "bubble") {
            $("#display_chart_tooltip .just_bubble").show();
        } else {
            $(".just_bubble").hide();
        }

        updateChartType("drilldown", chart, all_chart_options);
    });

    /* when animated bubble checkbox is clicked */

    $("#bubble_animated_checkbox").unbind().change(function () {
        $(".chart_animation_div").remove();
        //  updateChartType("bubble", chart, all_chart_options);
        all_chart_options.timeline = null;
        update_data.updateData(chart, all_chart_options);
    });

    /* TEMPLATE CHANGES */

    //chart ID
    $("#chart_id_textinput").unbind().keyup(function () {
        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap(chart, all_chart_options, all_map_options, false); // true to repopulate form
        } else {
                update_template.changeID($(this).val(), all_chart_options);
            }
    });

    //chart width
    $("#chart_width_textinput").unbind().keyup(function () {
        update_template.resize($(this).val(), "width", chart, all_chart_options);
    });

    //chart height
    $("#chart_height_textinput").unbind().keyup(function () {
        update_template.resize($(this).val(), "height", chart, all_chart_options);
    });

    //inner chart margins
    $(".margin_input").unbind().keyup(function () {
        var margins_arr = utils_forms.getClassValuesArray("margin_input");
        update_template.margin(margins_arr, chart, all_chart_options);
    });

    /* CHART DATA CHANGES - (x-axis categories and series array) */

    //"series names loaded from" icon clicked
    $("#table_input_load_series_from_icons .load_series_from_icon").unbind().click(function () {

        var clicked_icon = this;

        $("#chart_loading_icon").removeClass("invisible"); //show loading icon

        setTimeout(function () {
            //wraping in a setTimeout keeps the loading icon up for the duration
            //change selected icon
            $("#table_input_load_series_from_icons .selected").removeClass("selected");
            $(clicked_icon).addClass("selected");

            update_data.updateData(chart, all_chart_options);
            update_individual_series.populateForm(chart, all_chart_options);

            //update tickmark interval (recalculates if not set)
            var new_x_interval = $("#chart_x_axis_tickmark_interval_input").val();
            update_x_axis.updateTickmarkInterval(new_x_interval, chart, all_chart_options, all_chart_options.xAxis.categories, all_chart_options.chart.type);

            $("#chart_loading_icon").addClass("invisible"); //show loading icon
        }, 10);
    });

    //table input textarea
    $("#table_input_textarea").unbind().bind('blur paste', function () {

        $("#chart_type_icons .selected").click();
    });

    //example table select menu
    $("#example_table_select").unbind().change(function () {

        var new_table_file = "./dev/test_tables/" + $(this).val() + ".htm";

        $.get(new_table_file, function (table) {
            $("#table_input_textarea").val(table);
            $("#chart_type_icons .selected").click();
        });
    });

    /* COLOR PALETTE CHANGES - defined and initiated in navigation setup*/

    //chart color palettes
    allFormUpdates.colorPaletteRowClick = function () {

        $(".color_palette_row").unbind().click(function () {
            var chart_type = $("#chart_type_icons .selected").divVal(); //need chart type because drill is colored differently
            $(".color_palette_row").removeClass("selected");
            $(this).addClass("selected");
            updateColors(chart, all_chart_options, chart_type);
        });

        //map color palettes
        $(".map_color_palette_row").unbind().click(function () {

            $(".map_color_palette_row").removeClass("selected");
            var color_palette = $(this);
            color_palette.addClass("selected");
            $("#display_series_options_inner_div").empty(); //emptys the individual choices area so colors are redone.
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        });
    };

    // when page loads, load the chart palettes

    if ($("#color_palettes").children().length < 1) {
        $("#color_palettes").load("./components/color_palettes.htm", function () {
            allFormUpdates.colorPaletteRowClick();
        });
    } else {
        allFormUpdates.colorPaletteRowClick(); // runs when this main function is called with chart_recall
    }

    //custom colors palette checkbox
    $("#use_custom_colors_checkbox").unbind().click(function () {
        var checked = utils_forms.getCheckBoxValue($(this));

        if (checked) {
            updateColors.addCustomPalette(all_chart_options, allFormUpdates.colorPaletteRowClick);
        } else {
            $(".color_palette_row_custom").remove();
        }
    });

    //custom colors textbox
    $("#custom_colors_textarea").unbind().bind('blur paste', function () {

        var checked = utils_forms.getCheckBoxValue($("#use_custom_colors_checkbox"));

        if (checked) {

            $(".color_palette_row_custom").remove();
            setTimeout(function () {
                updateColors.addCustomPalette(all_chart_options, allFormUpdates.colorPaletteRowClick);
            }, 100);
        }
    });

    /* LEGEND CHANGES */

    //legend layout changed
    $("#legend_layout_select").unbind().change(function () {
        update_legend.updateLayout($(this).val(), chart, all_chart_options);
    });

    //legend width changed

    $("#legend_width_input").unbind().keyup(function () {
        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        } else {
                var new_legend_width = utils_main.checkForUndefined($(this).val());
                update_legend.updateLegendWidth(new_legend_width, chart, all_chart_options);
            }
    });

    //legend item width changed

    $("#legend_item_width_input").unbind().keyup(function () {

        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        } else {
                var new_item_width = utils_main.checkForUndefined($(this).val());
                update_legend.updateItemWidth(new_item_width, chart, all_chart_options);
            }
    });

    //legend reverse, enabled, alphabetized ceckbox, or map legend decimals dropdown changed
    $("#legend_reverse_layout_checkbox, #map_legend_enabled_checkbox, #legend_alphabetical_layout_checkbox, #map_legend_decimals_select").unbind().change(function () {

        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        } else {
                var val = utils_forms.getCheckBoxValue($(this));
                update_legend.updateIsReversed(val, chart, all_chart_options);
            }
    });

    //legend toggle (hide others) checkbox changed
    $("#legend_make_toggle_checkbox").unbind().change(function () {
        var toggle_enabled = utils_forms.getCheckBoxValue($(this));
        update_legend.updateToggle(toggle_enabled, chart, all_chart_options, $("#chart_type_icons .selected").divVal());
    });

    //legend X or Y placement values changed
    $("#legend_placement_x, #legend_placement_y").unbind().keyup(function () {

        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        } else {

                var newX = Number($("#legend_placement_x").val());
                var newY = Number($("#legend_placement_y").val());

                update_legend.updateXYpositions(newX, newY, chart, all_chart_options);
            }
    });

    /* X-AXIS CHANGES */

    //x-axis title textarea changed
    $("#chart_x_axis_title_textarea").unbind().keyup(function () {
        var new_title = $(this).val();
        update_x_axis.updateTitle(new_title, chart, all_chart_options);
    });

    //x-axis title indent input changed (bar charts only)
    $("#chart_x_axis_x_position_input").unbind().keyup(function () {
        var new_indent = Number($(this).val());
        update_x_axis.updateTitleIndent(new_indent, chart, all_chart_options);
    });

    //x-axis tickmark interval input changed
    $("#chart_x_axis_tickmark_interval_input").unbind().keyup(function () {
        var new_interval = Number($(this).val());
        update_x_axis.updateTickmarkInterval(new_interval, chart, all_chart_options, all_chart_options.xAxis.categories);
    });

    //x-axis max input changed
    $("#chart_x_axis_max_input").unbind().keyup(function () {
        var new_max = $(this).val();
        update_x_axis.updateMax(new_max, chart, all_chart_options);
    });

    //x-axis min input changed
    $("#chart_x_axis_min_input").unbind().keyup(function () {
        var new_min = $(this).val();
        update_x_axis.updateMin(new_min, chart, all_chart_options);
    });

    //x-axis formatter (only years) changed
    $("#chart_x_axis_show_only_years, #chart_x_axis_add_commas, #chart_x_axis_signs_select, #chart_x_axis_decimals_select").unbind().change(function () {
        var only_numbers = utils_forms.getCheckBoxValue($("#chart_x_axis_show_only_years"));
        var add_commas = utils_forms.getCheckBoxValue($("#chart_x_axis_add_commas"));
        var sign = $("#chart_x_axis_signs_select").val();
        var decimals = $("#chart_x_axis_decimals_select").val();
        update_x_axis.updateFormatter(only_numbers, add_commas, sign, decimals, chart, all_chart_options);
    });

    /* Y-AXIS CHANGES */

    //y-axis title textarea changed
    $("#chart_y_axis_title_textarea, #chart_y_axis_title_textarea_2").unbind().keyup(function () {
        var newTitle = $(this).val();
        var axis_number = $(this).attr("id").slice(-1);
        update_y_axis.updateTitle(newTitle, chart, all_chart_options, axis_number);
    });

    //y-axis title indent changed
    $("#chart_y_axis_x_position_input, #chart_y_axis_x_position_input_2").unbind().keyup(function () {
        var newXPosition = $(this).val();
        var axis_number = $(this).attr("id").slice(-1);
        update_y_axis.updateXPosition(newXPosition, chart, all_chart_options, axis_number);
    });

    //y-axis tickmark interval input changed
    $("#chart_y_axis_tickmark_interval_input, #chart_y_axis_tickmark_interval_input_2").unbind().keyup(function () {
        var newInterval = $(this).val();
        var axis_number = $(this).attr("id").slice(-1);
        console.log(axis_number);
        update_y_axis.updateTickmarkInterval(newInterval, chart, all_chart_options, axis_number);
    });

    //y-axis max input changed
    $("#chart_y_axis_max_input, #chart_y_axis_max_input_2").unbind().keyup(function () {
        var newMax = $(this).val();
        var axis_number = $(this).attr("id").slice(-1);
        update_y_axis.updateMax(newMax, chart, all_chart_options, axis_number);
    });

    //y-axis min input changed
    $("#chart_y_axis_min_input, #chart_y_axis_min_input_2").unbind().keyup(function () {
        var newMin = $(this).val();
        var axis_number = $(this).attr("id").slice(-1);
        update_y_axis.updateMin(newMin, chart, all_chart_options, axis_number);
    });

    //y-axis opposite side ceckbox changed
    $("#chart_y_axis_opposite_checkbox").unbind().change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsOpposite(val, chart, all_chart_options);
    });

    //y-axis log ceckbox changed
    $("#chart_y_axis_log_checkbox").unbind().change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsLog(val, chart, all_chart_options);
    });

    //y-axis dollar / percent or decimal selects changed (format)
    $("#chart_y_axis_signs_select, #chart_y_axis_decimals_select, #chart_y_axis_divide_select").unbind().change(function () {
        var sign = $("#chart_y_axis_signs_select").val();
        var decimals = $("#chart_y_axis_decimals_select").val();
        var dividend = Number($("#chart_y_axis_divide_select").val());
        update_y_axis.updateFormatter(sign, decimals, dividend, chart, all_chart_options);
    });

    $("#chart_y_axis_signs_select").change(); //call once on load

    /* SECONDARY Y-AXIS CHANGES */
    $("#chart_y_axis_2_enabled_checkbox").unbind().change(function () {
        var is_checked = utils_forms.getCheckBoxValue($(this));

        if (is_checked) {
            $(".secondary_y_axis_span").show();
            update_y_axis.addSecondAxis(chart, all_chart_options);
        } else {
            $(".secondary_y_axis_span").hide();
            update_y_axis.removeSecondAxis(chart, all_chart_options);
        }
    });

    //secondary y-axis dollar / percent or decimal selects changed (format)
    $("#chart_y_axis_signs_select_2, #chart_y_axis_decimals_select_2, #chart_y_axis_divide_select_2").unbind().change(function () {
        var sign = $("#chart_y_axis_signs_select_2").val();
        var decimals = $("#chart_y_axis_decimals_select_2").val();
        var dividend = Number($("#chart_y_axis_divide_select_2").val());
        update_y_axis.updateFormatter(sign, decimals, 1, chart, all_chart_options, "2"); //"2" is for second axis
    });

    /* TOOLTIP CHANGES */

    //change shared tooltip checkbox, decimals, signs, or mulitplier selects
    $("#chart_tooltip_shared_checkbox, #chart_tooltip_force_decimals_select, #chart_tooltip_force_decimals_x_select, #chart_tooltip_force_decimals_z_select, #chart_tooltip_signs_select, #chart_tooltip_signs_x_select, #chart_tooltip_signs_z_select, #chart_tooltip_y_multiple_select, #chart_tooltip_force_decimals_select_2, #chart_tooltip_signs_select_2, #chart_tooltip_y_multiple_select_2").unbind().change(function () {

        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        } else {
                update_tooltip.updateToolTip(chart, all_chart_options);
            }
    });
    //call update tooltip after page and chart is loaded (has to be on a callback with the 'chart' object)
    $("#chart_tooltip_shared_checkbox").change();

    //bubble z value
    $("#chart_z_title_text_input").unbind().keyup(function () {
        update_tooltip.updateToolTip(chart, all_chart_options);
    });

    /* CREDITS CHANGES */

    $("#chart_credits_text_textarea").unbind().bind('input propertychange', function () {
        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        } else {
                update_credits.updateCreditText(chart, all_chart_options); //for charts
            }
    });

    /* EXTRA OPTIONS CHANGES */

    //Point padding change (only bar and column)

    $("#point_padding_input").unbind().bind('input propertychange', function () {

        var val = $(this).getValNumber();

        update_chart_options.changePointPadding(val, chart, all_chart_options);
    });

    //group padding change (only bar and column)

    $("#group_padding_input").unbind().bind('input propertychange', function () {
        var val = $(this).getValNumber();

        update_chart_options.changeGroupPadding(val, chart, all_chart_options);
    });

    //Subtitle change
    $("#chart_subtitle_textarea").unbind().bind('input propertychange', function () {

        if (all_chart_options.chart.type === "map") {
            //if map
            map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
        } else {
                //if chart
                var new_title = $(this).val();
                update_chart_options.updateSubtitle(new_title, chart, all_chart_options);
            }
    });

    //MLR style toggle
    $("#chart_mlr_styles_checkbox").unbind().change(function () {
        var is_checked = utils_forms.getCheckBoxValue($(this));
        update_x_axis.toggleMLRStyle(is_checked, chart, all_chart_options);
        update_y_axis.toggleMLRStyle(is_checked, chart, all_chart_options);
        update_chart_options.toggleMLRStyle(is_checked, all_chart_options); //draw_chart is called from here to update plotBorder
        if (is_checked) {
            $("#color_palette_mlr").click(); //click MLR color palette
        }
    });

    //Zoom type changed
    $("#chart_zoom_select").unbind().change(function () {
        var val = $(this).val();
        update_chart_options.changeZoomType(val, chart, all_chart_options);
    }).change(); //change once on init to make type null, because zoomtype must be xy to start to enable dynamic changing

    //data labels checkbox toggled
    $("#chart_show_data_labels_checkbox").unbind().change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_chart_options.toggleDataLabels(val, chart, all_chart_options);
    });

    //recession shading
    $("#chart_add_recession_shading_select").unbind().change(function () {
        var dates_type = $(this).val();
        var plot_bands_arr = calculate_recession_dates.createPlotBands(all_chart_options.xAxis.categories, dates_type);
        calculate_recession_dates.insertPlotBands(plot_bands_arr, chart, all_chart_options);
        update_credits.updateCreditText(chart, all_chart_options);
    });

    /* MAP SPECIFIC FORM CHANGES */

    //type of map changed
    $("#map_type_select, #map_color_by_names_checkbox").unbind().change(function () {

        //update credit box
        update_credits.updateTextAreaBox(all_chart_options);

        //make new map
        if (utils_forms.getCheckBoxValue($("#map_color_by_names_checkbox"))) {
            //coloring by names
            $(".just_map_colored_by_names").show();
            map_colors_init.loadMapColorPalettes(11);
        } else {
            //coloring by values
            $(".just_map_colored_by_names").hide();
            map_colors_init.loadMapColorPalettes(4);
        }

        //hide/show relevent options
        if ($("#map_type_select").val() === "state") {
            $(".state_map_only").show();
        } else {
            $(".state_map_only").hide();
        }
    });

    // animated and various map checkbox changed
    $("#map_animated_checkbox, #map_circle_size_by_select, #map_animated_start_at_last_date_checkbox").unbind().change(function () {
        // $("#legend_placement_y").val(70); // set legend y value so legend is lower for animated maps
        map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
    });

    //circle size range slider changed
    //map tooltip N/A, and prepend to value inputs changed
    //map animation delay input changed

    $("#map_circle_size_range, #map_tooltip_na_text_input, #map_tooltip_prepend_to_value_text_input, #map_animation_speed_range").unbind().on("input", function () {
        map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
    });

    //main tooltip fontsize changed
    $("#map_tooltip_main_value_font_size_input").unbind().keyup(function () {
        map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
    });

    //CHECKBOXES - map size for spotlight, VI, PR, and add columns inset checkboxes changed
    $("#map_spotlight_size_checkbox, #map_include_puerto_rico_checkbox, #map_include_virgin_islands_checkbox, #map_add_ranked_columns_checkbox").unbind().change(function () {

        //move legend over if adding columns inset
        if ($(this).attr("id") == "map_add_ranked_columns_checkbox") {
            $("#legend_placement_x").val(10);
        }

        map_init.loadNewMap(chart, all_chart_options, all_map_options, true); // true to repopulate form
    });

    //map palette + / - buttons clicked to change amount of colors
    $("#add_map_color, #minus_map_color").unbind().click(function () {
        update_map_palettes.changeAmount($(this));
    });

    /* Initialize chart_recall (load saved chart button ) */

    chart_recall.initLoad(chart, all_chart_options);

    //bind nav clicks and keys
    var navigation_setup = require("../navigation_setup.js");
    navigation_setup.initNavWithChart(chart, all_chart_options, all_map_options); // rebinds chart and all_chart_options to form events
};

module.exports = allFormUpdates;

},{"../initializers/maps/map_colors_init.js":45,"../initializers/maps/map_init.js":47,"../navigation_setup.js":54,"../utils/calculate_recession_dates.js":66,"../utils/chart_recall.js":67,"../utils/utils_forms.js":70,"../utils/utils_main.js":71,"./update_chart_options.js":16,"./update_chart_type.js":17,"./update_colors.js":18,"./update_credits.js":19,"./update_data.js":20,"./update_individual_series.js":21,"./update_legend.js":22,"./update_map_palettes.js":24,"./update_template.js":25,"./update_tooltip.js":26,"./update_x_axis.js":27,"./update_y_axis.js":28}],16:[function(require,module,exports){
"use strict";

var draw_chart = require("../draw_chart.js");
var utils_main = require("../utils/utils_main");

/** updaters for all_chart_options.chart
@namespace
**/
var update_chart_options = {

    /** when point padding is changed (only bar and column charts) **/
    changePointPadding: function changePointPadding(val, chart, all_chart_options) {

        $(chart.series).each(function () {
            this.update({
                pointPadding: val
            });
        });

        all_chart_options.plotOptions.series.pointPadding = val;
    },

    /** when group padding is changed (only bar and column charts) **/
    changeGroupPadding: function changeGroupPadding(val, chart, all_chart_options) {

        $(chart.series).each(function () {
            this.update({
                groupPadding: val
            });
        });

        all_chart_options.plotOptions.series.groupPadding = val;
    },

    /** when zoon type dropdown is changed **/
    changeZoomType: function changeZoomType(val, chart, all_chart_options) {

        var val_arr = utils_main.parseBoolsFromArray(val.split(",")); //array is [x-zoom {bool}, y-zoom {bool}, zoomtype {stiring: x, y, or xy}]

        chart.pointer.zoomX = val_arr[0];
        chart.pointer.zoomY = val_arr[1];
        chart.pointer.zoomHor = val_arr[0];
        chart.pointer.zoomVert = val_arr[1];

        all_chart_options.chart.zoomType = val_arr[2];
    },

    /** enable or disabled data labels. Called when chart_show_data_labels_checkbox is changed **/

    toggleDataLabels: function toggleDataLabels(val, chart, all_chart_options) {

        //decide which kind of data labels to show depending on chart type
        var dataLabelsFormatter = function dataLabelsFormatter() {
            if (all_chart_options.chart.type === "scatter" || all_chart_options.chart.type === "bubble") {
                return function () {
                    if (typeof this.key === "string") {
                        return this.key.match("invisible") ? "" : this.key;
                    } else {
                        return this.series.name;
                    }
                };
            } else {
                return function () {
                    return $(this.y).addCommas();
                };
            }
        };

        $(chart.series).each(function () {
            this.update({
                dataLabels: {
                    enabled: val,
                    formatter: dataLabelsFormatter()
                }
            });
        });

        all_chart_options.plotOptions.series.dataLabels.enabled = val;
        all_chart_options.plotOptions.series.dataLabels.formatter = dataLabelsFormatter();
    },

    /** when Use MLR Styles checkbox is toggled **/
    toggleMLRStyle: function toggleMLRStyle(is_checked, all_chart_options) {
        //if or not using MLR styles
        all_chart_options.chart.plotBorderWidth = is_checked ? 1 : 0;

        //have to completely redraw chart to update plotBorderWidth - not accesible by HC's API - this messes up a lot, so for now I'm not.      
    },

    /** updates the subtitle (when that #chart_subtitle_textarea is updated) **/
    updateSubtitle: function updateSubtitle(new_title, chart, all_chart_options) {

        chart.setTitle(null, {
            text: new_title
        });

        all_chart_options.subtitle.text = new_title;
    }

};

module.exports = update_chart_options;

},{"../draw_chart.js":14,"../utils/utils_main":71}],17:[function(require,module,exports){
"use strict";

var draw_chart = require("../draw_chart");
var plotOptionsInit = require("../initializers/charts/plot_options_init.js");
var update_data = require("./update_data.js");
var update_tooltip = require("./update_tooltip.js");
var update_x_axis = require("./update_x_axis.js");
var update_y_axis = require("./update_y_axis.js");
var utils_main = require("../utils/utils_main.js");

/** when a chart icon is clicked, this function is called - changes the chart type shown 
@module
*/
var updateChartType = function updateChartType(chart_type, chart, all_chart_options) {

    //if drilled into a drilldown, click the up button to get out - prevents errors
    utils_main.drillUp();

    //if map
    if (chart_type === "map") {
        all_chart_options.chart.type = "map";
        return false;
    }

    //if not map
    var type = chart_type.replace("stacked_", "");

    //update xaxis for drilldown and make "bar" type
    if (type === "drilldown") {
        type = $("#drilldown_type_select").val();
        all_chart_options.xAxis.type = "category";
        all_chart_options.xAxis.categories = null;
    } else {
        all_chart_options.xAxis.type = "linear";
        all_chart_options.xAxis.categories = undefined;
    }

    //if not a line and has a second y-axis, remove that axis

    if (type != "line") {
        $("#chart_y_axis_2_enabled_checkbox").prop('checked', false).change();
    }

    if (type === "bar" || type === "boxplot") {
        //fix y axis position
        chart.inverted = true;
        all_chart_options.yAxis.title.align = "middle";
        all_chart_options.xAxis.title.align = "high";
        all_chart_options.yAxis.title.x = 0;
        all_chart_options.yAxis.title.y = 8;
        all_chart_options.xAxis.title.y = -20;
        all_chart_options.xAxis.title.x = Number($("#chart_x_axis_x_position_input").val());

        //hide non-relevant elements
        $(".not_bar").hide();
    } else {
        //chart not bar
        chart.inverted = false;
        all_chart_options.yAxis.title.align = "high";
        all_chart_options.xAxis.title.align = "middle";
        all_chart_options.yAxis.title.x = Number($("#chart_y_axis_x_position_input").val());
        all_chart_options.yAxis.title.y = -20;
        all_chart_options.xAxis.title.y = 0;
        all_chart_options.xAxis.title.x = 0;

        $(".not_bar").show();
    }

    all_chart_options.xAxis.plotLines = [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": type === "scatter" || type === "bubble" ? 1 : 0
    }];

    all_chart_options.xAxis.gridLineWidth = type === "scatter" || type === "bubble" ? 1 : 0;
    all_chart_options.xAxis.startOnTick = type === "scatter" || type === "bubble" ? true : false;

    chart.xAxis[0].update({
        gridLineWidth: all_chart_options.xAxis.gridLineWidth,
        plotLines: all_chart_options.xAxis.plotLines,
        startOnTick: all_chart_options.xAxis.startOnTick,
        type: all_chart_options.xAxis.type,
        categories: all_chart_options.xAxis.categories
    }, false);

    chart.xAxis[0].setTitle({
        align: all_chart_options.xAxis.title.align,
        y: all_chart_options.xAxis.title.y,
        x: all_chart_options.xAxis.title.x
    }, false);

    chart.yAxis[0].setTitle({
        align: all_chart_options.yAxis.title.align,
        x: all_chart_options.yAxis.title.x,
        y: all_chart_options.yAxis.title.y
    }, false);

    //re parse data
    update_data.updateData(chart, all_chart_options);

    all_chart_options.chart.type = type;

    //update whether data labels are enabled
    $("#chart_show_data_labels_checkbox").change();

    //update tooltip
    update_tooltip.updateToolTip(chart, all_chart_options);
};

module.exports = updateChartType;

},{"../draw_chart":14,"../initializers/charts/plot_options_init.js":36,"../utils/utils_main.js":71,"./update_data.js":20,"./update_tooltip.js":26,"./update_x_axis.js":27,"./update_y_axis.js":28}],18:[function(require,module,exports){
"use strict";

var colorsInit = require("../initializers/charts/colors_init.js");
var allFormUpdates = require("./all_form_updates.js");

/** updates the chart's colors - called when palette is changed. Calls colorsInit 
@module
@param chart {object} the main chart object, built when chart is loaded
@param all_chart_options {object} the main chart options that load into building of the chart and are turned to string for the output
**/
var updateColors = function updateColors(chart, all_chart_options, chart_type) {
    all_chart_options.colors = colorsInit();
    chart.options.colors = all_chart_options.colors;

    console.log("updating colors", chart_type);

    if (chart_type === "drilldown" || chart_type === "pie") {
        //drilldowns color by point

        $(chart.series[0].data).each(function (i) {

            if (this.color != "none") {
                //update chart
                this.update({
                    color: all_chart_options.colors[i]
                }, false);
                //update all_chart_options.series.data colors
                all_chart_options.series[0].data[i].color = all_chart_options.colors[i];
            } else {}
        });
    } else {
        //other charts color by series

        var start_coloring_index = 0;
        var color_index_mod = 0;

        if (chart_type === "bubble" && $("#bubble_animated_checkbox").is(":checked")) {
            start_coloring_index = 2;
            color_index_mod = 2;
        }

        var colors_len = all_chart_options.colors.length;
        console.log("colors_len", colors_len);

        $(chart.series).each(function (i) {

            if (i >= start_coloring_index) {
                var color_index = i - color_index_mod - Math.floor((i - color_index_mod) / colors_len) * colors_len;
                var new_color = all_chart_options.colors[color_index];
                //update chart
                this.update({
                    color: new_color
                }, false);
                //update all_chart_options.series colors
                all_chart_options.series[i - color_index_mod].color = new_color;
            }
        });
    }

    chart.redraw();
};

//make custom color palette from textbox and add to end of palettes, callback is updating the color row functionality
updateColors.addCustomPalette = function (all_chart_options, callback) {
    var custom_colors = $.trim($("#custom_colors_textarea").val()).split(/\s/);
    custom_colors = custom_colors.filter(function (n) {
        return n != undefined;
    });

    var color_palette_row_class, color_palette_cell_class;

    if (all_chart_options.chart.type === "map") {
        color_palette_row_class = "map_color_palette_row";
        color_palette_cell_class = "map_color_palette_cell";
    } else {
        color_palette_row_class = "color_palette_row";
        color_palette_cell_class = "color_palette_cell";
    }

    var $custom_color_palette_row = $('<div class="' + color_palette_row_class + ' color_palette_row_custom" value="color_palette_row_custom"></div>');

    $.each(custom_colors, function (i, color) {

        var $color_palette_cell = $('<div class="' + color_palette_cell_class + '" style="background-color: ' + color + ';">&nbsp;</div>');
        $custom_color_palette_row.append($color_palette_cell);
    });

    $custom_color_palette_row.append('<div style="clear:both; height:5px;">&nbsp;</div>');

    if (all_chart_options.chart.type === "map") {
        $("#map_color_palettes").append($custom_color_palette_row);
    } else {
        $("#color_palettes").append($custom_color_palette_row);
    }

    callback();
    $(".color_palette_row_custom").click();
};

module.exports = updateColors;

},{"../initializers/charts/colors_init.js":32,"./all_form_updates.js":15}],19:[function(require,module,exports){
"use strict";

var creditsInit = require("../initializers/charts/credits_init.js");

/** when credit options are changed in the side area 
@namespace
*/

var update_credits = {

    /** get and set the credits text **/
    updateCreditText: function updateCreditText(chart, all_chart_options) {

        all_chart_options.credits = creditsInit();

        var new_y = Number($("#chart_height_textinput").val()) + all_chart_options.credits.position.y - 26;
        chart.credits.element.setAttribute("y", new_y);

        //svg text elements don't use break; each new line must be wrapped in a new tspan
        var credits_text = all_chart_options.credits.text.split("<br>").map(function (line, i) {
            return '<tspan x="10" dy="12">' + line + "</tspan>";
        }).join("");

        $(chart.credits.element).html(credits_text);
    },

    /** update chart_credits_text_textarea box with new text **/
    updateTextAreaBox: function updateTextAreaBox(all_chart_options) {

        //if it's a map...
        if (all_chart_options.chart.type === "map") {

            var map_type = $("#map_type_select option:selected").text().toLowerCase();
            var map_type_plural = map_type === "county" ? "counties" : map_type + "s";

            $("#chart_credits_text_textarea").val("Hover over a " + map_type + " to see data.\nHover over legend items to see " + map_type_plural + " in a category.\nSource: U.S. Bureau of Labor Statistics."); //update credits area
        }
    }

};

module.exports = update_credits;

},{"../initializers/charts/credits_init.js":33}],20:[function(require,module,exports){
"use strict";

var parseTableInput = require("../parsers/parse_table_input.js");
var utils_forms = require("../utils/utils_forms.js");
var utils_main = require("../utils/utils_main.js");

/** called when #chart_type_icons .selected or #table_input_textarea is changed - calls functions to reparse data
@namespace
*/

var update_data = {

    /** called when .chart_type_icons .selected or #table_input_textarea is changed - calls functions to reparse data */
    updateData: function updateData(chart, all_chart_options) {

        var chart_type = $("#chart_type_icons .selected").divVal();
        var input = $("#table_input_textarea").val() || " ";

        var legend_toggle_enabled = utils_forms.getCheckBoxValue($("#legend_make_toggle_checkbox"));
        var load_series_from = $("#table_input_load_series_from_icons .selected").divVal();

        //if drilled into a drilldown, click the up button to get out - prevents errors
        utils_main.drillUp();

        ///parse data //
        var parsed_table_output = parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, all_chart_options.colors, chart, all_chart_options);

        //update x-axis categories
        chart.xAxis[0].update({
            categories: parsed_table_output.x_axis_categories
        }, false);

        //remove existing series array
        $(chart.series).each(function () {
            this.remove(false); //false to not redraw yet
        });

        //add new series
        $(parsed_table_output.series).each(function () {
            chart.addSeries(this, false); //false to not redraw yet
        });

        chart.options.drilldown.series = [];

        //add drilldown series if applicable
        if (parsed_table_output.drilldown) {

            $(parsed_table_output.drilldown.series).each(function () {
                chart.options.drilldown.series.push(this);
            });
        }

        //update chart title
        chart.setTitle({
            text: parsed_table_output.title_text
        });

        chart.redraw(true);

        //update chart options for code output
        all_chart_options.series = parsed_table_output.series;
        all_chart_options.xAxis.categories = parsed_table_output.x_axis_categories;
        all_chart_options.drilldown = parsed_table_output.drilldown;
        all_chart_options.title.text = parsed_table_output.title_text;

        //update whether legend toggle is enabled
        $("#legend_make_toggle_checkbox").change();
    }

};

module.exports = update_data;

},{"../parsers/parse_table_input.js":64,"../utils/utils_forms.js":70,"../utils/utils_main.js":71}],21:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");
var utils_forms = require("../utils/utils_forms.js");
var keyboard_inputs = require("../keyboard_inputs.js");
var update_y_axis = require("./update_y_axis.js");

/** methods for updating individual series options in  #display_series_options - called when its side nav tab is selected in navigation_setup.
@module
@param chart {object} the main chart object, built when chart is loaded
@param all_chart_options {object} the main chart options that load into building of the chart and are turned to string for the output
**/

var update_individual_series = {

    /** updates all the extra data titles and values. Called from  seriesExtraDataChange()**/
    updateExtraData: function updateExtraData(chart, all_chart_options) {

        $(".series_snippet").each(function (i) {

            chart.series[i].extra_data = [];
            all_chart_options.series[i].extra_data = [];

            var $series_snippet = $(this);

            //push names
            $(".series_extra_data_title_textarea", $series_snippet).each(function (j) {
                var extra_data_obj = {};

                extra_data_obj.name = $(this).val();

                //push values
                $(".series_extra_data_values_textarea:eq(" + j + ")", $series_snippet).each(function (k) {

                    extra_data_obj.values = $(this).val().split("\n");
                });

                chart.series[i].extra_data.push(extra_data_obj);
                all_chart_options.series[i].extra_data.push(extra_data_obj);
            });
        });
    },

    /** called when changes are made to the series extra data text areas and plus and minus buttons **/
    seriesExtraDataChange: function seriesExtraDataChange(chart, all_chart_options) {

        //bind keyboard listeners so they aren't triggered inside of new text boxes
        keyboard_inputs.initListeners();

        //always hide the first minus sign for each series. Show the rest
        $(".series_extra_data_div:gt(0) .series_subtract_extra_data_button", $(".series_snippet")).show();

        //when plus buttons are clicked, duplicate the extra data entry boxes
        $(".series_add_extra_data_button").unbind().click(function () {
            var $extra_data_div = $(this).parents(".series_extra_data_div");

            $extra_data_div.clone().hide().insertAfter($extra_data_div).fadeIn().children().val("");
            //rebind extra data changes
            update_individual_series.seriesExtraDataChange(chart, all_chart_options);
        });

        //when minius buttons are clicked, remove the extra data entry boxes
        $(".series_subtract_extra_data_button").unbind().click(function () {
            $(this).parents(".series_extra_data_div").fadeOut(300, function () {
                $(this).remove();
            });
        });

        //when extra data title text areas are changed
        $(".series_extra_data_title_textarea, .series_extra_data_values_textarea").unbind('input propertychange').bind('input propertychange', function () {
            update_individual_series.updateExtraData(chart, all_chart_options);
        });
    },

    /** called when the series type icons are clicked. Binded at the end of populateForm **/
    seriesTypeIconChange: function seriesTypeIconChange(chart, all_chart_options) {

        $(".series_type_icon").click(function () {
            //update series type
            var i = $(this).parents(".series_snippet").index();
            var type = $(this).attr("type");
            var marker, lineWidth, zIndex;

            //if scatter chosen, make it a line chart with markers but no line

            if (type === "scatter") {
                lineWidth = 0;
                zIndex = 500;
                marker = {
                    enabled: true,
                    symbol: "circle"
                };
            } else {
                //not scatter

                zIndex = type === "column" ? -1 : i;
                marker = {
                    enabled: false
                };
                lineWidth = type === "line" ? 1 : 0;
            }

            chart.series[i].update({
                type: type,
                lineWidth: lineWidth,
                zIndex: zIndex,
                marker: marker
            });

            //update all_chart_options
            all_chart_options.series[i].type = type;
            all_chart_options.series[i].lineWidth = lineWidth;
            all_chart_options.series[i].zIndex = zIndex;
            all_chart_options.series[i].marker = marker;

            //highlight clicked icon
            $(".selected", $(this).parent()).removeClass("selected");
            $(this).addClass("selected");

            //hide or show the line styles optoins for that series
            type === "line" ? $(".line_style_div:eq(" + i + ")").show() : $(".line_style_div:eq(" + i + ")").hide();
        });
    },

    /** called when series visible by default checkbox is changed.  Binded at the end of populateForm **/
    seriesVisibleChange: function seriesVisibleChange(chart, all_chart_options) {

        $(".series_visible_checkbox").change(function () {
            var is_visible = utils_forms.getCheckBoxValue($(this));
            var i = $(this).parents(".series_snippet").index();
            chart.series[i].update({
                visible: is_visible
            });

            //update all_chart_options
            all_chart_options.series[i].visible = is_visible;
        });
    },

    /** called when use second y-axis checkbox is changed.  Binded at the end of populateForm **/
    useSecondYAxisChange: function useSecondYAxisChange(chart, all_chart_options) {

        $(".use_2nd_y_axis_checkbox").change(function () {

            var axis_index = utils_forms.getCheckBoxValue($(this)) ? 1 : 0;

            //add second axis if not there by clicking the add y axis checkbox
            if (!Array.isArray(all_chart_options.yAxis) && axis_index === 1) {
                $("#chart_y_axis_2_enabled_checkbox").prop('checked', true).change();
            }

            //if unchecked, look if there is still a need for the second axis. if not, remove it
            if (axis_index === 0) {
                var need_2nd_axis = false;

                $(".use_2nd_y_axis_checkbox").each(function () {
                    if (utils_forms.getCheckBoxValue($(this))) {
                        need_2nd_axis = true;
                    }
                });

                if (need_2nd_axis === false) {
                    $("#chart_y_axis_2_enabled_checkbox").prop('checked', false).change();
                }
            }

            var i = $(this).parents(".series_snippet").index();

            chart.series[i].update({
                yAxis: axis_index
            });

            //update all_chart_options
            all_chart_options.series[i].yAxis = axis_index;
        });
    },

    /** called when the jscolor selector is changed (mouse still down). Updates the actual chart object and all_chart_options code output object***/
    updateSeriesColor: function updateSeriesColor(chart, all_chart_options, i, jscolor) {

        all_chart_options.colors[i] = typeof jscolor === "string" ? jscolor : jscolor.toRGBString();
        all_chart_options.series[i].color = all_chart_options.colors[i];
        chart.series[i].update({
            color: all_chart_options.series[i].color
        });
    },

    /** bound with populateForm. When the line style dropdown is changed, change that series **/
    lineStyleSelectChange: function lineStyleSelectChange(chart, all_chart_options) {
        $(".line_style_select").change(function () {
            var line_style = $(this).val();
            var i = $(this).parents(".series_snippet").index();

            all_chart_options.series[i].dashStyle = line_style;

            chart.series[i].update({
                dashStyle: line_style
            });
        });
    },

    /** makes a color box, called from populateForm **/
    makeSeriesColorDiv: function makeSeriesColorDiv(chart, all_chart_options, i) {
        var series_color_div = document.createElement("div");
        series_color_div.className = "series_color_div";

        //make color input box
        var series_color = document.createElement('input');
        $(series_color).addClass("jscolor {valueElement:null}").attr("id", "series_color_" + i);

        //init with color, using jscolor.js
        var picker = new jscolor(series_color, {
            onFineChange: function onFineChange() {
                update_individual_series.updateSeriesColor(chart, all_chart_options, i, this);
            }

        });

        //convert rgb string into arrray
        var c = i < 15 ? i : i - 15;
        var color = all_chart_options.colors[c] || "#000";

        //create picker
        if (color.charAt(0) === "#") {
            //if hex
            picker.fromString(color);
        } else {
            //else color is rgb
            var rgb = utils_main.rgb2arr(color);
            picker.fromRGB(rgb[0], rgb[1], rgb[2]);
        }

        //make clear float div
        var clear_div = utils_main.makeClearFloatDiv();

        $(series_color_div).append(series_color, clear_div);

        return series_color_div;
    },

    /** add line style option - shown only if type is line**/
    makeLineStyleDiv: function makeLineStyleDiv(i, series) {

        var line_style_div = document.createElement("div");
        $(line_style_div).addClass("line_style_div");

        var line_style_label = document.createElement("label");
        $(line_style_label).addClass("line_style_label").text("Line style: ");

        var line_style_select = document.createElement("select");
        $(line_style_select).addClass("line_style_select").attr("id", "line_style_select_" + i);

        var line_style_option_solid = document.createElement("option");
        $(line_style_option_solid).text("Solid").val("Solid");

        var line_style_option_dash = document.createElement("option");
        $(line_style_option_dash).text("Dash").val("Dash");

        var line_style_option_dot = document.createElement("option");
        $(line_style_option_dot).text("Dot").val("Dot");

        var line_style_option_long_dash = document.createElement("option");
        $(line_style_option_long_dash).text("Long dash").val("LongDash");

        var line_style_option_dash_dot = document.createElement("option");
        $(line_style_option_dash_dot).text("Dash-dot").val("DashDot");

        $(line_style_select).append(line_style_option_solid, line_style_option_dash, line_style_option_dot, line_style_option_long_dash, line_style_option_dash_dot);

        $(line_style_select).val(series.dashStyle || "Solid"); //set selected value

        $(line_style_div).append(line_style_label, line_style_select);

        return line_style_div;
    },

    /** makes and returns div with icons that let user choose line or bar type for that series **/
    makeSeriesTypeDiv: function makeSeriesTypeDiv(chart, all_chart_options, i) {
        var series_type_div = document.createElement("div");
        series_type_div.className = "series_type_div";
        series_type_div.id = "series_type_div_" + i;

        //column icon
        var series_type_column = document.createElement("div");
        $(series_type_column).addClass("series_type_icon series_type_column").attr("type", "column").attr("title", "Column");
        if (chart.series[i].type === "column") {
            $(series_type_column).addClass("selected");
        }

        //line icon
        var series_type_line = document.createElement("div");
        $(series_type_line).addClass("series_type_icon series_type_line").attr("type", "line").attr("title", "Line");
        if (chart.series[i].type === "line") {
            $(series_type_line).addClass("selected");
        }

        //scatter icon
        var series_type_scatter = document.createElement("div");
        $(series_type_scatter).addClass("series_type_icon series_type_scatter").attr("type", "scatter").attr("title", "Just markers");

        var clear_div = utils_main.makeClearFloatDiv();

        //put it together
        $(series_type_div).append(series_type_line, series_type_column, series_type_scatter, clear_div);

        return series_type_div;
    },

    /** makes and returns a div with a checkbox that lets user determine whether the series should be visible by default **/

    makeSeriesVisibleDiv: function makeSeriesVisibleDiv(all_chart_options, i) {
        var series_visible_div = document.createElement("div");
        series_visible_div.className = "series_visible_div";

        var series_visible_label = document.createElement("label");
        series_visible_label.className = "series_visible_label";
        series_visible_label.textContent = "Visible by default: ";
        series_visible_label.setAttribute("for", "series_visible_checkbox_" + i);

        var series_visible_checkbox = document.createElement("input");
        series_visible_checkbox.setAttribute("type", "checkbox");
        series_visible_checkbox.checked = all_chart_options.series[i].visible ? "checked" : null;
        series_visible_checkbox.id = "series_visible_checkbox_" + i;
        series_visible_checkbox.className = "series_visible_checkbox";

        series_visible_div.appendChild(series_visible_label);
        series_visible_div.appendChild(series_visible_checkbox);

        return series_visible_div;
    },

    /** makes and returns a div with a checkbox that lets the user choose to put the series (line only) on the second y-axis **/
    use2ndYAxisDiv: function use2ndYAxisDiv(all_chart_options, i) {
        var use_2nd_y_axis_div = document.createElement("div");
        use_2nd_y_axis_div.className = "use_2nd_y_axis_div";

        var use_2nd_y_axis_label = document.createElement("label");
        use_2nd_y_axis_label.className = "use_2nd_y_axis_label";
        use_2nd_y_axis_label.textContent = "Plot on second Y-Axis: ";
        use_2nd_y_axis_label.setAttribute("for", "use_2nd_y_axis_checkbox_" + i);

        var use_2nd_y_axis_checkbox = document.createElement("input");
        use_2nd_y_axis_checkbox.setAttribute("type", "checkbox");
        use_2nd_y_axis_checkbox.checked = all_chart_options.series[i].yAxis == 1 ? "checked" : null;
        use_2nd_y_axis_checkbox.id = "use_2nd_y_axis_checkbox_" + i;
        use_2nd_y_axis_checkbox.className = "use_2nd_y_axis_checkbox";

        use_2nd_y_axis_div.appendChild(use_2nd_y_axis_label);
        use_2nd_y_axis_div.appendChild(use_2nd_y_axis_checkbox);

        return use_2nd_y_axis_div;
    },

    /** makes and returns a div that has options to add extra data to a series for its tooltip **/

    makeSeriesExtraDataDiv: function makeSeriesExtraDataDiv(all_chart_options, i, j) {
        var j = j || 0;

        var series_extra_data_div = document.createElement("div");
        $(series_extra_data_div).addClass("series_extra_data_div");

        //make title box and label
        var series_extra_data_title_label = document.createElement("label");
        $(series_extra_data_title_label).addClass("series_extra_data_title_label").text("Extra data title for tooltip: ");

        //title text area
        var series_extra_data_title_textarea = document.createElement("textarea");

        $(series_extra_data_title_textarea).css({
            "height": "30px"
        }).addClass("series_extra_data_title_textarea").attr("id", "series_extra_data_title_textarea_" + i).val(all_chart_options.series[i].extra_data ? all_chart_options.series[i].extra_data[j].name : "");

        //make values box and label
        var series_extra_data_values_label = document.createElement("label");
        series_extra_data_values_label.className = "series_extra_data_values_label";
        series_extra_data_values_label.textContent = "Extra data values for tooltip: ";

        //values text area
        var series_extra_data_values_textarea = document.createElement("textarea");
        $(series_extra_data_values_textarea).addClass("series_extra_data_values_textarea").attr("id", "series_extra_data_values_textarea_" + i).val(all_chart_options.series[i].extra_data ? all_chart_options.series[i].extra_data[j].values.join("\n") : "");

        //notes
        var extra_data_notes = document.createElement("p");

        $(extra_data_notes).addClass("notes").text("For each point in a series, separate the extra value with a new line. Any formatting will be carried over, so if you want commas or a dollar sign in your value, make sure to include that here.");

        //add button
        var add_extra_data_button = document.createElement("div");
        $(add_extra_data_button).addClass("series_add_extra_data_button").text("+").css({
            cursor: "pointer",
            float: "left",
            "font-size": "190%",
            color: "#337ab7",
            "line-height": ".9"
        });

        //subtract button
        var subtract_extra_data_button = document.createElement("div");
        $(subtract_extra_data_button).addClass("series_subtract_extra_data_button").html("&minus;").css({
            cursor: "pointer",
            float: "left",
            marginLeft: "10px",
            "font-size": "190%",
            color: "#337ab7",
            "line-height": ".9",
            display: "none"
        });

        //clearfloat div
        var clear_div = utils_main.makeClearFloatDiv();

        //horizontal rule
        var extra_data_hr = document.createElement("hr");
        $(extra_data_hr).css({
            "margin-bottom": "0px"
        });

        //put it all together

        $(series_extra_data_div).append(extra_data_hr, series_extra_data_title_label, series_extra_data_title_textarea, series_extra_data_values_label, series_extra_data_values_textarea, extra_data_notes, add_extra_data_button, subtract_extra_data_button, clear_div);

        return series_extra_data_div;
    },

    /** populates #display_series_options with options for each series. Called when its side nav tab is selected from navigation_setup. **/
    populateForm: function populateForm(chart, all_chart_options) {

        var display_series_options_inner_div = $("#display_series_options_inner_div");
        display_series_options_inner_div.empty();

        $(all_chart_options.series).each(function (i, series) {

            //make series name header
            var series_name = document.createElement('h5');
            series_name.textContent = this.name;

            //make series color input
            var series_color_div = update_individual_series.makeSeriesColorDiv(chart, all_chart_options, i);

            //make outer snippet p tag
            var series_snippet = document.createElement('p');
            series_snippet.className = "series_snippet";

            series_snippet.appendChild(series_name);
            series_snippet.appendChild(series_color_div);

            //make series type div if applicable
            if (["line", "column"].indexOf(all_chart_options.chart.type) > -1) {
                var series_type_div = update_individual_series.makeSeriesTypeDiv(chart, all_chart_options, i);
                series_snippet.appendChild(series_type_div);
            }

            //make line style div
            var line_style_div = update_individual_series.makeLineStyleDiv(i, series);
            series_snippet.appendChild(line_style_div);

            //make use second y-axis checkbox div
            var use_2nd_y_axis_div = update_individual_series.use2ndYAxisDiv(all_chart_options, i);
            series_snippet.appendChild(use_2nd_y_axis_div);

            //make "is series visible on startup?" div
            var series_visible_div = update_individual_series.makeSeriesVisibleDiv(all_chart_options, i);
            series_snippet.appendChild(series_visible_div);

            //make extra data div text area (default of 1, but can be more if series already has extra_data)
            if (series.extra_data) {
                $.each(series.extra_data, function (j) {
                    var series_extra_data_div = update_individual_series.makeSeriesExtraDataDiv(all_chart_options, i, j);
                    series_snippet.appendChild(series_extra_data_div);
                });
            } else {
                var series_extra_data_div = update_individual_series.makeSeriesExtraDataDiv(all_chart_options, i);
                series_snippet.appendChild(series_extra_data_div);
            }

            //append all
            $(display_series_options_inner_div).append(series_snippet);

            if (all_chart_options.chart.type === "line") {
                $(".line_style_div").show();
            }
        });

        //bind series type changes
        update_individual_series.seriesTypeIconChange(chart, all_chart_options);

        //bind line style changes
        update_individual_series.lineStyleSelectChange(chart, all_chart_options);

        //bind use second y-axis checkbox changes
        update_individual_series.useSecondYAxisChange(chart, all_chart_options);

        //bind is visible by default changes
        update_individual_series.seriesVisibleChange(chart, all_chart_options);

        //bind extra data changes
        update_individual_series.seriesExtraDataChange(chart, all_chart_options);
    }

};

module.exports = update_individual_series;

},{"../keyboard_inputs.js":53,"../utils/utils_forms.js":70,"../utils/utils_main.js":71,"./update_y_axis.js":28}],22:[function(require,module,exports){
"use strict";

/** when legend options are changed in the side area 
@namespace
*/

var update_legend = {

    /** decide if the legend should be reverse order **/
    updateIsReversed: function updateIsReversed(val, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.reversed = val;
        legend.render();

        all_chart_options.legend.reversed = val;
    },

    /** updates legend width */
    updateLegendWidth: function updateLegendWidth(new_legend_width, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.width = new_legend_width;
        legend.render(false);

        all_chart_options.legend.width = new_legend_width;
    },

    /** updates legend item width - usefull for making legends with lots of items look more aligned */
    updateItemWidth: function updateItemWidth(new_item_width, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.itemWidth = new_item_width;
        legend.render(false);

        all_chart_options.legend.itemWidth = new_item_width;
    },

    /** if 'no legend' is selected, hide the legend, and set options, else, show it with the correct layout */
    updateLayout: function updateLayout(val, chart, all_chart_options) {

        var legend = chart.legend;
        if (val === "no_legend") {
            legend.group.hide();
            legend.box.hide();
            legend.display = false;
            legend.options.enabled = false;
            legend.render(true);

            if (legend.pager) {
                legend.pager.hide();
                legend.up.hide();
                legend.down.hide();
            }

            val = undefined;
        } else {

            legend.options.layout = val;
            legend.render(false);
            legend.group.show();
            legend.box.show();

            legend.display = true;

            if (legend.pager) {
                legend.pager.show();
                legend.up.show();
                legend.down.show();
            }

            legend.options.enabled = true;
        }

        all_chart_options.legend.layout = val;
        all_chart_options.legend.enabled = legend.options.enabled;
    },

    /** set if when one legend item is clicked, the others hide */
    updateToggle: function updateToggle(toggle_enabled, chart, all_chart_options, chart_type) {

        //update all_chart_options
        if (toggle_enabled) {

            var legendItemClick = function legendItemClick(event) {
                var selected = this.index;
                var allSeries = this.chart.series;
                $.each(allSeries, function (index, series) {
                    selected == index ? series.show() : series.hide();
                });
                return false;
            };

            var cursor_style = "pointer";
        } else if (chart_type === "drilldown") {
            var legendItemClick = function legendItemClick(event) {
                return false;
            };

            var cursor_style = "default";
        } else {
            var legendItemClick = function legendItemClick(event) {};

            var cursor_style = "pointer";
        }

        if (!chart) {
            return legendItemClick;
        } else {
            //if chart already made, update
            all_chart_options.plotOptions.series.events.legendItemClick = legendItemClick;

            all_chart_options.legend.itemHoverStyle.cursor = all_chart_options.legend.itemStyle.cursor = chart.legend.options.itemHoverStyle.cursor = chart.legend.options.itemStyle.cursor = cursor_style;

            // all_chart_options.legend.symbolWidth = chart.legend.options.symbolWidth = symbol_width;

            chart.legend.render(false);
        }

        //update in current chart
        chart.series.forEach(function (serie, i) {
            var is_visible = i > 0 && toggle_enabled === true ? false : true;

            serie.update({
                visible: is_visible,
                events: {
                    legendItemClick: all_chart_options.plotOptions.series.events.legendItemClick
                }
            }, false);

            all_chart_options.series[i].visible = is_visible;
        });

        chart.redraw(true);
    },

    /** update X and Y positions on legend */

    updateXYpositions: function updateXYpositions(newX, newY, chart, all_chart_options) {
        var legend = chart.legend;
        legend.options.x = newX;
        legend.options.y = newY;
        legend.render(false);

        all_chart_options.legend.x = newX;
        all_chart_options.legend.y = newY;
    }

};

module.exports = update_legend;

},{}],23:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/**
functions for the individual series tab for maps. Called ad populates from navigation_setup. Lets user fine adjust ranges and colors
@namespace
**/
var update_map_individual_series = {

    /** makes a color box, called from populateForm **/
    makeMapColorDiv: function makeMapColorDiv(chart, all_chart_options, all_map_options, color, i) {

        var map_color_div = document.createElement("div");
        map_color_div.className = "map_color_div";

        //make color input box
        var map_color_input = document.createElement('input');
        $(map_color_input).addClass("jscolor {valueElement:null}");
        map_color_input.id = "map_color_input" + i;

        //init with color, using jscolor.js
        var picker = new jscolor(map_color_input, {
            onFineChange: function onFineChange() {
                update_map_individual_series.updateMapColor(chart, all_chart_options, all_map_options, i, this);
            }

        });

        //create picker
        if (color.charAt(0) === "#") {
            //if hex
            picker.fromString(color);
        } else {
            //else color is rgb
            var rgb = utils_main.rgb2arr(color);
            picker.fromRGB(rgb[0], rgb[1], rgb[2]);
        }

        map_color_div.appendChild(map_color_input);

        return map_color_div;
    },

    /** makes the range value input boxes **/
    makeMapRangeInput: function makeMapRangeInput(all_map_options, i) {
        var map_ranges_div = document.createElement("div");

        var range = document.createElement("input");
        range.className = "map_range_input";

        var range_text = document.createElement("span");

        if (i === 0) {
            range_text.innerHTML = "&nbsp; next value and lower";
        } else if (i === all_map_options.colors.length - 1) {
            range.value = all_map_options.value_ranges[i - 1] || "";
            range_text.textContent = " and higher";
            map_ranges_div.appendChild(range);
        } else {
            range.value = all_map_options.value_ranges[i - 1] || "";
            range_text.textContent = " to..";
            map_ranges_div.appendChild(range);
        }

        map_ranges_div.appendChild(range_text);

        return map_ranges_div;
    },

    /** main function that loads the individual series area with color and range boxes **/
    populateForm: function populateForm(chart, all_chart_options, all_map_options) {

        var $display_series_options_inner_div = $("#display_series_options_inner_div");
        $display_series_options_inner_div.empty();

        //adds a color box - called in loop below
        var addColorBox = function addColorBox(chart, all_chart_options, all_map_options, color, i) {
            var map_color_box = update_map_individual_series.makeMapColorDiv(chart, all_chart_options, all_map_options, color, i);
            $display_series_options_inner_div.append(map_color_box);
        };

        var addRangeInput = function addRangeInput(all_map_options, i) {
            var map_range_input = update_map_individual_series.makeMapRangeInput(all_map_options, i);
            $display_series_options_inner_div.append(map_range_input);
        };

        $.each(all_map_options.colors, function (i) {

            if (all_map_options.is_colored_by_names) {
                // if coloring by names 
                if (i < all_map_options.value_ranges.length) {
                    //add series title
                    $display_series_options_inner_div.append($("<h5>" + all_map_options.value_ranges[i] + "</h5>"));

                    //add color box
                    addColorBox(chart, all_chart_options, all_map_options, this, i);
                }
            } else {
                //coloring by values
                addColorBox(chart, all_chart_options, all_map_options, this, i);
                addRangeInput(all_map_options, i);
            }

            //make clear float div
            var clear_div = utils_main.makeClearFloatDiv();
            $display_series_options_inner_div.append(clear_div);
        });

        $("#display_series_options_inner_div").show();
        update_map_individual_series.updateMapRange(chart, all_chart_options, all_map_options); //binds value input boxes
    },

    /** when range color boxes are changed, this is fired to change the colors in the map **/
    updateMapColor: function updateMapColor(chart, all_chart_options, all_map_options, i, jscolor) {
        var map_init = require("../initializers/maps/map_init.js");
        all_map_options.colors[i] = typeof jscolor === "string" ? jscolor : jscolor.toRGBString();
        map_init.loadNewMap(chart, all_chart_options, all_map_options, false); // false to not repopulate form
    },

    /** when custom value range input boxes are changed, this is fired **/
    updateMapRange: function updateMapRange(chart, all_chart_options, all_map_options) {
        var map_init = require("../initializers/maps/map_init.js");

        $(".map_range_input").keyup(function () {
            map_init.loadNewMap(chart, all_chart_options, all_map_options, false); //false for don't repopulate form
        });
    }

};

module.exports = update_map_individual_series;

},{"../initializers/maps/map_init.js":47,"../utils/utils_main.js":71}],24:[function(require,module,exports){
"use strict";

var map_colors_init = require("../initializers/maps/map_colors_init.js");
var map_init = require("../initializers/maps/map_init.js");

/**
Relates to the map color palettes. functions called from all_form_updates
@namespace
**/

var update_map_palettes = {

    /** when plus and minus buttons ("#add_map_color) are clicked, this is triggered **/
    changeAmount: function changeAmount(button) {

        $("#display_series_options_inner_div").empty(); //emptys the individual choices area so colors are redone.

        if (!button.hasClass("off")) {

            var mod = button.attr("id").replace("_map_color", "") == "add" ? 1 : -1;

            var new_palette_num = $(".map_color_palette_row.selected .map_color_palette_cell").length + mod;
            map_colors_init.loadMapColorPalettes(new_palette_num);

            $("#add_map_color, #minus_map_color").removeClass("off");
            if (new_palette_num > 22) {
                $("#add_map_color").addClass("off");
            } else if (new_palette_num < 3) {
                $("#minus_map_color").addClass("off");
            }
        }
    }

};

module.exports = update_map_palettes;

},{"../initializers/maps/map_colors_init.js":45,"../initializers/maps/map_init.js":47}],25:[function(require,module,exports){
"use strict";

/** when template are changed in the side area, these methods are called 
@namespace
*/
var update_template = {

    /** change the chart's RenderTo ID (the div ID that the chart is loaded into)  **/
    changeID: function changeID(new_ID, all_chart_options, all_map_options) {

        new_ID = $.trim(new_ID).replace(/^[^a-zA-Z_]+/g, "");
        if (!all_chart_options || all_map_options) {
            return new_ID;
        } else {
            all_chart_options.chart.renderTo = new_ID;
        }
    },

    /** change the chart height and witdh **/
    resize: function resize(val, dimension, chart, all_chart_options) {
        val = Number(val);
        if (!isNaN(val)) {
            $(".chart_display_area, .map_display_area").css(dimension, val + "px");
        }

        if (all_chart_options.chart.type !== "map") {
            chart.reflow();
            $("#chart_credits_text_textarea").trigger("input"); //fix credits loacation
        }
    },

    /** change the chart's inner margins **/
    margin: function margin(margins_arr, chart, all_chart_options) {

        $.each(chart.axes, function (i, e) {
            e.isDirty = true; //to tell axes to refresh
        });
        chart.margin = margins_arr;
        chart.redraw(false);

        all_chart_options.chart.margin = margins_arr;
    }
};

module.exports = update_template;

},{}],26:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");
var utils_forms = require("../utils/utils_forms");

/** when tooltip options are changed in the side area, these methods are called 
@namespace
*/
var update_tooltip = {

    /** gets a tooltip for box plot charts. Called from updateToolTip **/
    getBoxPlotTooltip: function getBoxPlotTooltip(chart, chart_type, all_chart_options) {

        all_chart_options.tooltip.formatter = function () {

            var options = this.series.chart.tooltip.options;
            var dollar = options.y_signs_arr[0];
            var percent = options.y_signs_arr[1];
            var decimals = options.y_decimals;
            var ranges = this.series.options.ranges;

            return "<b>" + this.x + "</b><br>" + ranges[4] + ": " + dollar + $(this.point.high).addCommas(decimals) + percent + "<br/>" + ranges[3] + ": " + dollar + $(this.point.q3).addCommas(decimals) + percent + "<br/>" + ranges[2] + ": " + dollar + $(this.point.median).addCommas(decimals) + percent + "<br/>" + ranges[1] + ": " + dollar + $(this.point.q1).addCommas(decimals) + percent + "<br/>" + ranges[0] + ": " + dollar + $(this.point.low).addCommas(decimals) + percent;
        };
    },

    /** gets a tooltip for bubble charts. Called from updateToolTip **/
    getBubbleTooltip: function getBubbleTooltip(chart, chart_type, all_chart_options) {

        all_chart_options.tooltip.formatter = function () {

            var options = this.series.chart.tooltip.options;

            var y_dollar = options.y_signs_arr[0];
            var y_percent = options.y_signs_arr[1];
            var x_dollar = options.x_signs_arr[0];
            var x_percent = options.x_signs_arr[1];
            var z_dollar = options.z_signs_arr[0];
            var z_percent = options.z_signs_arr[1];

            var y_decimals = options.y_decimals;
            var x_decimals = options.x_decimals;
            var z_decimals = options.z_decimals;

            var multiple = options.multiplier;
            var z_title = options.z_title;

            var y_axis_title = this.series.yAxis.axisTitle ? this.series.yAxis.axisTitle.textStr : "Y-Axis";
            var x_axis_title = this.series.xAxis.axisTitle ? this.series.xAxis.axisTitle.textStr : "X-Axis";

            var s = "<b>" + this.series.name + "</b><br>" + y_axis_title + ": <b>" + y_dollar + $(this.y * multiple).addCommas(y_decimals) + y_percent + "</b><br/>" + x_axis_title + ": <b>" + x_dollar + $(this.x * multiple).addCommas(x_decimals) + x_percent + "</b><br/>" + z_title + ": <b>" + z_dollar + $(this.point.z * multiple).addCommas(z_decimals) + z_percent + "</b>";

            //extra data//
            all_chart_options.series[this.series.index] ? s = all_chart_options.tooltip.addExtraData(all_chart_options.series[this.series.index].extra_data, this.point, s) : s = s;

            return s.replace(/\$-/g, "-$");
        };
    },

    /** gets a tooltip for drilldown charts. Called from updateToolTip**/
    getDrilldownTooltip: function getDrilldownTooltip(chart, chart_type, all_chart_options) {

        //if a bubble drilldown//
        if ($("#drilldown_type_select").val() === "bubble") {

            all_chart_options.tooltip.formatter = function () {

                var options = this.series.chart.tooltip.options;

                var y_dollar = options.y_signs_arr[0];
                var y_percent = options.y_signs_arr[1];
                var x_dollar = options.x_signs_arr[0];
                var x_percent = options.x_signs_arr[1];
                var z_dollar = options.z_signs_arr[0];
                var z_percent = options.z_signs_arr[1];

                var y_decimals = options.y_decimals;
                var x_decimals = options.x_decimals;
                var z_decimals = options.z_decimals;

                var multiple = options.multiplier;
                var z_title = options.z_title;

                var y_axis_title = this.series.yAxis.axisTitle ? this.series.yAxis.axisTitle.textStr : "Y-Axis";
                var x_axis_title = this.series.xAxis.axisTitle ? this.series.xAxis.axisTitle.textStr : "X-Axis";

                var s = "<b>" + this.series.name + "</b><br>" + this.key + "<br>" + y_axis_title + ": <b>" + y_dollar + $(this.y * multiple).addCommas(y_decimals) + y_percent + "</b><br/>" + x_axis_title + ": <b>" + x_dollar + $(this.x * multiple).addCommas(x_decimals) + x_percent + "</b><br/>" + z_title + ": <b>" + z_dollar + $(this.point.z * multiple).addCommas(z_decimals) + z_percent + "</b>";

                this.point.drilldown ? s = s + "<br>(Click to drill down)" : s = s;
                return s.replace(/\$-/g, "-$");
            };
        } else {

            all_chart_options.tooltip.formatter = function () {

                var options = this.series.chart.tooltip.options;

                var y_dollar = options.y_signs_arr[0];
                var y_percent = options.y_signs_arr[1];
                var y_decimals = options.y_decimals;
                var multiple = options.multiplier;

                var y_val = y_dollar + $(this.y * multiple).addCommas(y_decimals) + y_percent;
                var s = "<b>" + this.series.name + "</b><br>" + this.key + ": " + y_val;
                this.point.drilldown ? s = s + "<br>(Click to drill down)" : s = s;
                return s.replace(/\$-/g, "-$");
            };
        }
    },

    /** gets a tooltip for pie charts. Called from updateToolTip **/
    getPieTooltip: function getPieTooltip(chart, chart_type, all_chart_options) {

        all_chart_options.tooltip.formatter = function () {

            var options = this.series.chart.tooltip.options;
            var dollar = options.y_signs_arr[0];
            var percent = options.y_signs_arr[1];
            var decimals = options.y_decimals;

            return "<b>" + this.point.name + "</b>: " + dollar + $(this.y).addCommas(decimals) + percent;
        };
    },

    /** gets a tooltip for scatter charts. Called from updateToolTip**/
    getScatterTooltip: function getScatterTooltip(chart, chart_type, all_chart_options) {

        all_chart_options.tooltip.formatter = function () {

            var options = this.series.chart.tooltip.options;

            var y_dollar = options.y_signs_arr[0];
            var y_percent = options.y_signs_arr[1];
            var x_dollar = options.x_signs_arr[0];
            var x_percent = options.x_signs_arr[1];

            var y_decimals = options.y_decimals;
            var x_decimals = options.x_decimals;

            var multiple = options.multiplier;

            var y_axis_title = this.series.yAxis.axisTitle ? this.series.yAxis.axisTitle.textStr : "Y-Axis";
            var x_axis_title = this.series.xAxis.axisTitle ? this.series.xAxis.axisTitle.textStr : "X-Axis";

            var s = "<b>" + this.series.name + "</b><br>" + y_axis_title + ": <b>" + y_dollar + $(this.y * multiple).addCommas(y_decimals) + y_percent + "</b><br>" + x_axis_title + ": <b>" + x_dollar + $(this.x * multiple).addCommas(x_decimals) + x_percent + "</b>";

            //add extra data//
            all_chart_options.series[this.series.index] ? s = all_chart_options.tooltip.addExtraData(all_chart_options.series[this.series.index].extra_data, this.point, s) : s = s;

            return s.replace(/\$-/g, "-$");
        };
    },

    /** gets a tooltip for typical charts (line, area, bar etc). Called from updateToolTip**/
    getTypicalTooltip: function getTypicalTooltip(chart, is_shared, chart_type, all_chart_options) {

        if (is_shared) {
            //SHARED TOOLTIP

            all_chart_options.tooltip.shared = chart.tooltip.shared = true;

            all_chart_options.tooltip.formatter = function () {

                var shared_tooltip_arr = ["<b>" + this.x + "</b>"];

                $.each(this.points, function (i, e) {

                    var options = this.series.chart.tooltip.options;
                    var dollar = options.y_signs_arr[0];
                    var percent = options.y_signs_arr[1];
                    var decimals = options.y_decimals;
                    var multiple = options.multiplier;

                    if (all_chart_options.series[this.series.index].yAxis == 1) {
                        dollar = options.y_signs_arr_2[0];
                        percent = options.y_signs_arr_2[1];
                        decimals = options.y_decimals_2;
                        multiple = options.multiplier_2;
                    }

                    var index = e.series.index;

                    var y_val = this.point.high ? " High: " + dollar + $(this.point.high * multiple).addCommas(decimals) + percent + " | Low: " + dollar + $(this.point.low * multiple).addCommas(decimals) + percent : dollar + $(this.point.y * multiple).addCommas(decimals) + percent;

                    var s = this.series.name + ": " + y_val;

                    all_chart_options.series[index].extra_data ? s = all_chart_options.tooltip.addExtraData(all_chart_options.series[index].extra_data, this.point, s) : s = s;

                    shared_tooltip_arr.push(s);
                });

                return shared_tooltip_arr.join('<br/>').replace(/\$-/g, "-$");
            };
        } else {
            //NOT SHARED TOOLTIP

            all_chart_options.tooltip.formatter = function () {

                var options = this.series.chart.tooltip.options;
                var dollar = options.y_signs_arr[0];
                var percent = options.y_signs_arr[1];
                var decimals = options.y_decimals;
                var multiple = options.multiplier;

                if (all_chart_options.series[this.series.index].yAxis == 1) {

                    dollar = options.y_signs_arr_2[0];
                    percent = options.y_signs_arr_2[1];
                    decimals = options.y_decimals_2;
                    multiple = options.multiplier_2;
                }

                var y_val = this.point.high ? "High: " + dollar + $(this.point.high * multiple).addCommas(decimals) + percent + " | Low: " + dollar + $(this.point.low * multiple).addCommas(decimals) + percent : dollar + $(this.y * multiple).addCommas(decimals) + percent;

                var s = "<b>" + this.series.name + "</b><br>" + this.x + ": " + y_val;

                all_chart_options.series[this.series.index] ? s = all_chart_options.tooltip.addExtraData(all_chart_options.series[this.series.index].extra_data, this.point, s) : s = s;
                return s.replace(/\$-/g, "-$");
            };
        }
    },

    /** update tooltip - decide which kind of chart and call that get tooltip function **/
    updateToolTip: function updateToolTip(chart, all_chart_options) {

        //default to single point tooltip
        all_chart_options.tooltip.shared = chart.tooltip.shared = false;

        //extra data function
        all_chart_options.tooltip.addExtraData = function (extra_data, point, s) {

            if (extra_data && extra_data[0].name) {
                $.each(extra_data, function (i) {
                    if (extra_data[i].values[point.index]) {

                        s = s + "<br>" + extra_data[i].name + ": " + extra_data[i].values[point.index];
                    }
                });
            }
            return s;
        };

        //update chart and all_chart_options  options //
        var is_shared = utils_forms.getCheckBoxValue($("#chart_tooltip_shared_checkbox"));
        var chart_type = $("#chart_type_icons .selected").divVal();

        //x value signs
        var x_signs = $("#chart_tooltip_signs_x_select").val();
        var x_signs_arr = [x_signs === "$" ? "$" : "", x_signs === "%" ? "%" : ""];
        all_chart_options.tooltip.x_signs_arr = chart.tooltip.options.x_signs_arr = x_signs_arr;

        //z value signs
        var z_signs = $("#chart_tooltip_signs_z_select").val();
        var z_signs_arr = [z_signs === "$" ? "$" : "", z_signs === "%" ? "%" : ""];
        all_chart_options.tooltip.z_signs_arr = chart.tooltip.options.z_signs_arr = z_signs_arr;

        //y decimals
        all_chart_options.tooltip.y_decimals = chart.tooltip.options.y_decimals = Number($("#chart_tooltip_force_decimals_select").val());

        //y decimals (second y-axis)
        all_chart_options.tooltip.y_decimals_2 = chart.tooltip.options.y_decimals_2 = Number($("#chart_tooltip_force_decimals_select_2").val());

        //x decimals
        all_chart_options.tooltip.x_decimals = chart.tooltip.options.x_decimals = Number($("#chart_tooltip_force_decimals_x_select").val());

        //z decimals
        all_chart_options.tooltip.z_decimals = chart.tooltip.options.z_decimals = Number($("#chart_tooltip_force_decimals_z_select").val());

        //z (bubble size) title
        all_chart_options.tooltip.z_title = chart.tooltip.options.z_title = $("#chart_z_title_text_input").val() === "" ? "Z" : $("#chart_z_title_text_input").val();

        //mutiplier
        all_chart_options.tooltip.multiplier = chart.tooltip.options.multiplier = Number($("#chart_tooltip_y_multiple_select").val());

        //mutiplier (second y-axis)
        all_chart_options.tooltip.multiplier_2 = chart.tooltip.options.multiplier_2 = Number($("#chart_tooltip_y_multiple_select_2").val());

        function makeSignsArray(signs) {

            var signs_arr = [];

            switch (signs) {
                case "$":
                    signs_arr = ["$", ""];
                    break;
                case "%":
                    signs_arr = ["", "%"];
                    break;
                case "percentage point(s)":
                    signs_arr = ["", " percentage point(s)"];
                    break;
                default:
                    signs_arr = ["", ""];
            };

            return signs_arr;
        }

        //y value signs
        all_chart_options.tooltip.y_signs_arr = chart.tooltip.options.y_signs_arr = makeSignsArray($("#chart_tooltip_signs_select").val());

        //y value signs (second y-axis)
        all_chart_options.tooltip.y_signs_arr_2 = chart.tooltip.options.y_signs_arr_2 = makeSignsArray($("#chart_tooltip_signs_select_2").val());

        //IF A TYPICAL CHART
        if (["area", "line", "bar", "stacked_bar", "column", "stacked_column", "arearange", "columnrange"].indexOf(chart_type) > -1) {
            update_tooltip.getTypicalTooltip(chart, is_shared, chart_type, all_chart_options);
        }

        //IF A DRILLDOWN CHART
        else if (chart_type === "drilldown") {
                update_tooltip.getDrilldownTooltip(chart, chart_type, all_chart_options);
            }

            //IF A SCATTER CHART
            else if (chart_type === "scatter") {
                    update_tooltip.getScatterTooltip(chart, chart_type, all_chart_options);
                }

                //IF A BUBBLE CHART
                else if (chart_type === "bubble") {
                        update_tooltip.getBubbleTooltip(chart, chart_type, all_chart_options);
                    }

                    //IF A BOX PLOT CHART
                    else if (chart_type === "boxplot") {
                            update_tooltip.getBoxPlotTooltip(chart, chart_type, all_chart_options);
                        }

                        //IF A PIE CHART
                        else if (chart_type === "pie") {
                                update_tooltip.getPieTooltip(chart, chart_type, all_chart_options);
                            }

        if (!chart) {
            //for use in tooltip_init
            return all_chart_options.tooltip;
        }

        chart.tooltip.options.formatter = all_chart_options.tooltip.formatter;
    }

};

module.exports = update_tooltip;

},{"../utils/utils_forms":70,"../utils/utils_main.js":71}],27:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** when X-axis options are changed in the side area, these methods are called 
@namespace
*/

var update_x_axis = {

    /** update x-axis formatter **/
    /** update format when dollar / percent signs select is changed TODO!*/
    updateFormatter: function updateFormatter(only_numbers, add_commas, sign, x_axis_decimals, chart, all_chart_options) {

        var newXFormat = undefined;
        var x_axis_signs_arr = [sign === "$" ? "$" : "", sign === "%" ? "%" : ""];

        if (only_numbers) {
            newXFormat = function newXFormat() {
                //hide non-numbers if show only years box is checked//
                var num = this.value.match(/\d{4}/);
                return num;
            };
        }

        if (add_commas || sign != "no_signs" || x_axis_decimals != "null") {
            newXFormat = function newXFormat() {
                var s = x_axis_signs_arr[0] + $(Number(this.value)).addCommas(x_axis_decimals) + x_axis_signs_arr[1];

                return s.toString().replace(/\$-/g, "-$");
            };
        }

        //replacement_obj is used to replace stings with values when writing the output code in utils_main
        update_x_axis.replacement_obj = {
            x_axis_decimals: x_axis_decimals || null,
            x_axis_signs_arr: x_axis_signs_arr || ["", ""]
        };

        if (!chart) {
            // called when this is used in y_axis_init
            return newXFormat;
        }

        chart.xAxis[0].update({
            labels: {
                formatter: newXFormat
            }
        });

        all_chart_options.xAxis.labels.formatter = newXFormat;
    },

    /** update x-axis max */
    updateMax: function updateMax(new_max, chart, all_chart_options) {
        new_max = utils_main.checkForUndefined(new_max);
        if (!chart) {
            // called when this is used in x_axis_init
            return new_max;
        }

        chart.xAxis[0].update({
            max: new_max
        });

        all_chart_options.xAxis.max = new_max;
    },

    /** update y-axis min */
    updateMin: function updateMin(new_min, chart, all_chart_options) {
        new_min = utils_main.checkForUndefined(new_min);
        if (!chart) {
            // called when this is used in x_axis_init
            return new_min;
        }

        chart.xAxis[0].update({
            min: new_min
        });

        all_chart_options.xAxis.min = new_min;
    },

    /**makes x-axis MLR or standard style **/
    toggleMLRStyle: function toggleMLRStyle(is_checked, chart, all_chart_options) {

        //if using MLR styles
        if (is_checked) {
            all_chart_options.xAxis.tickPosition = "inside";
            all_chart_options.xAxis.tickColor = "#000";
        } else {
            //using standard styles
            all_chart_options.xAxis.tickPosition = "outside";
            all_chart_options.xAxis.tickColor = "#C0D0E0";
        }

        chart.xAxis[0].update({
            tickPosition: all_chart_options.xAxis.tickPosition,
            tickColor: all_chart_options.xAxis.tickColor
        });
    },

    /** update the x-axis title **/
    updateTitle: function updateTitle(new_title, chart, all_chart_options) {
        chart.xAxis[0].setTitle({
            text: new_title
        });

        all_chart_options.xAxis.title.text = new_title;
    },

    /** update the x-axis title indent (bar charts only) **/
    updateTitleIndent: function updateTitleIndent(new_indent, chart, all_chart_options) {
        chart.xAxis[0].setTitle({
            x: new_indent
        });

        all_chart_options.xAxis.title.x = new_indent;
    },

    /** update x axis tickmark interval **/
    updateTickmarkInterval: function updateTickmarkInterval(new_interval, chart, all_chart_options, categories, chart_type) {

        if (isNaN(Number(new_interval)) || Number(new_interval) === 0) {

            if (chart_type === "bar" || chart_type === "column" || chart_type === "boxplot") {
                new_interval = 1;
            } else if (!categories) {
                new_interval = null;
            } else {
                new_interval = categories.length * .2 > 1 ? Math.floor(categories.length * .2) : null;
            }
        };

        if (!chart) {
            // called when this is used in x_axis_init
            return new_interval;
        }

        //        if (new_interval > chart.xAxis[0].dataMax) {
        //           
        //            new_interval = (chart.xAxis[0].dataMax - chart.xAxis[0].dataMin) / 6;
        //        }

        chart.xAxis[0].update({
            tickInterval: new_interval
        });
        all_chart_options.xAxis.tickInterval = new_interval;
    }

};

module.exports = update_x_axis;

},{"../utils/utils_main.js":71}],28:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** when Y-axis options are changed in the side area, these methods are called 
@namespace
*/
var update_y_axis = {

    /** add second y-axis **/
    addSecondAxis: function addSecondAxis(chart, all_chart_options) {

        var sign = $("#chart_y_axis_signs_select_2").val();
        //update chart
        var second_axis = {
            id: 'second-y-axis',
            title: {
                text: $("#chart_y_axis_title_textarea_2").val(),
                align: "high",
                rotation: 0,
                offset: 20,
                margin: 6,
                style: {
                    color: '#000000',
                    fontFamily: 'Calibri, Arial, Helvetica, sans-serif',
                    fontWeight: 'normal',
                    fontSize: '13px'
                },
                x: $("#chart_y_axis_x_position_input_2").getValNumber(),
                y: -15
            },

            labels: {
                formatter: function formatter() {
                    return $(this.value).addCommas(0);
                },
                decimals: $("#chart_y_axis_decimals_select_2").val(),
                dividend: 1,
                signs_arr: [sign === "$" ? "$" : "", sign === "%" ? "%" : ""]
            },

            opposite: true,
            lineColor: 'gray',
            lineWidth: 1,
            max: update_y_axis.updateMax(Number($("#chart_y_axis_max_input_2").val())),
            min: update_y_axis.updateMin(Number($("#chart_y_axis_min_input_2").val())),
            tickInterval: update_y_axis.updateTickmarkInterval(Number($("#chart_y_axis_tickmark_interval_input_2").val())),
            tickmarkPlacement: 'on',
            tickPosition: 'outside',
            tickColor: '#C0D0E0',
            tickWidth: 1

        };

        chart.addAxis(second_axis);

        //update options
        all_chart_options.yAxis = [all_chart_options.yAxis, second_axis];
    },

    /** remove second y-axis and move each series to first axis**/
    removeSecondAxis: function removeSecondAxis(chart, all_chart_options) {

        if (chart.get('second-y-axis')) {

            $(chart.series).each(function (i, series) {
                series.update({
                    yAxis: 0
                });
            });

            $(all_chart_options.series).each(function (i, series) {
                series.yAxis = 0;
            });

            chart.get('second-y-axis').remove();
            all_chart_options.yAxis = all_chart_options.yAxis[0];
        }
    },

    /** update format when dollar / percent signs select is changed */
    updateFormatter: function updateFormatter(sign, y_axis_decimals, y_axis_dividend, chart, all_chart_options, axis_number) {

        //make signs array from chosen sign
        var y_axis_signs_arr = [sign === "$" ? "$" : "", sign === "%" ? "%" : ""];

        //set y-axis index (for secondary axes)
        var index = axis_number == "2" ? 1 : 0;

        //update options
        var y_axis = all_chart_options.yAxis[0] ? all_chart_options.yAxis[index] : all_chart_options.yAxis;

        y_axis.labels.signs_arr = y_axis_signs_arr;
        y_axis.labels.decimals = y_axis_decimals;
        y_axis.labels.dividend = y_axis_dividend;

        //update chart
        chart.yAxis[index].update({
            labels: {
                signs_arr: y_axis_signs_arr,
                decimals: y_axis_decimals,
                dividend: y_axis_dividend
            }
        });

        //create formatter
        if (y_axis_decimals !== "null") {
            //if decimals are not null  

            var yAxisFormat = function yAxisFormat() {
                var decimals = this.axis.options.labels.decimals;
                var signs_arr = this.axis.options.labels.signs_arr;
                var dividend = this.axis.options.labels.dividend;

                var s = Highcharts.numberFormat(this.value / dividend, decimals, ".", ",");
                s = signs_arr[0] + s + signs_arr[1];
                return s.replace(/\$-/g, "-$");
            };
        } else {
            //if decimals are null
            var yAxisFormat = function yAxisFormat() {
                var decimals = this.axis.options.labels.decimals;
                var signs_arr = this.axis.options.labels.signs_arr;
                var dividend = this.axis.options.labels.dividend;

                var s = this.value / dividend == parseInt(this.value / dividend) ? Highcharts.numberFormat(this.value / dividend, 0, ".", ",") : Highcharts.numberFormat(this.value / dividend, 1, ".", ",");
                s = signs_arr[0] + s + signs_arr[1];
                return s.replace(/\$-/g, "-$");
            };
        }

        // called when this is used in y_axis_init
        if (!chart) {
            return yAxisFormat;
        }

        //update chart formatter
        chart.yAxis[index].update({
            labels: {
                formatter: yAxisFormat
            }
        });

        //update chart_options formatter
        if (all_chart_options.yAxis.labels) {
            all_chart_options.yAxis.labels.formatter = yAxisFormat;
        } else {
            //dual axis
            all_chart_options.yAxis[index].labels.formatter = yAxisFormat;
        }
    },

    /** update if y-axis is log */
    updateIsLog: function updateIsLog(val, chart, all_chart_options) {

        var type = val === true ? "logarithmic" : "linear";
        if (!chart) {
            // called when this is used in y_axis_init
            return type;
        }

        chart.yAxis[0].update({
            type: type
        });
        all_chart_options.yAxis.type = type;
    },

    /** update if y axis labels are on opposite side */
    updateIsOpposite: function updateIsOpposite(val, chart, all_chart_options) {
        chart.yAxis[0].update({
            opposite: val
        });
        all_chart_options.yAxis.opposite = val;

        //update y axis title position
        $("#chart_y_axis_x_position_input").val($("#chart_y_axis_x_position_input").val() * -1).keyup();
    },

    /** update y-axis max */
    updateMax: function updateMax(new_max, chart, all_chart_options, axis_number) {

        var index = axis_number == "2" ? 1 : 0;

        new_max = utils_main.checkForUndefined(new_max);
        if (!chart) {
            // called when this is used in y_axis_init
            return new_max;
        }

        chart.yAxis[index].update({
            max: new_max
        });

        if (Array.isArray(all_chart_options.yAxis)) {
            all_chart_options.yAxis[index].max = new_max;
        } else {
            all_chart_options.yAxis.max = new_max;
        }
    },

    /** update y-axis min */
    updateMin: function updateMin(new_min, chart, all_chart_options, axis_number) {

        var index = axis_number == "2" ? 1 : 0;

        new_min = utils_main.checkForUndefined(new_min);
        if (!chart) {
            // called when this is used in y_axis_init
            return new_min;
        }

        chart.yAxis[index].update({
            min: new_min
        });

        if (Array.isArray(all_chart_options.yAxis)) {
            all_chart_options.yAxis[index].min = new_max;
        } else {
            all_chart_options.yAxis.min = new_min;
        }
    },

    /** update the y axis title */
    updateTitle: function updateTitle(new_title, chart, all_chart_options, axis_number) {

        var index = axis_number == "2" ? 1 : 0;

        chart.yAxis[index].setTitle({
            text: new_title
        });

        if (all_chart_options.yAxis.title) {
            all_chart_options.yAxis.title.text = new_title;
        } else {
            all_chart_options.yAxis[index].title.text = new_title;
        }
    },

    /** update y axis x-position (title.x) */
    updateXPosition: function updateXPosition(new_x, chart, all_chart_options, axis_number) {

        var index = axis_number == "2" ? 1 : 0;

        new_x = utils_main.checkForUndefined(new_x);

        chart.yAxis[index].setTitle({
            x: new_x
        });

        if (all_chart_options.yAxis.title) {
            all_chart_options.yAxis.title.x = new_x;
        } else {
            all_chart_options.yAxis[index].title.x = new_x;
        }
    },

    /** update y axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(new_interval, chart, all_chart_options, axis_number) {

        var index = axis_number == "2" ? 1 : 0;

        new_interval = utils_main.checkForUndefined(new_interval);

        if (!chart) {
            // called when this is used in y_axis_init
            return new_interval;
        }

        if (new_interval > chart.yAxis[index].dataMax) {
            new_interval = chart.yAxis[index].dataMax;
        }

        chart.yAxis[index].update({
            tickInterval: new_interval

        });

        var y_axis = all_chart_options.yAxis[0] ? all_chart_options.yAxis[index] : all_chart_options.yAxis;

        y_axis.tickInterval = new_interval;
    }

};

module.exports = update_y_axis;

},{"../utils/utils_main.js":71}],29:[function(require,module,exports){
"use strict";

var AllChartOptions = require("../../constructors/charts/all_chart_options.js"),
    chartInit = require("./chart_init.js"),
    colorsInit = require("./colors_init.js"),
    creditsInit = require("./credits_init.js"),
    exportingInit = require("./exporting_init.js"),
    legendInit = require("./legend_init.js"),
    plotOptionsInit = require("./plot_options_init.js"),
    seriesInit = require("./series_init.js"),
    subtitleInit = require("./subtitle_init.js"),
    titleInit = require("./title_init.js"),
    tooltipInit = require("./tooltip_init.js"),
    xAxisInit = require("./x_axis_init.js"),
    yAxisInit = require("./y_axis_init.js"),
    parseTableInput = require("../../parsers/parse_table_input.js"),
    utils_forms = require("../../utils/utils_forms.js");

/** create and return an instance of all_chart_options 
@module
**/
var allChartOptionsInit = function allChartOptionsInit(chart_type) {

    if (chart_type === "map") {
        chart_type = "line"; //create an initial line chart just to load the options, even if map is selected (will be clicked later in app.js)
    }

    var load_series_from = $("#table_input_load_series_from_icons .selected").divVal();
    var legend_toggle_enabled = utils_forms.getCheckBoxValue($("#legend_make_toggle_checkbox"));
    var input = $("#table_input_textarea").val();
    var colors = colorsInit();

    var parsed_table_output = parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, colors) || {};

    //get options from individual inits
    var options = {
        chart: chartInit(chart_type),
        credits: creditsInit(),
        colors: colors,
        exporting: exportingInit(),
        legend: legendInit(chart_type),
        plotOptions: plotOptionsInit(chart_type, legend_toggle_enabled),
        series: parsed_table_output.series,
        drilldown: parsed_table_output.drilldown || {},
        subtitle: subtitleInit(),
        title: titleInit(parsed_table_output.title_text),
        tooltip: tooltipInit(),
        xAxis: xAxisInit(parsed_table_output.x_axis_categories, chart_type),
        yAxis: yAxisInit(chart_type)

    };

    var all_chart_options = new AllChartOptions(options);

    return all_chart_options;
};

module.exports = allChartOptionsInit;

},{"../../constructors/charts/all_chart_options.js":2,"../../parsers/parse_table_input.js":64,"../../utils/utils_forms.js":70,"./chart_init.js":31,"./colors_init.js":32,"./credits_init.js":33,"./exporting_init.js":34,"./legend_init.js":35,"./plot_options_init.js":36,"./series_init.js":37,"./subtitle_init.js":38,"./title_init.js":39,"./tooltip_init.js":40,"./x_axis_init.js":41,"./y_axis_init.js":42}],30:[function(require,module,exports){
"use strict";

/** Has functions for setting up a chart animation (buttons, slider, etc)
@namespace
**/

var chart_animation_init = {

    /** Creates and returns a div containing a slider and play and pause buttons to animated the map  **/
    getAnimationDiv: function getAnimationDiv() {

        //outer div
        var chart_animation_div = document.createElement("div");
        chart_animation_div.style = "position: absolute; top: 28px; margin-left: 20px; z-index: 500; margin-bottom: -6px; -webkit-user-select: none;";

        //play button
        var play_button = document.createElement("div");
        play_button.style = "float: left; margin-right: 10px; color: #337ab7; font-size: 24px; cursor: pointer; position: relative; top: 4px;";
        play_button.innerHTML = "▶";
        play_button.className = "chart_play_button";

        //slider
        var chart_slider = document.createElement("input");
        chart_slider.setAttribute("type", "range");
        chart_slider.setAttribute("min", "0");
        chart_slider.setAttribute("max", "20");
        chart_slider.setAttribute("value", "0");
        chart_slider.style = "float: left; margin-right: 10px; color: #337ab7; font-size: 18px; cursor: pointer; width: 350px; position: relative; top: 12px;";
        chart_slider.className = "chart_slider";

        //animation title (i.e. date shown)
        var animation_title = document.createElement("h3");
        animation_title.textContent = "test";
        animation_title.style = "margin: 0px; font-family: sans-serif; font-weight: 200; color: #337ab7; font-size: 18px; position: relative; top: 8px; float: left;";
        animation_title.className = "animation_title";

        //put it all together in the div
        chart_animation_div.appendChild(play_button);

        chart_animation_div.appendChild(chart_slider);
        chart_animation_div.appendChild(animation_title);

        return chart_animation_div;
    }

};

module.exports = chart_animation_init;

},{}],31:[function(require,module,exports){
"use strict";

var ChartOptions = require("../../constructors/charts/chart.js");
var update_template = require("../../form_updates/update_template.js");
//var update_chart_options = require("../../form_updates/update_chart_options.js");

/** Initializer for "chart" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var chartInit = function chartInit(chart_type, chart) {

    if (chart_type === "drilldown") {
        chart_type = "column";
    }

    //load options from user inputs
    var options = {
        events: {
            redraw: function redraw() {
                if (chart) {
                    $.each(chart.series, function (i, serie) {
                        $.each(serie.data, function (j, point) {
                            if (point.options.cursor === "pointer") {
                                point.graphic.attr({
                                    cursor: 'pointer'
                                });
                            }
                        });
                    });
                }
            }

        },
        margin: [Number($("#top_margin_textinput").val()), Number($("#right_margin_textinput").val()), Number($("#bottom_margin_textinput").val()), Number($("#left_margin_textinput").val())],
        renderTo: update_template.changeID($("#chart_id_textinput").val()),
        type: chart_type,
        inverted: chart_type == "boxplot" ? true : false
    };

    var chart_options = new ChartOptions(options);
    return chart_options;
};

module.exports = chartInit;

},{"../../constructors/charts/chart.js":3,"../../form_updates/update_template.js":25}],32:[function(require,module,exports){
"use strict";

/** Initializer for "colors" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var colorsInit = function colorsInit() {
    var color_arr = [];
    $("#color_palettes .selected .color_palette_cell").each(function () {
        color_arr.push($(this).css("background-color"));
    });

    if (color_arr.length < 1) {
        color_arr = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
    }

    return color_arr;
};

module.exports = colorsInit;

},{}],33:[function(require,module,exports){
"use strict";

var Credits = require("../../constructors/charts/credits.js");

/** Initializer for "credits" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var creditsInit = function creditsInit() {

    var credits_text = $("#chart_credits_text_textarea").val().replace(/\n/g, "<br>");
    /** calculate vertical y position of credits, depending on how many lines it has 
    @param text {string} the credits text, originally from #chart_credits_text_textarea
    */
    var calculateCreditsPosition = function calculateCreditsPosition(text) {
        var new_y_pos = text.split("<br>").length * -11;
        return new_y_pos;
    };

    //load options from user inputs
    var options = {
        text: credits_text,
        position: {
            y: calculateCreditsPosition(credits_text)
        }
    };

    var credits = new Credits(options);
    return credits;
};

module.exports = creditsInit;

},{"../../constructors/charts/credits.js":4}],34:[function(require,module,exports){
"use strict";

var Exporting = require("../../constructors/charts/exporting.js");

/** Initializer for "exporting" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var exportingInit = function exportingInit() {

    //load options from user inputs
    var options = {};

    var exporting = new Exporting(options);
    return exporting;
};

module.exports = exportingInit;

},{"../../constructors/charts/exporting.js":5}],35:[function(require,module,exports){
"use strict";

var Legend = require("../../constructors/charts/legend.js");
var utils_forms = require("../../utils/utils_forms.js");
var utils_main = require("../../utils/utils_main.js");

/** Initializer for "legend" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var legendInit = function legendInit(chart_type) {

    var getLegendLayout = function getLegendLayout() {
        var legend_layout_val = $("#legend_layout_select").val();
        return legend_layout_val !== "no_legend" ? legend_layout_val : undefined;
    };

    //load options from user inputs
    var options = {
        layout: getLegendLayout(),
        x: Number($("#legend_placement_x").val()),
        y: Number($("#legend_placement_y").val()),
        reversed: utils_forms.getCheckBoxValue($("#legend_reverse_layout_checkbox")),
        itemWidth: utils_main.checkForUndefined($("#legend_item_width_input").val()),
        itemHoverStyle: {
            cursor: chart_type === "drilldown" ? "default" : "pointer"
        },
        itemStyle: {
            cursor: chart_type === "drilldown" ? "default" : "pointer"
        },
        width: utils_main.checkForUndefined($("#legend_width_input").val())

    };

    var legend = new Legend(options);

    return legend;
};

module.exports = legendInit;

},{"../../constructors/charts/legend.js":6,"../../utils/utils_forms.js":70,"../../utils/utils_main.js":71}],36:[function(require,module,exports){
"use strict";

var PlotOptions = require("../../constructors/charts/plot_options.js");
var update_legend = require("../../form_updates/update_legend.js");
var utils_forms = require("../../utils/utils_forms.js");

/** Initializer for "plotOptions" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var plotOptionsInit = function plotOptionsInit(chart_type, legend_toggle_enabled) {

    //load options from user inputs
    var options = {
        series: {
            events: {
                // when one legend item is clicked, the others hide
                legendItemClick: update_legend.updateToggle(legend_toggle_enabled, null, null, chart_type)

            },

            dataLabels: {
                enabled: utils_forms.getCheckBoxValue($("#chart_show_data_labels_checkbox"))
            },

            lineWidth: 1.5,
            marker: {
                enabled: false,
                states: {
                    hover: {
                        enabled: true,
                        radius: 5
                    }
                }
            },

            states: {
                hover: {
                    lineWidth: 4
                }
            }

        }

    };

    /* unique chart options (choosing to keep these with every chart so I don't have to reload them with individual series when chart types are updated) */

    //bar or column options
    options.series.groupPadding = $("#group_padding_input").getValNumber() || 0.2;
    options.series.pointPadding = $("#point_padding_input").getValNumber() || 0.1;
    options.series.pointPlacement = null;
    options.series.stacking = null;
    options.series.minPointLength = 2;

    //just for bubble charts
    //  options.series.maxSize = 90;
    options.series.minSize = 4;
    options.series.sizeBy = 'width'; //instead of 'area', seems more accurate

    var plotOptions = new PlotOptions(options);
    return plotOptions;
};

module.exports = plotOptionsInit;

},{"../../constructors/charts/plot_options.js":7,"../../form_updates/update_legend.js":22,"../../utils/utils_forms.js":70}],37:[function(require,module,exports){
"use strict";

var Series = require("../../constructors/charts/series.js");

/** Initializer for "series" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var seriesInit = function seriesInit(series) {

    //load options from user inputs
    var options = series;

    var series = new Series(options);

    console.log(series);
    return series.series;
};

module.exports = seriesInit;

},{"../../constructors/charts/series.js":8}],38:[function(require,module,exports){
"use strict";

var Subtitle = require("../../constructors/charts/subtitle.js");

/** Initializer for "subtitle" options section of all_chart_options. Creates and returns a new instance
@module
*/

var subtitleInit = function subtitleInit() {

    //load options from user inputs
    var options = {
        text: $("#chart_subtitle_textarea").val()
    };

    var subtitle = new Subtitle(options);
    return subtitle;
};

module.exports = subtitleInit;

},{"../../constructors/charts/subtitle.js":9}],39:[function(require,module,exports){
"use strict";

var Title = require("../../constructors/charts/title.js");

/** Initializer for "title" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var titleInit = function titleInit(title_text) {

    //load options from user inputs
    var options = {
        text: title_text
    };

    var title = new Title(options);
    return title;
};

module.exports = titleInit;

},{"../../constructors/charts/title.js":10}],40:[function(require,module,exports){
"use strict";

var Tooltip = require("../../constructors/charts/tooltip.js");
var utils_forms = require("../../utils/utils_forms.js");

/** Initializer for "tooltip" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var tooltipInit = function tooltipInit() {

    //load options from user inputs
    var options = {

        formatter: undefined ///formatter is created with update_tooltip as a callback (needs chart to exist first)

    };

    var tooltip = new Tooltip(options);
    return tooltip;
};

module.exports = tooltipInit;

},{"../../constructors/charts/tooltip.js":11,"../../utils/utils_forms.js":70}],41:[function(require,module,exports){
"use strict";

var update_x_axis = require("../../form_updates/update_x_axis.js");
var XAxis = require("../../constructors/charts/x_axis.js");
var utils_forms = require("../../utils/utils_forms.js");
var utils_main = require("../../utils/utils_main.js");

/** Initializer for "xAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var xAxisInit = function xAxisInit(categories, chart_type) {

    var only_numbers = utils_forms.getCheckBoxValue($("#chart_x_axis_show_only_years"));
    var add_commas = utils_forms.getCheckBoxValue($("#chart_x_axis_add_commas"));
    var sign = $("#chart_x_axis_signs_select").val();
    var decimals = $("#chart_x_axis_decimals_select").val();

    //load options from user inputs
    var options = {

        categories: chart_type === "drilldown" ? null : categories || undefined,
        only_numbers: only_numbers,
        add_commas: add_commas,
        sign: sign,
        decimals: decimals,
        labels: {
            formatter: update_x_axis.updateFormatter(only_numbers, add_commas, sign, decimals)
        },

        max: update_x_axis.updateMax(Number($("#chart_x_axis_max_input").val())),
        min: update_x_axis.updateMin(Number($("#chart_x_axis_min_input").val())),

        plotLines: [{
            "value": 0,
            "color": "#c0c0c0",
            "dashStyle": "solid",
            "width": chart_type === "scatter" || chart_type === "bubble" ? 1 : 0
        }],

        startOnTick: chart_type === "bubble" || chart_type === "scatter" ? true : false,

        title: {
            align: chart_type === "bar" || chart_type === "stacked_bar" ? "high" : "middle",
            text: $("#chart_x_axis_title_textarea").val(),
            x: chart_type === "bar" || chart_type === "stacked_bar" ? Number($("#chart_x_axis_x_position_input").val()) : 0
        },
        tickInterval: update_x_axis.updateTickmarkInterval(Number($("#chart_x_axis_tickmark_interval_input").val()), null, null, categories, chart_type),
        type: chart_type === "drilldown" ? "category" : "linear"

    };

    var xAxis = new XAxis(options);
    return xAxis;
};

module.exports = xAxisInit;

},{"../../constructors/charts/x_axis.js":12,"../../form_updates/update_x_axis.js":27,"../../utils/utils_forms.js":70,"../../utils/utils_main.js":71}],42:[function(require,module,exports){
"use strict";

var utils_main = require("../../utils/utils_main.js");
var YAxis = require("../../constructors/charts/y_axis.js");
var update_y_axis = require("../../form_updates/update_y_axis.js");
var utils_forms = require("../../utils/utils_forms.js");

/** Initializer for "yAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var yAxisInit = function yAxisInit(chart_type) {

    /** load options from user inputs */
    var options = {

        labels: {
            formatter: undefined //fomatter is made on call back in all_form_updates.js
        },

        max: update_y_axis.updateMax(Number($("#chart_y_axis_max_input").val())),
        min: update_y_axis.updateMin(Number($("#chart_y_axis_min_input").val())),
        type: update_y_axis.updateIsLog(utils_forms.getCheckBoxValue($("#chart_y_axis_log_checkbox"))),
        opposite: utils_forms.getCheckBoxValue($("#chart_y_axis_opposite_checkbox")),
        tickInterval: update_y_axis.updateTickmarkInterval(Number($("#chart_y_axis_tickmark_interval_input").val())),

        title: {
            text: $("#chart_y_axis_title_textarea").val(),
            align: chart_type === "bar" ? "middle" : "high",
            x: chart_type === "bar" || chart_type === "stacked_bar" ? 0 : Number($("#chart_y_axis_x_position_input").val()),
            y: chart_type === "bar" || chart_type === "stacked_bar" ? 8 : -20
        }

    };

    var yAxis = new YAxis(options);
    return yAxis;
};

module.exports = yAxisInit;

},{"../../constructors/charts/y_axis.js":13,"../../form_updates/update_y_axis.js":28,"../../utils/utils_forms.js":70,"../../utils/utils_main.js":71}],43:[function(require,module,exports){
"use strict";

/** Called from map_init.convertMapOptionsToSVG if user selected animated map. 
@module
**/

var map_animation_init = {

    /** Creates and returns a div containing a slider and play and pause buttons to animated the map  **/
    getAnimationDiv: function getAnimationDiv(all_map_options) {

        //outer div
        var map_animation_div = document.createElement("div");
        $(map_animation_div).css({
            position: "absolute",
            "margin-left": "20px",
            "z-index": "500",
            "margin-bottom": "-6px",
            "-webkit-user-select": "none",
            top: "55px",
            zIndex: 500
        });

        //play button
        var play_button = document.createElement("div");
        $(play_button).css({
            float: "left",
            "margin-right": "10px",
            color: "#337ab7",
            "font-size": "32px",
            cursor: "pointer",
            position: "relative",
            top: "-6px"
        }).html("▶").addClass("map_play_button");

        //step backward button
        var step_backward_button = document.createElement("div");
        $(step_backward_button).css({
            float: "left",
            "margin-right": "10px",
            color: "#337ab7",
            "font-size": "26px",
            cursor: "pointer",
            position: "relative",
            top: "-5px"
        }).html("&lt").addClass("map_step_backward_button");

        //step forward button
        var step_forward_button = document.createElement("div");
        $(step_forward_button).css({
            float: "left",
            "margin-right": "10px",
            "margin-left": "-2px",
            color: "#337ab7",
            "font-size": "26px",
            cursor: "pointer",
            position: "relative",
            top: "-5px"
        }).html("&gt").addClass("map_step_forward_button");

        //slider
        var map_slider = document.createElement("input");
        $(map_slider).attr({
            "type": "range",
            "min": "0",
            "max": all_map_options.animated_value_titles.length - 1,
            "value": all_map_options.animation_start_at_end ? all_map_options.animated_value_titles.length - 1 : 0
        }).css({
            float: "left",
            "margin-right": "10px",
            color: "#337ab7",
            "font-size": "26px",
            cursor: "pointer",
            width: all_map_options.sized_for_spotlight ? "310px" : "400px",
            position: "relative",
            top: "10px"
        }).addClass("map_slider");

        //animation title (i.e. date shown)
        var animation_title = document.createElement("span");
        $(animation_title).text(all_map_options.animated_value_titles[0]).css({
            margin: "0px",
            "font-family": "sans-serif",
            "font-weight": "200",
            color: "#337ab7",
            "font-size": "24px",
            position: "relative",
            top: "5px",
            float: "left"
        }).addClass("animation_title");

        //put it all together in the div
        $(map_animation_div).append(play_button, step_backward_button, step_forward_button, map_slider, animation_title);

        //adjust legend placement
        //        $("#legend_placement_y").val(70);
        //        all_map_options.legend.y = 70;

        return map_animation_div;
    },

    /** sets up the play, pause, and slider functionality in animated maps **/
    setUpMapAnimation: function setUpMapAnimation(all_map_options, map_display_area) {
        //when slider changes, change the values displayed in the map and the animation title
        $(".map_slider", map_display_area).on("input", function () {
            var slider_val = $(this).val();

            //update animated title
            $(".animation_title", map_display_area).text(all_map_options.animated_value_titles[slider_val]);

            //reasign map values
            $("path[loc_name], circle[loc_name]", map_display_area).each(function () {
                var $this = $(this);
                var this_animated_vals = $this.attr("animated_vals");
                var new_val = this_animated_vals ? this_animated_vals.split(";")[slider_val] : "N/A";
                //assign new loc_value
                $this.attr("loc_value", new_val);

                var new_fill = ""; //new color to be assigned
                //then recolor

                for (var i = 0; i < all_map_options.value_ranges.length; i++) {
                    //for length of value_ranges array, assign colors
                    if (new_val > all_map_options.value_ranges[i]) {
                        new_fill = all_map_options.colors[i + 1];
                    }
                }

                if (new_val <= all_map_options.value_ranges[0]) {
                    new_fill = all_map_options.colors[0];
                }

                if (new_val === null || new_val === "N/A") {
                    new_fill = "#f7f7f7";
                }

                //if a circle, resize and give opacity

                if ($this.attr("r") && all_map_options.map_type !== "state") {

                    var circle_sized_by = all_map_options.circle_sized_by;
                    var this_area;
                    var this_r;

                    if (new_val == "N/A") {
                        this_r = 0;
                    } else if (circle_sized_by === "main_values") {
                        this_area = new_val ? Math.abs(new_val) || 0 : 0;
                    } else if (circle_sized_by === "extra_data_1") {
                        this_area = this_area = this.extra_vals[0] ? Math.abs(this.extra_vals[0]) || 0 : 0;
                    } else if (circle_sized_by === "same_size") {
                        this_area = 400;
                    }

                    this_r = Math.sqrt(this_area / Math.PI) * all_map_options.circle_size_multiple;

                    if (isNaN(this_r)) {
                        this_r = 0;
                    }

                    $this.attr("r", this_r);

                    $this.attr("fill", new_fill.replace(')', ', 0.75)').replace('rgb', 'rgba'));
                } else {
                    //for paths, no resize or opacity
                    $this.attr("fill", new_fill);
                }
            }); // end path / circle loop
        });

        var playing; //becomes playing function that moves slider value to the right

        //move the slider a step in a direction. if at max, make 0
        var moveSlider = function moveSlider(num) {
            var $map_slider = $(".map_slider", map_display_area);

            $map_slider.val($map_slider.val() === $map_slider.attr("max") ? 0 : Number($map_slider.val()) + num).trigger("input");
        };

        //play function, run when play button is clicked
        var playMap = function playMap(map_display_area) {
            //assign (and start) playing interval to playing var
            playing = setInterval(function (map_display_area) {
                //increase slider value by one unless at max. If at max, make 0
                moveSlider(1);
            }, all_map_options.animation_delay);
        };

        //pause function, run when pause button is clicked
        var pauseMap = function pauseMap() {
            clearInterval(playing);
        };

        //style buttons
        $(".map_play_button, .map_step_backward_button, .map_step_forward_button", map_display_area).hover(function () {
            $(this).css("color", "#b73438"); //red
        }, function () {
            $(this).css("color", "#337ab7"); //blue
        });

        //play / pause button click
        $(".map_play_button", map_display_area).click(function () {
            var $this = $(this);

            $this.toggleClass("playing");

            if ($this.hasClass("playing")) {
                //if user clicked it to play, start animation, and show pause button
                $this.html("&nbsp;||");

                playMap(map_display_area);
            } else {
                //if user click it to pause, show play button and stop animation
                $this.html("▶");

                pauseMap(map_display_area);
            }
        });

        //step forward button click
        $(".map_step_forward_button", map_display_area).click(function () {
            moveSlider(1);
        });

        //step back button click
        $(".map_step_backward_button", map_display_area).click(function () {
            moveSlider(-1);
        });

        $(".map_slider").trigger("input");
    }

};

module.exports = map_animation_init;

},{}],44:[function(require,module,exports){
"use strict";

var utils_main = require("../../utils/utils_main.js");

/** Given an array of map circles, this sorts them by value and decides what radius they should have 
@module
**/

var map_circle_sizes_init = {

    /** Given an array of map circles, this sorts them by value and decides what radius they should have  **/
    getCircleSizes: function getCircleSizes(all_map_options) {

        var circle_values_arr = utils_main.valueSort(all_map_options.areas);
        //get multiple and adjust for big numbers
        all_map_options.circle_size_multiple = $("#map_circle_size_range").val();
        if (circle_values_arr[circle_values_arr.length - 1] > 100) {
            all_map_options.circle_size_multiple = all_map_options.circle_size_multiple * .05;
        }

        //assign R value to each circle area

        var circle_sized_by = all_map_options.circle_sized_by;

        $(all_map_options.areas).each(function () {

            if (this.value != undefined) {

                var this_area;

                if (circle_sized_by === "main_values") {
                    this_area = this.value ? Math.abs(this.value) || 1 : 1;
                } else if (circle_sized_by === "extra_data_1") {
                    this_area = this_area = this.extra_vals[0] ? Math.abs(this.extra_vals[0]) || 1 : 1;;
                } else if (circle_sized_by === "same_size") {
                    this_area = 400;
                }

                this.r = Math.sqrt(this_area / Math.PI) * all_map_options.circle_size_multiple;
            } else {
                this.r = 0;
            }
        });

        map_circle_sizes_init.sortCircles(all_map_options.areas);
    },

    /** sorts circles so that smaller ones will appear on top in the map **/
    sortCircles: function sortCircles(areas) {
        areas.sort(function (a, b) {

            //if no radius (ie a path, make order a high number so it gets stacked near the bottom)
            a.order = a.r ? a.r : 100000000000;
            b.order = b.r ? b.r : 100000000000;

            return b.order - a.order;
        });
    }

};

module.exports = map_circle_sizes_init;

},{"../../utils/utils_main.js":71}],45:[function(require,module,exports){
"use strict";

var utils_main = require("../../utils/utils_main.js");
var utils_forms = require("../../utils/utils_forms.js");
/** Given an array of map areas, this sorts them by value and decides which colors they should have 
@module
**/

var map_colors_init = {

    cached_map_options: {},

    /** colors existing svg paths - used when chart is updated  **/
    colorPaths: function colorPaths(all_map_options) {

        $.each(all_map_options.areas, function () {

            $('.map_display_area path[loc_name="' + this.loc_name + '"], .map_display_area circle[loc_name="' + this.loc_name + '"]').attr("fill", this.color);
        });
    },

    /** assigns colors to all_map_options.areas depending on where their values are on a range**/
    getBoundaryMapColors: function getBoundaryMapColors(all_map_options, colors) {

        console.log("map_colors_init.getBoundaryMapColors");

        //used cached if all_map_options not passed
        all_map_options = all_map_options || map_colors_init.cached_map_options;

        //get all values in order
        var values_arr = utils_main.valueSort(all_map_options.areas);
        var value_ranges = []; //to be used to color areas

        //if coloring by value, calculate ranges
        if (!all_map_options.is_colored_by_names) {

            //use custom input if available
            if ($(".map_range_input").length > 0) {
                //grab from custom if available

                $.each($(".map_range_input"), function () {
                    value_ranges.push(Number($(this).val()));
                });
            } else {
                //else calculate

                var fraction = 1 / all_map_options.ranges_amount;
                for (var i = fraction; i < 1; i = i + fraction) {
                    value_ranges.push(values_arr[Math.floor(values_arr.length * i)]);
                }
            }
        } else {
            ///else all_map_options.is_colored_by_names is true

            //populate value_ranges with array of unique strings from values_arr
            $.each(values_arr, function (i, val) {
                if ($.inArray(val, value_ranges) === -1) {
                    //if not already in the value_ranges array, push it in
                    value_ranges.push(val);
                }
            });

            //add in animated vals when coloring by names (if they have animated vals)
            if (all_map_options.is_animated) {

                $.each(all_map_options.areas, function (i, area) {

                    if (area.animated_vals) {
                        $.each(area.animated_vals, function (j, val) {
                            if ($.inArray(val, value_ranges) === -1) {
                                //if not already in the value_ranges array, push it in
                                value_ranges.push(val);
                            }
                        });
                    }
                });
            }

            //if alphabetized, sort
            if (all_map_options.legend.alphabetized) {
                value_ranges.sort();
            }
        }

        //add color property to each area in all_map_options depending on its value
        var value_ranges_len = all_map_options.is_colored_by_names ? value_ranges.length - 1 : value_ranges.length;

        $.each(all_map_options.areas, function () {
            if (this.value === null || this.value === "N/A") {
                this.color = "#f7f7f7"; //gray
            } else {
                    //not N/A

                    if (this.value <= value_ranges[0]) {
                        this.color = colors[0];
                    }

                    //if coloring by names, assign color from same colors index as the index of value found in value ranages
                    if (all_map_options.is_colored_by_names) {

                        var found_index = $.inArray(this.value, value_ranges);

                        if (found_index > -1) {
                            this.color = colors[found_index];
                        }
                    } else {
                        //else coloring by values

                        for (i = 0; i < value_ranges_len; i++) {
                            //for length of value_ranges array, assign colors
                            if (this.value > value_ranges[i]) {
                                this.color = colors[i + 1];
                            }
                        }
                    }
                }
        });

        //set new cached array
        map_colors_init.cached_value_ranges = value_ranges;
        map_colors_init.cached_map_options = all_map_options;

        all_map_options.value_ranges = value_ranges;
        all_map_options.colors = colors;

        return all_map_options;
    },

    /** make and return an array of colors from a color palette **/
    newColorArray: function newColorArray(color_palette, all_map_options) {
        var selected_colors = [];

        if ($(".map_color_div .jscolor").length > 0) {
            //grab from custom if available

            $.each($(".map_color_div .jscolor"), function () {
                selected_colors.push($(this).css("background-color"));
            });
        } else {
            //else grab from selected template
            $.each($(".map_color_palette_cell", color_palette), function () {
                selected_colors.push($(this).css("background-color"));
            });
        }

        return selected_colors;
    },

    /** load map color palette boxes into #map_color_palettes **/
    loadMapColorPalettes: function loadMapColorPalettes(val) {

        var selected_index = utils_forms.getSelectedIndex($(".map_color_palette_row")); //get current selected index to click later
        var allFormUpdates = require("../../form_updates/all_form_updates.js");

        var val = val || 4;
        $("#map_color_palettes").load("./components/map_color_palettes_" + val + ".htm", function () {
            allFormUpdates.colorPaletteRowClick(); // reinits the click functionality

            $(".map_color_palette_row:eq(" + selected_index + ")").click(); //click a color to initialize a new map

            if (val > 2) {
                $("#minus_map_color").attr("class", "on"); //turn minus button on
            }

            if (val < 23) {
                $("#add_map_color").attr("class", "on"); //turn plus button on
            }
        });
        $("#use_custom_colors_checkbox").prop('checked', false);
    }
};

module.exports = map_colors_init;

},{"../../form_updates/all_form_updates.js":15,"../../utils/utils_forms.js":70,"../../utils/utils_main.js":71}],46:[function(require,module,exports){
"use strict";

/** 
functions for map credits
@module
*/

var map_credits_init = {

    /**Gets credits from a text input element and returns it **/
    mapCreditsInit: function mapCreditsInit(input) {
        var map_credits = {
            text: input.val().replace(/\n/g, "<br>"),
            style: "color: #000; font-family: sans-serif; font-weight: normal; font-size: 12px; padding: 10px; margin-bottom: -5px; position: absolute; bottom: 0px; z-index: 500"
        };
        return map_credits;
    },

    /** creates and returns a styled map div credits with text **/
    getMapCredits: function getMapCredits(credits) {
        var map_credits = document.createElement("div");
        map_credits.innerHTML = credits.text;
        map_credits.setAttribute("style", credits.style);

        return map_credits;
    }
};

module.exports = map_credits_init;

},{}],47:[function(require,module,exports){
"use strict";

var utils_forms = require("../../utils/utils_forms.js");
var parseForMap = require("../../parsers/parse_for_map.js");
var map_animation_init = require("./map_animation_init.js");
var map_colors_init = require("./map_colors_init.js");
var map_title_init = require("./map_title_init.js");
var map_subtitle_init = require("./map_subtitle_init.js");
var map_tooltip_init = require("./map_tooltip_init.js");
var map_legend_init = require("./map_legend_init");
var map_ranked_columns_init = require("./map_ranked_columns_init");
var map_credits_init = require("./map_credits_init.js");
var map_circle_sizes_init = require("./map_circle_sizes_init.js");
var update_map_individual_series = require("../../form_updates/update_map_individual_series.js");
var update_template = require("../../form_updates/update_template.js");
var areas_colored_report = require("../../utils/areas_colored_report.js");
var is_checked = utils_forms.getCheckBoxValue;

/** 
Map initialization object
@namespace
**/

var map_init = {

    /** creates / sets all map options, the main object that the map svg is made from **/
    createAllMapOptions: function createAllMapOptions(all_map_options, areas, map_type) {

        //setup empty all_map_options
        all_map_options = {
            render_ID: update_template.changeID($("#chart_id_textinput").val(), null, all_map_options),
            title: {},
            subtitle: {},
            colors: [],
            circle_size_multiple: 1,
            circle_sized_by: $("#map_circle_size_by_select").val(),
            is_animated: is_checked($("#map_animated_checkbox")),
            is_colored_by_names: is_checked($("#map_color_by_names_checkbox")),
            add_ranked_columns: is_checked($("#map_add_ranked_columns_checkbox")),
            animation_delay: Number($("#map_animation_speed_range").val()),
            animation_start_at_end: is_checked($("#map_animated_start_at_last_date_checkbox")),
            legend: {
                decimals: $("#map_legend_decimals_select").val(),
                enabled: is_checked($("#map_legend_enabled_checkbox")),
                reversed: is_checked($("#legend_reverse_layout_checkbox")),
                alphabetized: is_checked($("#legend_alphabetical_layout_checkbox")),
                x: Number($("#legend_placement_x").val()),
                y: Number($("#legend_placement_y").val()),
                item_width: Number($("#legend_item_width_input").val()) == 0 ? Number($("#legend_width_input").val()) : Number($("#legend_item_width_input").val()),
                legend_width: Number($("#legend_width_input").val())
            },
            map_type: map_type,
            viewbox: "",
            sized_for_spotlight: $("#map_spotlight_size_checkbox").is(":checked"),
            ranges_amount: $(".map_color_palette_row.selected .map_color_palette_cell").length,
            value_ranges: [],
            credits: {},
            tooltip: {
                dollar_sign: "",
                percent_sign: "",
                prepend_to_value: "",
                decimals: "",
                na_text: "",
                value_font_size: $("#map_tooltip_main_value_font_size_input").val() + "px"

            },
            extra_value_titles: [],
            animated_value_titles: [],
            areas: areas

        };

        //set viewbox
        console.log("setting viewbox");
        switch (map_type) {
            case "county":
                all_map_options.viewbox = "95 -10 380 380";
                break;
            case "state":
                all_map_options.viewbox = "180 0 620 620";
                break;
            case "metro_area":
                all_map_options.viewbox = "45 0 670 510";
                break;
            case "region":
                all_map_options.viewbox = "180 0 620 620";
                break;
            case "division":
                all_map_options.viewbox = "180 0 620 620";
                break;
        }

        var table_input = $("#table_input_textarea").val();

        //set title
        all_map_options.title = map_title_init.mapTitleInit(table_input);

        //set subtitle
        all_map_options.subtitle = map_subtitle_init.mapSubtitleInit($("#chart_subtitle_textarea"));

        //set credits
        all_map_options.credits = map_credits_init.mapCreditsInit($("#chart_credits_text_textarea"));

        //set tooltip format
        map_tooltip_init.formatMapToolTip(all_map_options);

        //hide / enable areas
        all_map_options.areas = map_init.setHiddenAreas(all_map_options);

        ////// assign values to all_map_options.areas based on table input ////

        parseForMap(all_map_options, table_input);

        var colors = map_colors_init.newColorArray($(".map_color_palette_row.selected"), all_map_options); //gets array of colors depending on what is selected

        map_colors_init.getBoundaryMapColors(all_map_options, colors); //mods all_map_options.areas to include fill colors depending on values

        //get circle sizes for circle type maps
        if (map_type === "metro_area") {
            map_circle_sizes_init.getCircleSizes(all_map_options); //decides what radius map circle elements will have, depending on their value
        }

        return all_map_options;
    },

    /** converts all_map_options (actually an array of objects by now after the .get() auto conversion) to svg and puts it on page **/
    convertMapOptionsToSVG: function convertMapOptionsToSVG(all_map_options) {
        var map_display_area = $("#" + all_map_options.render_ID + ".map_display_area");
        map_display_area.empty();

        var map_outer_div = map_init.getMapOuterDiv(all_map_options); //creates and returns outer map div

        var map_outer_svg = map_init.getMapOuterSVG(all_map_options); //creates and returns empty map svg tag

        map_init.populateSVGAreas(all_map_options, map_outer_svg); //colorizes paths, sets circle attributes, appends g elements to svg

        var map_title = map_title_init.getMapTitle(all_map_options.title); //creates and returns a styled map h2 title with text
        var map_subtitle = map_subtitle_init.getMapSubtitle(all_map_options.subtitle); //creates and returns a styled map h3 title with text
        var map_credits = map_credits_init.getMapCredits(all_map_options.credits); //creates and returns a styled map div credits with text

        var tooltip_div = map_tooltip_init.getMapTooltip(all_map_options); //creates and returns an empty tooltip div template

        //put elements together
        $(map_outer_div).append(tooltip_div, map_title, map_subtitle); //tooltip

        // if it's animated, make and add the slider
        if (all_map_options.is_animated) {
            var map_animation_div = map_animation_init.getAnimationDiv(all_map_options);
            map_outer_div.appendChild(map_animation_div);
        }

        var map_legend = all_map_options.legend.enabled ? map_legend_init.getMapLegend(all_map_options) : undefined; //creates and returns a styled map div legend with color boxes and text

        var ranked_columns_inset = all_map_options.add_ranked_columns && all_map_options.map_type == "state" ? map_ranked_columns_init.getRankedColumns(all_map_options) : undefined;

        //put more together
        $(map_outer_div).append(map_outer_svg, map_legend, ranked_columns_inset, map_credits);

        map_display_area.append($(map_outer_div)); //put map on page

        //reverse legend if needed
        if (all_map_options.legend.reversed) {
            var map_legend_div = $("#" + all_map_options.render_ID + " .map_legend_div");
            $(map_legend_div).children().each(function (i, div) {
                map_legend_div.prepend(div);
            });
        }

        return map_display_area;
    },

    /** creates and returns an empty map outer div. This will hold the map svg, tooltip box, legend, title, etc. **/

    getMapOuterDiv: function getMapOuterDiv(all_map_options) {

        var div = document.createElement("div");

        $(div).css({
            position: "relative",
            width: all_map_options.sized_for_spotlight ? "595px" : "99%",
            "min-height": all_map_options.sized_for_spotlight ? "530px" : "96%",
            "text-align": "left",
            margin: "auto",
            "background-color": "#FFFFFF"
        }).addClass("map_outer_div");

        return div;
    },

    /** creates and returns an empty map svg element **/
    getMapOuterSVG: function getMapOuterSVG(all_map_options) {

        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        $(svg).css({
            "z-index": "400",
            position: "absolute",
            left: "13px",
            top: all_map_options.is_animated ? "93px" : "45px",
            "background-color": "#fff",
            "height": all_map_options.sized_for_spotlight ? "382px" : "450px",
            "width": all_map_options.sized_for_spotlight ? "578px" : "680px"

        }).addClass("map_svg");

        svg.setAttribute("viewBox", all_map_options.viewbox);

        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        return svg;
    },

    /** ******* Initial Function (called from map icon click) - calls functions to loads the map json, convert it to svg, loads options and displays map in .map_display_area******  **/
    loadNewMap: function loadNewMap(chart, all_chart_options, all_map_options, repopulate_form) {

        $(".map_play_button.playing").click(); //if animated map is playing, stop it - prevents errors

        var navigation_setup = require("../../navigation_setup.js");

        var map_type = $("#map_type_select").val();

        var filename = "json/maps/" + map_type + "_map.json";

        $.get(filename, function (areas) {

            var all_map_options = map_init.createAllMapOptions(all_map_options, areas, map_type);

            //give .map_display_area the chosen ID
            $(".map_display_area").attr("id", all_map_options.render_ID);

            //convert all_map_options to svg and puts it on page, returns jquery object of map div
            var map_display_area = map_init.convertMapOptionsToSVG(all_map_options);

            //adjust map_display_area size
            map_init.resizeMap(all_map_options);

            //init tooltip and highlighting
            map_init.setUpMapHover(all_map_options, map_display_area);

            //init legend hovering
            map_init.setUpMapLegendHover(map_display_area);

            //init ranked column hovering if applicable
            map_init.setUpMapRankedColumnsHover(map_display_area);

            //init legend clicking
            if (all_map_options.map_type === "metro_area") {
                map_init.setUpMapLegendClick(map_display_area);
            }

            //init animation functionality if applicable
            if (all_map_options.is_animated) {
                map_animation_init.setUpMapAnimation(all_map_options, map_display_area);
            }

            //init state links to eag pages
            map_init.setUpMapStateLinks(map_display_area);

            //init individual series range setup
            if (repopulate_form === true) {
                setTimeout(function () {
                    update_map_individual_series.populateForm(chart, all_chart_options, all_map_options);
                }, 1000);
            }

            //reinit navigation get code button click so that load chart code button will work
            navigation_setup.getCodeButtonClick(chart, all_chart_options, all_map_options);

            //generate areas colored report
            areas_colored_report.generateReport(all_map_options);
        });
    },

    /** resizes chart_display_area by changing input values and triggering keyup **/
    resizeMap: function resizeMap(all_map_options) {

        var current_width = $("#chart_width_textinput").val();
        var current_height = $("#chart_height_textinput").val();

        if (all_map_options.sized_for_spotlight) {
            var new_width = 615;
            var new_height = 590;
        } else {
            var new_width = 710 > current_width ? 710 : current_width;
            var new_height = 650 > current_height ? 650 : current_height;
        }

        if (new_width != current_width) {
            $("#chart_width_textinput").val(new_width).keyup();
        }

        if (new_height != current_height) {
            $("#chart_height_textinput").val(new_height).keyup();
        }
    },

    /** sets hidden areas i.e. Puerto Rico and VI **/

    setHiddenAreas: function setHiddenAreas(all_map_options) {

        var hidden_areas = [];

        $("#map_include_puerto_rico_checkbox, #map_include_virgin_islands_checkbox").each(function () {
            if (!is_checked($(this))) {
                hidden_areas.push($(this).val());
            }
        });

        $.each(all_map_options.areas, function (i, e) {
            if (hidden_areas.indexOf(this.id) > -1) {
                this.enabled = false;
            } else {
                this.enabled = true;
            }
        });

        return all_map_options.areas;
    },

    /** populates map svg (creates paths and circles) with options from all_map_options.areas. Called from convertMapOptionsToSVG() **/

    populateSVGAreas: function populateSVGAreas(all_map_options, map_outer_svg) {

        $.each(all_map_options.areas, function () {

            var g = document.createElementNS("http://www.w3.org/2000/svg", "g");

            if (this.enabled) {

                if (this.d) {
                    //path outline

                    var el = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    el.setAttributeNS(null, "d", this.d); //sets path outline

                    //set stroke (lighter for county maps)
                    var new_stroke = all_map_options.map_type === "county" ? "#b3b3b3" : "#646464";
                    el.setAttributeNS(null, "stroke", new_stroke); //set path stroke

                    if (all_map_options.map_type === "metro_area") {
                        //transform smaller for metro area maps
                        el.setAttributeNS(null, "transform", "scale(0.8) translate(0, 5.471371609992666)");
                        el.setAttributeNS(null, "fill", this.color || "#f7f7f7"); //light gray if NA val
                    }

                    //if it's a named area, set values and color
                    if (this.loc_name) {
                        el.setAttributeNS(null, "loc_value", this.value);
                        el.setAttributeNS(null, "fill", this.color || "#f7f7f7"); //light gray if NA val
                        el.setAttribute("loc_name", this.loc_name);
                    }

                    //if it has a region, set it on the svg path
                    if (this.region) {
                        el.setAttributeNS(null, "region", this.region);
                    }

                    //if it has a division, set it on the svg path
                    if (this.division) {
                        el.setAttributeNS(null, "division", this.division);
                    }

                    if (this.class === "border") {
                        el.setAttributeNS(null, "fill", "none");
                        el.setAttributeNS(null, "stroke", "#A9A9A9");
                        el.setAttributeNS(null, "stroke-width", 2);
                    }
                } else {
                    //circle (DC or metro area)

                    var el = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    el.setAttributeNS(null, "r", this.r); //radius
                    el.setAttributeNS(null, "cx", this.cx); //x pos
                    el.setAttributeNS(null, "cy", this.cy); //y pos
                    el.setAttributeNS(null, "stroke", this.color ? "rgba(67, 67, 72, .8)" : "#337ab7"); //stroke

                    if (all_map_options.map_type === "metro_area") {
                        el.setAttributeNS(null, "fill", this.color ? this.color.replace(')', ', 0.75)').replace('rgb', 'rgba') : "#337ab7"); //fill
                    } else {
                            el.setAttributeNS(null, "fill", this.color ? this.color : "#f7f7f7"); //fill
                        }

                    if (this.loc_name) {
                        //if it's a named area, set value and color
                        el.setAttributeNS(null, "loc_value", this.value);
                        el.setAttribute("loc_name", this.loc_name);
                    }
                }

                if (this.style) {
                    el.setAttribute("style", this.style);
                }

                el.setAttribute("class", this.class);
                this.extra_vals ? el.setAttributeNS(null, "extra_vals", this.extra_vals.join(";")) : null;
                this.animated_vals ? el.setAttributeNS(null, "animated_vals", this.animated_vals.join(";")) : null;

                if (this.id) {
                    el.setAttribute("id", this.id);
                }

                g.appendChild(el);
                map_outer_svg.appendChild(g);
            }
        });
    },

    /** sets up hover functionality for the map **/
    setUpMapHover: function setUpMapHover(all_map_options, map_display_area) {

        var map = all_map_options;

        //other areas fade out when an area is hovered
        $("path[loc_name], circle[loc_name]", map_display_area).hover(function (event) {

            var $this = $(this);

            //gray out other states, highlight this one

            var opacity = ["state", "region", "division"].indexOf(map.map_type) > -1 ? ".1" : ".35";
            $("path, circle", map_display_area).attr("fill-opacity", opacity);
            $this.attr("fill-opacity", "1");

            //highlight other states if a region or division map

            var is_region = ["region", "division"].indexOf(map.map_type);
            if (is_region > -1) {
                var region_type = ["region", "division"][is_region];
                var region_name = $this.attr(region_type);

                $("path[" + region_type + "='" + region_name + "']", map_display_area).attr("fill-opacity", "1");
            }

            // populate tooltip
            var this_tooltip = $(".map_tooltip", map_display_area); //get element

            var tooltip_title;
            if (map.map_type === "division") {
                tooltip_title = $this.attr("division");
            } else if (map.map_type === "region") {
                tooltip_title = $this.attr("region");
            } else {
                tooltip_title = $this.attr("loc_name") || "";
            }

            //set title
            $(".tooltip_title", this_tooltip).text(tooltip_title);

            //add main value to tooltip if applicable
            var this_loc_value = $this.attr("loc_value"); //get main value           

            if (["null", "", "undefined"].indexOf(this_loc_value) < 0) {

                if (!map.is_colored_by_names) {
                    //if colored by values
                    this_loc_value = $(Number(this_loc_value)).addCommas(map.tooltip.decimals || "");
                }

                var value_html = "<span style='font-size: 80%'>" + map.tooltip.prepend_to_value + map.tooltip.dollar_sign + "</span>" + this_loc_value + "<span style='font-size: 80%'>" + map.tooltip.percent_sign + "</span>";

                //add extra values to tooltip if applicable, and not animated
                if (!map.is_animated) {

                    var this_extra_vals = $this.attr("extra_vals"); //get extra values (if applicable)
                    if (this_extra_vals) {
                        this_extra_vals = this_extra_vals.split(";");
                        $.each(this_extra_vals, function (i) {
                            value_html = value_html + "<p style='font-size: 14px; line-height: 1.1; margin: 2px 0px 2px 0px;'><span style='color: black'>" + map.extra_value_titles[i] + ": </span>" + this_extra_vals[i] + "</p>";
                        });
                    }
                }
            } else {
                //if no loc_value
                var value_html = "<span style='font-size: 70%'>" + map.tooltip.na_text + "</span>";
            }

            //set main value
            $(".tooltip_main_value", this_tooltip).html(value_html);

            //get mouse position to setup tooltip position
            var parentOffset = $this.parent().parent().offset();
            var relX = event.pageX - parentOffset.left;
            var left_position = relX > 340 ? "10px" : "353px";

            this_tooltip.css("left", left_position).show(); //show just this map's tooltip

            //highlight ranked column if enabled

            if (all_map_options.add_ranked_columns) {
                var column = $("#" + all_map_options.render_ID + " .map_ranked_column[rel='" + $(this).attr('id') + "']");
                column.css("background-color", "#FFEB00");
            }
        }, function () {
            //mouse out

            //return to all previous fill opacity
            $("path, circle", map_display_area).attr("fill-opacity", "1");

            //hide tooltip
            $(".map_tooltip").hide();

            //dehighlight ranked column if enabled

            if (all_map_options.add_ranked_columns) {
                var column = $("#" + all_map_options.render_ID + " .map_ranked_column[rel='" + $(this).attr('id') + "']");
                column.css("background-color", column.attr("previous_color"));
            }
        });
    },

    /** set up hover functionality for the map legend **/
    setUpMapLegendHover: function setUpMapLegendHover(map_display_area) {
        $(".map_legend_item", map_display_area).hover(function (event) {

            var this_color = $(this).children(".map_legend_color").css("background-color");
            $(".map_legend_text", this).css("color", "#B73438"); //make text red

            //lower opacity on other areas (paths)
            $("path", map_display_area).each(function () {
                var this_fill = $(this).attr("fill");
                if (this_fill !== this_color) {
                    $(this).attr("fill-opacity", ".1");
                }
            });
            //lower opacity on other areas (circles)
            $("circle", map_display_area).each(function () {
                var this_fill = $(this).attr("fill");
                if (this_fill.replace(', 0.75)', ')').replace('rgba', 'rgb') !== this_color) {
                    $(this).attr("fill-opacity", ".1").attr("stroke-opacity", ".02");
                }
            });
        }, function () {

            //bring back opacity
            $("path, circle", map_display_area).each(function () {
                $(this).attr("fill-opacity", "1").attr("stroke-opacity", "1");
            });

            $(".map_legend_text", this).css("color", "#000"); //make text black
        });
    },

    setUpMapRankedColumnsHover: function setUpMapRankedColumnsHover(map_display_area) {
        //add mouseover function
        $(".map_ranked_column").hover(function () {
            $(this).css("background-color", "#FFEB00");

            $("#" + $(this).attr("rel"), map_display_area).mouseenter();
        }, function () {
            $(this).css("background-color", $(this).attr("previous_color"));
            $("#" + $(this).attr("rel"), map_display_area).mouseleave();
        });
    },

    /** set up click functionality for the map legend (just for metro area for now**/
    setUpMapLegendClick: function setUpMapLegendClick(map_display_area) {
        $(".map_legend_item", map_display_area).css("cursor", "pointer").addClass("showing").click(function () {
            var this_color = $(".map_legend_color", $(this)).css("background-color").replace("rgb", "rgba").replace(")", ", 0.75)");
            var is_showing = $(this).hasClass("showing");

            if (is_showing) {
                $(this).removeClass("showing");
                $(".map_legend_color", $(this)).css("visibility", "hidden");
                $("circle", map_display_area).each(function (i, e) {
                    var area_color = $(e).attr("fill");
                    console.log(this_color, area_color);
                    if (this_color === area_color) {
                        console.log("hiding");
                        $(e).hide();
                    }
                });
            } else {
                $(this).addClass("showing");
                $(".map_legend_color", $(this)).css("visibility", "visible");
                $("circle", map_display_area).each(function (i, e) {
                    var area_color = $(e).attr("fill");
                    if (this_color === area_color) {
                        $(e).show();
                    }
                });
            }
        });
    },

    /** Set up state links to eag page if applicable **/

    setUpMapStateLinks: function setUpMapStateLinks(map_display_area) {

        $("path[loc_name], circle[loc_name]", map_display_area).each(function () {
            var thisID = $(this).attr("id");
            if (thisID) {
                $(this).css("cursor", "pointer").click(function () {
                    window.open("http://www.bls.gov/eag/eag." + thisID + ".htm", '_blank');
                });
            }
        });
    }

};

module.exports = map_init;

},{"../../form_updates/update_map_individual_series.js":23,"../../form_updates/update_template.js":25,"../../navigation_setup.js":54,"../../parsers/parse_for_map.js":59,"../../utils/areas_colored_report.js":65,"../../utils/utils_forms.js":70,"./map_animation_init.js":43,"./map_circle_sizes_init.js":44,"./map_colors_init.js":45,"./map_credits_init.js":46,"./map_legend_init":48,"./map_ranked_columns_init":49,"./map_subtitle_init.js":50,"./map_title_init.js":51,"./map_tooltip_init.js":52}],48:[function(require,module,exports){
"use strict";

/** 
                                                                        creates and returns a styled map div legend with color boxes and text 
                                                                        @namespace
                                                                        **/

var map_legend_init = {

    /** creates and returns a map legend div **/
    getMapLegend: function getMapLegend(all_map_options) {

        console.log("map_legend_init.getMapLegend");

        //create outer legend box
        var map_legend_div = document.createElement("div");
        map_legend_div.setAttribute("class", "map_legend_div");

        var top_adjustment = all_map_options.is_animated ? 480 : 420;
        map_legend_div.setAttribute("style", "position: absolute; top: " + (all_map_options.legend.y + top_adjustment) + "px; left: " + (all_map_options.legend.x + 261) + "px; width: " + all_map_options.legend.legend_width + "px; min-height: 130px; margin: auto; z-index: 500");

        //create legend item for each color
        var dollar = all_map_options.tooltip.dollar_sign;
        var percent = all_map_options.tooltip.percent_sign;

        $.each(all_map_options.colors, function (i) {

            //outer div for each legend item
            var map_legend_item = document.createElement("div");
            map_legend_item.setAttribute("class", "map_legend_item");
            map_legend_item.setAttribute("style", "min-width: " + all_map_options.legend.item_width + "px; min-height: 15px; margin-bottom: 7px; cursor: default; float: left;");

            //map color box div for each legend item
            var map_legend_color = document.createElement("div");
            map_legend_color.setAttribute("class", "map_legend_color");

            //set round color boxes for metro type maps
            var border_radius = all_map_options.map_type === "metro_area" ? "50px" : "0px";
            //set legend color

            map_legend_color.setAttribute("style", "width: 15px; height: 15px; background-color: " + all_map_options.colors[i] + "; float: left; border: rgb(153, 153, 153) solid .5px; border-radius: " + border_radius + "");

            //map text div for each legend item
            var map_legend_text = document.createElement("div");
            map_legend_text.setAttribute("class", "map_legend_text");
            map_legend_text.setAttribute("style", "color: black; float: left; line-height: 1em; margin-left: 5px; font-size: 12px;");

            //if map is colored by names, just use unique names, otherwise use ranges
            if (all_map_options.is_colored_by_names) {

                map_legend_text.textContent = all_map_options.value_ranges[i];
            } else {
                //coloring by values

                //set legend text content and set mod so that numbers in legend are 1, .1, .01, or .001 off   
                var dec = all_map_options.legend.decimals;
                if (i === 0) {
                    map_legend_text.textContent = dollar + $(all_map_options.value_ranges[i]).addCommas(dec) + percent + " and lower";
                } else if (i === all_map_options.colors.length - 1) {
                    map_legend_text.textContent = dollar + $(map_legend_init.valueMod(all_map_options.value_ranges[i - 1], all_map_options, dec)).addCommas(dec) + percent + " and higher";
                } else {
                    map_legend_text.textContent = dollar + $(map_legend_init.valueMod(all_map_options.value_ranges[i - 1], all_map_options, dec)).addCommas(dec) + percent + " to " + dollar + $(all_map_options.value_ranges[i]).addCommas(dec) + all_map_options.tooltip.percent_sign;
                }

                //replace dash signs with minus signs
                map_legend_text.textContent = map_legend_text.textContent.replace(/-/g, "−");
            }

            if ($(map_legend_text).text() !== "") {

                map_legend_item.appendChild(map_legend_color);
                map_legend_item.appendChild(map_legend_text);
                map_legend_div.appendChild(map_legend_item);
            }
        });

        //if map legend text is N/A, make gray color and move to end

        $.each($(map_legend_div).children(), function (i, el) {

            if ($(this).text() === "N/A") {

                $(this).children(".map_legend_color").css("background-color", "#f7f7f7");
                $(this).appendTo($(map_legend_div));
            }
        });

        //rgb(223, 223, 223)

        return map_legend_div;
    },

    /** returns a mod so that numbers in legend are 1, .1, .01, or .001 off so they don't overlap **/
    valueMod: function valueMod(val, all_map_options, dec) {
        var mod;

        switch (dec) {

            case "null":
                {
                    if (all_map_options.value_ranges[all_map_options.value_ranges.length - 1] > 100) {
                        mod = 1;
                        dec = 0;
                    } else {
                        mod = .01;
                        dec = 2;
                    }
                    break;
                }

            case "0":
                {
                    mod = 1;
                    break;
                }
            case "1":
                {
                    mod = .1;
                    break;
                }
            case "2":
                {
                    mod = .01;
                    break;
                }
            case "3":
                {
                    mod = .001;
                    break;
                }

        }

        return Number((val + mod).toFixed(dec));
    }

};

module.exports = map_legend_init;

},{}],49:[function(require,module,exports){
"use strict";

/** 
                                                                                                                                creates and returns some columns in a div that are ranked and sized and associated with the areas provided
                                                                                                                                @namespace
                                                                                                                                **/

var map_ranked_columns_init = {

    /** creates and returns a ranked and sized columns div **/
    getRankedColumns: function getRankedColumns(all_map_options) {

        //filter and sort areas
        var areas = all_map_options.areas.filter(function (area) {
            return area.value;
        }).sort(function (a, b) {
            return a.value - b.value;
        });

        //end if no areas
        if (!areas[areas.length - 1]) {
            return undefined;
        }
        var largest_val = areas[areas.length - 1].value;
        var smallest_val = areas[0].value;

        //outer div
        var ranked_column_div = $("<div id='ranked_column_div'>").css({
            height: "130px",
            width: "252px",
            backgroundColor: "none",
            position: "absolute",
            top: "470px",
            right: "7px",
            zIndex: 510
        });

        //create inner columns
        $.each(areas, function (i, area) {
            var height = Math.abs(area.value) / largest_val * 100;
            var column = $("<div>").attr("rel", area.id).addClass("map_ranked_column").css({
                width: "4px",
                backgroundColor: area.color,
                height: height + "%",
                position: "absolute",
                left: i * 5 + "px",
                bottom: area.value < 0 ? -1 * height + "%" : 0 + "%"
            }).attr("previous_color", area.color);

            $(ranked_column_div).append(column);
        });

        return ranked_column_div;
    }
};

module.exports = map_ranked_columns_init;

},{}],50:[function(require,module,exports){
"use strict";

/** 
functions for map subtitle
@namespace
*/

var map_subtitle_init = {

    /**Gets title from a text input element and returns it **/
    mapSubtitleInit: function mapSubtitleInit(input) {
        var map_subtitle = {
            text: $.trim(input.val()),
            style: "color: #000; font-family: sans-serif; font-weight: normal; font-size: 12px; padding: 10px; margin: 0px; position: absolute; top: 20px; z-index: 500"
        };
        return map_subtitle;
    },

    /** creates and returns a styled map h3 subtitle with text **/
    getMapSubtitle: function getMapSubtitle(subtitle) {
        var map_subtitle = document.createElement("h3");
        map_subtitle.textContent = subtitle.text;
        map_subtitle.setAttribute("style", subtitle.style);

        return map_subtitle;
    }
};

module.exports = map_subtitle_init;

},{}],51:[function(require,module,exports){
"use strict";

/** Gets title from a table and returns it
@module
*/

var map_title_init = {

    /** creates and returns a styled map h2 title with text **/
    getMapTitle: function getMapTitle(title) {
        var map_title = document.createElement("h2");
        map_title.textContent = title.text;
        map_title.setAttribute("style", title.style);

        return map_title;
    },

    mapTitleInit: function titleInit(table_input) {
        var map_title = {
            text: $.trim($("caption", $(table_input)).text()),
            style: "color: #000; font-family: sans-serif; font-weight: bold; font-size:14px; padding: 10px; margin-bottom: 0px; text-align: left; border-bottom: none"
        };
        return map_title;
    }
};

module.exports = map_title_init;

},{}],52:[function(require,module,exports){
"use strict";

/** Map tooltip object 
@namespace
**/

var map_tooltip_init = {

    /** creates and returns an empty tooltip div template **/
    getMapTooltip: function getMapTooltip(all_map_options) {

        var tooltip_div = document.createElement("div");
        tooltip_div.className = "map_tooltip";
        tooltip_div.setAttribute("style", "min-width: 200px; max-width: 315px; min-height: 60px; background-color: #FCF8E3; border: solid 1px #395463; position: absolute; left: 353px; top: 5px; z-index: 501; display: none; padding-right: 5px;");

        var tooltip_title = document.createElement("h2");
        tooltip_title.className = "tooltip_title";
        tooltip_title.setAttribute("style", "color: #000; font-family: sans-serif; font-weight: bold; font-size:16px; margin: 5px 0px 0px 5px; ");

        var tooltip_main_value = document.createElement("h4");
        tooltip_main_value.className = "tooltip_main_value";
        tooltip_main_value.setAttribute("style", "color: #395463; font-family: sans-serif; font-weight: bold; font-size:" + all_map_options.tooltip.value_font_size + "; margin: 0px 0px 0px 5px;");

        tooltip_div.appendChild(tooltip_title);
        tooltip_div.appendChild(tooltip_main_value);

        return tooltip_div;
    },

    /** mods all_map_options.tooltip to have a dollar sign or percent sign if that option is selected **/
    formatMapToolTip: function formatMapToolTip(all_map_options) {
        var tool_sign = $("#chart_tooltip_signs_select").val();

        all_map_options.tooltip.dollar_sign = tool_sign === "$" ? "$" : "";
        all_map_options.tooltip.percent_sign = tool_sign === "%" || tool_sign === "percentage point(s)" ? tool_sign.replace("per", " per") : "";

        all_map_options.tooltip.prepend_to_value = $("#map_tooltip_prepend_to_value_text_input").val();
        all_map_options.tooltip.decimals = $("#chart_tooltip_force_decimals_select").val();
        all_map_options.tooltip.na_text = $("#map_tooltip_na_text_input").val();
    }

};

module.exports = map_tooltip_init;

},{}],53:[function(require,module,exports){
"use strict";

var update_individual_series = require("./form_updates/update_individual_series.js");

/**
 * Contains functions that deal with keyboard inputs
 * @namespace
 */
var keyboard_inputs = {

    adjValue: function adjValue(val, direction) {
        var val = Number(val);
        if (!isNaN(val)) {
            return direction === "+" ? val + 10 : val - 10;
        } else {
            return val;
        }
    },

    /** clicks the next element of a given classname than the one selected
    @param classname {string} the class name of each of the elements
    @param selected_classname {string} the name of the selected element
    **/
    clickNext: function clickNext(classname, selected_classname, prev) {
        var only_visible = classname === "tab" ? ":visible" : "";

        var next = 0;
        var len = $("." + classname + only_visible).length;

        $("." + classname + only_visible).each(function (i) {
            if ($(this).hasClass(selected_classname)) {

                next = prev ? i + prev : i + 1; //if a prev exists, go backwards
                if (next === len) {
                    //if end is reached, go to first
                    next = 0;
                }
            }
        });
        $("." + classname + only_visible + ":eq(" + next + ")").click();
    },

    /** when nothing is selected, pressing up or down changes which side nav tab is selected */
    sideNavTabShortcuts: function sideNavTabShortcuts() {
        var keys = keyboard_inputs,
            $h = $("#chart_height_textinput"),
            $w = $("#chart_width_textinput"),
            $rm = $("#right_margin_textinput"),
            $lm = $("#left_margin_textinput"),
            $tm = $("#top_margin_textinput"),
            $bm = $("#bottom_margin_textinput");

        $(document).unbind().keydown(function (e) {

            //chart resizing keys
            if (e.shiftKey && e.keyCode === 40) {
                //shift + down
                e.preventDefault();
                $h.val(keys.adjValue($h.val(), "+")).keyup();
            } else if (e.shiftKey && e.keyCode === 38) {
                //shift + up
                e.preventDefault();
                $h.val(keys.adjValue($h.val(), "-")).keyup();
            } else if (e.shiftKey && e.keyCode === 37) {
                //shift + left
                e.preventDefault();
                $w.val(keys.adjValue($w.val(), "-")).keyup();
            } else if (e.shiftKey && e.keyCode === 39) {
                //shift + right
                e.preventDefault();
                $w.val(keys.adjValue($w.val(), "+")).keyup();
            }

            //margin resizing keys (up and right margins)
            else if ((event.ctrlKey || event.metaKey) && e.keyCode === 39) {
                    //ctrl/cmd + right
                    e.preventDefault();
                    $rm.val(keys.adjValue($rm.val(), "-")).keyup();
                } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 37) {
                    //ctrl/cmd + left
                    e.preventDefault();
                    $rm.val(keys.adjValue($rm.val(), "+")).keyup();
                } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 38) {
                    //ctrl/cmd + up
                    e.preventDefault();
                    $tm.val(keys.adjValue($tm.val(), "-")).keyup();
                } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 40) {
                    //ctrl/cmd + down
                    e.preventDefault();
                    $tm.val(keys.adjValue($tm.val(), "+")).keyup();
                }

                //margin resizing keys (bottom and left margins
                else if (event.altKey && e.keyCode === 39) {
                        //alt + right
                        e.preventDefault();
                        $lm.val(keys.adjValue($lm.val(), "+")).keyup();
                    } else if (event.altKey && e.keyCode === 37) {
                        //alt + left
                        e.preventDefault();
                        $lm.val(keys.adjValue($lm.val(), "-")).keyup();
                    } else if (event.altKey && e.keyCode === 38) {
                        //alt + up
                        e.preventDefault();
                        $bm.val(keys.adjValue($bm.val(), "+")).keyup();
                    } else if (event.altKey && e.keyCode === 40) {
                        //alt + down
                        e.preventDefault();
                        $bm.val(keys.adjValue($bm.val(), "-")).keyup();
                    }

                    //side nav up and down keys
                    else if (e.keyCode === 38) {
                            //up
                            e.preventDefault();
                            keys.clickNext("tab", "selected_tab", -1); //-1 for prev
                        } else if (e.keyCode === 40) {
                                //down
                                e.preventDefault();
                                keys.clickNext("tab", "selected_tab");
                            }

                            //chart type (cycle through)   
                            else if (e.shiftKey && e.keyCode === 67) {
                                    //shift + c
                                    e.preventDefault();
                                    keys.clickNext("chart_type_icon", "selected");
                                }

                                //data load - series names from columns / rows
                                else if (e.keyCode === 9) {
                                        //tab
                                        e.preventDefault();
                                        keys.clickNext("load_series_from_icon", "selected");
                                    }

                                    //color template (cycle through)   
                                    else if (e.keyCode === 67) {
                                            //c
                                            e.preventDefault();

                                            if ($(".map_display_area").is(":visible")) {
                                                keys.clickNext("map_color_palette_row", "selected"); //map colors
                                            } else {
                                                    keys.clickNext("color_palette_row", "selected"); //chart colors
                                                }
                                        }

                                        //side nav shortcut keys
                                        else if (e.keyCode === 83) {
                                                //s
                                                $("#tab_chart_template").click();
                                            } else if (e.keyCode === 68) {
                                                //d
                                                $("#tab_data").click();
                                            } else if (e.keyCode === 73) {
                                                //i
                                                $("#tab_series_options").click();
                                            } else if (e.keyCode === 76) {
                                                //l
                                                $("#tab_chart_legend").click();
                                            } else if (e.keyCode === 88) {
                                                //x
                                                $("#tab_chart_x_axis").click();
                                            } else if (e.keyCode === 89) {
                                                //y
                                                $("#tab_chart_y_axis").click();
                                            } else if (e.keyCode === 84) {
                                                //t
                                                $("#tab_chart_tooltip").click();
                                            } else if (e.keyCode === 78) {
                                                //n
                                                $("#tab_chart_credits").click();
                                            } else if (e.keyCode === 69) {
                                                //69
                                                $("#tab_chart_extra_options").click();
                                            }
        });
    },

    /** in number entry inputs, pressing up or down will adjust value */
    numberChange: function numberChange(e) {
        if (e.keyCode === 38) {
            //up
            $(this).val(keyboard_inputs.adjValue($(this).val(), "+"));
        } else if (e.keyCode === 40) {
            //down
            $(this).val(keyboard_inputs.adjValue($(this).val(), "-"));
        }
    },

    /** initialize listenters 
    when a number entry input is focused on, attach those event listeners
    when it leaves to main document, attach those. called from navigation_setup.InitNavWithChart()
    **/
    initListeners: function initListeners() {

        $("input, textarea").focus(function () {
            $(document).unbind();

            $(this).off("keydown"); //so it doesnt duplicate when moving from one entry to another
            $(".number_entry").on("keydown", keyboard_inputs.numberChange);
        });
        $("input, textarea").blur(function () {
            $(this).off("keydown");
            //reinit side tab nav shortcuts
            keyboard_inputs.sideNavTabShortcuts();
        });

        //unbind nav quick keys when over the code result area
        $("#main_result_code_div").hover(function () {
            $(document).unbind();
        }, function () {
            keyboard_inputs.sideNavTabShortcuts();
        });
    }

};

module.exports = keyboard_inputs;

},{"./form_updates/update_individual_series.js":21}],54:[function(require,module,exports){
"use strict";

var utils_main = require("./utils/utils_main.js");
var update_individual_series = require("./form_updates/update_individual_series.js");
var keyboard_inputs = require("./keyboard_inputs.js");
var write_code = require("./utils/write_code.js");

/** object that contains functions for all the navigation, ie changing between options and chart types 
@namespace
*/
var navigation_setup = {

    /** when tabs on left side nav bar are clicked, options displayed are changed **/
    sideNavTabsChange: function sideNavTabsChange(chart, all_chart_options) {

        $("#side_nav_tabs .tab").unbind().click(function () {
            //change selected menu tabs
            $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
            $(this).addClass("selected_tab");

            //change display div showing
            var selectedID = "#" + $(this).attr("id").replace("tab", "display");
            $("#side_display .selected_display").removeClass("selected_display");
            $(selectedID).addClass("selected_display");

            //if this is "Individual Series Options", run that setup function
            if (selectedID === "#display_series_options" && all_chart_options.chart.type != "map") {
                //for charts

                update_individual_series.populateForm(chart, all_chart_options);
            }
        });
    },

    /** when clear next text area button (X) is clicked, find and clear the text of the next textarea */
    clearNextTextareaClick: function clearNextTextareaClick() {
        $(".clear_next_textarea_button").click(function () {
            $(this).next("textarea").val("");
        });
    },

    /**When a close box X is clicked, closes the containing popup div **/
    closeBoxIconClick: function closeBoxIconClick() {
        $(".close_box_icon").click(function () {
            $(this).parent().parent().slideUp(50);
            //     $(".chart_display_area, .map_display_area").toggleClass("fixed");
        });
    },

    /** when #color_palette_reverse_icon is clicked, reverse the orders of each palette */
    colorPaletteReverseIconClick: function colorPaletteReverseIconClick() {
        $("#color_palette_reverse_icon").click(function () {
            $(".color_palette_row, .map_color_palette_row").each(function () {
                var this_row = $(this);
                var color_cells = this_row.children('.color_palette_cell, .map_color_palette_cell');
                this_row.prepend(color_cells.get().reverse());
            });
            $("#color_palettes .selected, .map_color_palette_row.selected").click(); //click to change colors in chart
        });
    },

    /** when a get code button is clicked, update and show the code area. */
    getCodeButtonClick: function getCodeButtonClick(chart, all_chart_options, all_map_options) {

        $("#get_code_button").unbind().click(function (e) {

            //populate individual series tab
            update_individual_series.populateForm(chart, all_chart_options);

            //hide the load saved chart area if it's showing
            $(".load_chart_showing").removeClass("load_chart_showing");
            $("#load_chart_div").hide();

            var $get_code_span = $("#get_code_text");

            if ($get_code_span.text() === "Get code") {
                //show loading
                $("#get_code_button .glyphicon-refresh-animate").css("visibility", "visible");
                $("#main_result_code_div").slideDown(50, function () {
                    //write all_chart_options
                    $get_code_span.text("Hide code");
                    write_code.writeCode(all_chart_options, all_map_options);
                    //hide loading
                    $("#get_code_button .glyphicon-refresh-animate").css("visibility", "hidden");
                });

                //show download image div if a chart, hide if a map
                if (all_chart_options.chart.type == "map") {
                    $("#chart_image_div").hide();
                } else {
                    $("#chart_image_div").show();
                }
            } else {
                $("#main_result_code_div").slideUp(50);
                $get_code_span.text("Get code");
                $("#chart_output_code, #chart_html_code").val("");
            }

            $(this).toggleClass("code_on");

            //    $(".chart_display_area, .map_display_area").toggleClass("fixed"); //so chart will go down to still be visible

            //scroll to top of page
            $("html, body").animate({
                scrollTop: 0
            }, "slow");
        });
    },

    /** when a help icon is clicked */

    helpIconClick: function helpIconClick() {

        $(".help_icon").click(function () {
            $(this).toggleClass("help_on");

            $(".notes", $(this).parents(".display, #main_result_code_div, #load_chart_div, #side_nav_top, #areas_colored_report_div")).toggle();
        });
    },

    /** when show_load_chart_area_button is clicked, show that entry area **/

    loadChartButtonClick: function loadChartButtonClick(chart, all_chart_options) {
        $("#show_load_chart_area_button").unbind().click(function () {
            $("#main_result_code_div").slideUp(50, function () {
                //hide the get code area if it's showing
                $("#load_chart_div").slideToggle(50);
                $(".code_on").removeClass("code_on");
                $("#get_code_text").text("Get code");
                // $(".chart_display_area").toggleClass("fixed");
            });

            $(this).toggleClass("load_chart_showing");
        });
    },

    /** when black_and_white_button is clicked, toggle grascale of chart **/

    blackAndWhiteButtonClick: function blackAndWhiteButtonClick() {
        $("#black_and_white_button").click(function () {
            $(".chart_display_area, .map_display_area, #black_and_white_button").toggleClass("grayscale");
        });
    },

    /** when areas of the chart are clicked, open that section **/

    chartClicks: function chartClicks() {

        //give applicable chart areas pointer mouse
        $(".highcharts-yaxis-labels text, .highcharts-xaxis-labels text, .highcharts-tooltip, .highcharts-series-group, svg>text:last-child").unbind().css("cursor", "pointer");

        //subtitle	
        //        $(".highcharts-subtitle").click(function () {
        //            console.log("sub");
        //        });

        //y axis label
        //        $(".highcharts-yaxis-title").click(function () {
        //  console.log("y title");
        //        });

        $(".highcharts-yaxis-labels").click(function () {
            $("#tab_chart_y_axis").click();
            $("#chart_y_axis_title_textarea").select();
        });

        //x axis
        //        $(".highcharts-xaxis-title").click(function () {
        //  console.log("x tit");
        //        });

        $(".highcharts-xaxis-labels").click(function () {
            $("#tab_chart_x_axis").click();
            $("#chart_x_axis_title_textarea").select();
        });

        //credits
        $("svg>text:last-child").click(function (e) {
            e.preventDefault();
            $("#tab_chart_credits").click();
            $("#chart_credits_text_textarea").select();
        });

        //tooltip
        $(".highcharts-series-group, .highcharts-tooltip").click(function () {
            if ($("#chart_type_icons .selected").divVal() !== "drilldown") {
                $("#tab_chart_tooltip").click();
            }
        });
    },

    /** Bind open code editor button **/

    openCodeEditorClick: function openCodeEditorClick() {

        $("#open_code_editor_button").click(function () {
            $("#beautify_code_button").click();

            sessionStorage.setItem("export_code_html", $("#chart_html_code").val());
            sessionStorage.setItem("export_code_js", $("#chart_output_code").val());

            var newChartWindow = window.open("code_editor/code-editor.htm", "_blank");
        });
    },

    /** INIT ALL NAVIGATION that needs parameters, called from all_form_updates when page is loaded, and whenever a saved chart is loaded **/
    initNavWithChart: function initNavWithChart(chart, all_chart_options, all_map_options) {
        var ns = navigation_setup;

        //  navigation_setup.chartOutputCodeFocus(all_chart_options, all_map_options);
        ns.getCodeButtonClick(chart, all_chart_options, all_map_options);
        ns.loadChartButtonClick(chart, all_chart_options);
        ns.sideNavTabsChange(chart, all_chart_options);
        ns.chartClicks();

        keyboard_inputs.initListeners(chart, all_chart_options);
        keyboard_inputs.sideNavTabShortcuts(chart, all_chart_options);
    },

    /** FIRST NAVIGATION INIT, called from app.js when page is loaded. These never need to be re-initialized **/
    firstNavInit: function firstNavInit() {
        console.log("navigation_setup.firstNavInit");

        var ns = navigation_setup;

        ns.closeBoxIconClick();
        ns.clearNextTextareaClick();
        ns.colorPaletteReverseIconClick();
        ns.helpIconClick();
        ns.openCodeEditorClick();
        ns.blackAndWhiteButtonClick();
    }

};

module.exports = navigation_setup;

},{"./form_updates/update_individual_series.js":21,"./keyboard_inputs.js":53,"./utils/utils_main.js":71,"./utils/write_code.js":72}],55:[function(require,module,exports){
"use strict";

var chart_animation_init = require("../initializers/charts/chart_animation_init.js");
var utils_main = require("../utils/utils_main.js");

/** 
 * Parsing function for animated bubble charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForAnimatedBubble = function parseForAnimatedBubble(input, chart_type, colors, chart, all_chart_options) {
    var output = {}; //obj that gets returned
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //set up array of data arrays to be used in the timeline. this data[time] will replace data in the initial series array when it's animated
    all_chart_options.timeline = {};
    all_chart_options.timeline.data = [];
    all_chart_options.timeline.dates = []; //e.g. years - to be populated by each row header.
    output.series = []; //initial series array - gets a seriesObj for each series

    //reset mins and maxes (used for placing invisible min and max sized bubbles so other bubbles aren't resized when animated)
    utils_main.limits.resetMax();

    //get data for each bubble and push to and timeline.dates

    $("tbody tr", input).each(function (i, row) {
        all_chart_options.timeline.dates.push($.trim($("th:eq(0)", row).text()));

        //    get data values from each row's td cells (every third cell for xyz groups)
        all_chart_options.timeline.data.push([]);
        $("td:nth-child(3n - 1)", row).each(function (j) {
            var x = $(this).getNumber();
            var y = $(this).next().getNumber();
            var z = $(this).next().next().getNumber();

            //get min and max bubble sizes to use later for invisible bubbles.
            utils_main.limits.setMax(z);
            utils_main.limits.setMin(z);

            var xyz_arr = [x, y, z];

            all_chart_options.timeline.data[i].push(xyz_arr);
        });
    });

    //for each series name in the top row of the table header make a series with a bubble for the first row in the tbody
    $("thead tr:eq(0) th:gt(0)", input).each(function (i) {
        var series_obj = {
            name: $.trim($(this).text()),
            data: [all_chart_options.timeline.data[0][i]],
            date: all_chart_options.timeline.dates[0],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            color: colors[i],
            _symbolIndex: 0
        };
        output.series.push(series_obj);
    });

    //put in the invisible placeholder series that are based on the min/max values - this way bubbles resize against a constant

    //put min and max arrays in
    for (var i = 0, len = all_chart_options.timeline.data.length; i < len; i++) {
        all_chart_options.timeline.data[i].unshift([0, 0, utils_main.limits.getMin()], [0, 0, utils_main.limits.getMax()]);
    }

    var min_size_placeholder = {
        name: "invisible min size placeholder series",
        data: [all_chart_options.timeline.data[0][0]],
        date: all_chart_options.timeline.dates[0],
        type: chart_type,
        lineWidth: 0,
        marker: {
            enabled: false
        },
        color: "none",
        showInLegend: false,
        zIndex: -1
    };

    var max_size_placeholder = $.extend({}, min_size_placeholder, {
        name: "invisible max size placeholder series",
        data: [all_chart_options.timeline.data[0][1]]
    });

    output.series.unshift(min_size_placeholder, max_size_placeholder);

    /** Creates and places a div containing a slider and play and pause buttons to animated the chart. Also set their functions  **/
    all_chart_options.timeline.animation = function () {

        //outer div//
        var chart_animation_div = document.createElement("div");
        $(chart_animation_div).css({
            position: "absolute",
            top: "33px",
            "margin-left": "20px",
            "z-index": "500",
            "margin-bottom": "-6px",
            "-webkit-user-select": "none"
        }).addClass("chart_animation_div");

        //animation title (i.e. date shown)//
        var animation_title = document.createElement("h3");

        $(animation_title).text(all_chart_options.timeline.dates[0]).css({
            margin: "0px",
            "font-family": "sans-serif",
            "font-weight": "200",
            color: "#337ab7",
            "font-size": "20px",
            position: "relative",
            top: "10px",
            float: "left"
        }).addClass("animation_title");

        //slider//
        var chart_slider = document.createElement("input");

        $(chart_slider).attr({
            type: "range",
            min: "0",
            max: all_chart_options.timeline.dates.length - 1,
            value: "0",
            class: "chart_slider"
        }).css({
            float: "left",
            "margin-right": "10px",
            color: "#337ab7",
            "font-size": "18px",
            cursor: "pointer",
            width: "350px",
            position: "relative",
            top: "15px"
        }).on("input change", function () {

            chart.tooltip.hide(0);

            var new_time_index = this.value;

            $.each(chart.series, function (i, e) {
                e.update({
                    data: [all_chart_options.timeline.data[new_time_index][i]]
                });
            });

            animation_title.textContent = all_chart_options.timeline.dates[new_time_index];
        });

        var playing; //becomes setTimeout function playing stepForward//

        //set step forward function//
        var stepForward = function stepForward() {

            var $chart_slider = $(chart_slider);
            $chart_slider.val() === $chart_slider.attr("max") ? $chart_slider.val(0).trigger("input") : $chart_slider.val(Number($chart_slider.val()) + 1).trigger("input");
        };

        //play button//
        var play_button = document.createElement("div");

        $(play_button).css({
            float: "left",
            "margin-right": "10px",
            color: "#337ab7",
            "font-size": "24px",
            cursor: "pointer",
            position: "relative",
            top: "4px"
        }).html("▶").addClass("chart_play_button").click(function () {

            if ($(this).hasClass("playing")) {
                //if playing, stop//
                $(this).removeClass("playing").html("▶");
                clearInterval(playing);
            } else {
                //if stopped, start playing//
                playing = setInterval(function () {
                    stepForward();
                }, 500);

                $(this).addClass("playing").html("&nbsp; ||");
            }
        });

        //put it all together in the div//
        chart_animation_div.appendChild(play_button);
        chart_animation_div.appendChild(chart_slider);
        chart_animation_div.appendChild(animation_title);

        var chart_id = "#" + all_chart_options.chart.renderTo;
        setTimeout(function () {
            $(chart_id).prepend(chart_animation_div);
        }, 100);
    };
    all_chart_options.timeline.animation();

    return output;
};

module.exports = parseForAnimatedBubble;

},{"../initializers/charts/chart_animation_init.js":30,"../utils/utils_main.js":71}],56:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for box plot charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart ("box_plot")
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForBoxPlot = function parseForBoxPlot(input, chart_type, colors) {
    console.log("parseForBoxPlot");

    var output = {};

    //load x-axis categories from row heads
    output.x_axis_categories = [];
    $("tbody th", input).each(function () {
        output.x_axis_categories.push($.trim($(this).text()));
    });

    //load series names from row heads, and data from row tds
    output.series = [];

    var this_row = $(this);

    //set up series objs
    var seriesObj = {
        ranges: [],
        data: [],
        type: "boxplot",
        showInLegend: false,
        marker: {
            enabled: false
        },
        color: colors[0]
    };

    //add in ranges from column heads

    $("thead th:gt(0)", input).each(function () {

        seriesObj.ranges.push($.trim($(this).text()));
    });

    $("tbody tr", input).each(function (i, tr) {

        var row_data = [];

        //get data values from each row's td cells (every third cell for xyz groups)
        $("td", tr).each(function (i) {
            row_data.push($(this).getNumber());
        });

        seriesObj.data.push(row_data);
    });

    output.series.push(seriesObj);
    return output;
};

module.exports = parseForBoxPlot;

},{}],57:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for bubble charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForBubble = function parseForBubble(input, chart_type, colors) {
    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            color: colors[i],
            _symbolIndex: 0
        };

        //get data values from each row's td cells (every third cell for xyz groups)
        $("td:nth-child(3n - 1)", this_row).each(function (i) {
            var x = $(this).getNumber();
            var y = $(this).next().getNumber();
            var z = $(this).next().next().getNumber();
            var xyz_arr = [x, y, z];
            seriesObj.data.push(xyz_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForBubble;

},{}],58:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

//get x or z val for bubbles
var getBubbleVal = function getBubbleVal(str) {
    if (str === "x") {
        return $(this).parent().next().next().getNumber();
    }
    if (str === "z") {
        return $(this).parent().next().next().next().getNumber();
    }
};

/** get an invisible bubble (so sizes are constant between drills) **/

var getInvisibleBubble = function getInvisibleBubble(size, output) {

    //given a series, calls utils_main.limits.setMin() for each data.z
    var getZ = function getZ(series, func) {
        $.each(series, function (i, serie) {
            $.each(serie.data, function (j, val) {
                func(val.z);
            });
        });
    };

    var invisible_bubble_series = {
        name: "invisible size placeholder series",
        x: 0,
        y: 0,
        z: 0,
        type: "bubble",
        lineWidth: 0,
        marker: {
            enabled: false
        },
        color: "none",
        showInLegend: false,
        visible: false,
        zIndex: -1
    };

    //if min, return a min size bubble
    if (size === "min") {

        utils_main.limits.resetMin();

        getZ(output.drilldown.series, utils_main.limits.setMin);
        getZ(output.series, utils_main.limits.setMin);

        invisible_bubble_series.z = utils_main.limits.getMin();
    } else {
        //else get max

        utils_main.limits.resetMax();

        getZ(output.drilldown.series, utils_main.limits.setMax);
        getZ(output.series, utils_main.limits.setMax);

        invisible_bubble_series.z = utils_main.limits.getMax();
    }

    return invisible_bubble_series;
};

/** creates and pushes a new series object into the drilldown.series array **/
var pushDrillSeries = function pushDrillSeries(output, drill_type, this_name, next_sub, this_drilldown) {

    output.drilldown.series.push({
        name: this_name,
        id: this_drilldown,
        data: [],
        type: drill_type,
        lineWidth: 0,
        sub: next_sub
    });
};

/** Parsing function for drilldown charts. See http://api.highcharts.com/highcharts#drilldown for more.
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param drill_type {string} type of drilldown (column or bar or bubble)
 * @param colors {array}
 * @returns {object} Object with series array and drilldown series array of objects*/
var parseForDrilldown = function parseForDrilldown(chart, input, drill_type, colors) {

    //returns a unique number for the drilldown ids
    var IDcounter = {
        count: 0,
        getNextID: function getNextID() {
            this.count++;
            return this.count;
        }

    };

    try {

        //main obj that gets a series and drilldown.series arrays and is returned
        var output = {};

        output.x_axis_categories = drill_type === "bubble" ? null : [];

        //top series array
        output.series = [{
            name: $.trim($("thead tr:first th:first", input).text()),
            colorByPoint: true,
            data: [],
            type: drill_type
        }];

        //drilldown object with a series array of objects - that will have a name, id, and data array

        //drilldown options, contains drilldown.series
        output.drilldown = {
            drillUpButton: {
                relativeTo: 'spacingBox',
                position: {
                    align: "right",
                    y: 0,
                    x: 0
                }
            },

            activeAxisLabelStyle: {
                cursor: drill_type === "bubble" ? "default" : "pointer",
                fontWeight: drill_type === "bubble" ? "normal" : "bold",
                textDecoration: "none"
            },

            series: []
        };

        //set for current chart
        if (chart) {
            chart.options.drilldown.drillUpButton = output.drilldown.drillUpButton;
            chart.options.drilldown.activeAxisLabelStyle = output.drilldown.activeAxisLabelStyle;
        }

        /** parsing function for top level series **/
        var parseTopLevel = function parseTopLevel() {
            var top_indexes = [];
            $("tbody th p", input).each(function (i) {
                if (!$(this).is('[class*="sub"]') || $(this).is('[class*="sub0"]')) {
                    //if class is sub0 or nothing

                    var this_name = $.trim($(this).text());
                    var this_val = $(this).parent().next().getNumber();

                    //check if there's levels beneath this
                    var this_drilldown = $("tbody th:eq(" + (i + 1) + ") p", input).is('[class="sub1"]') ? this_name : null;

                    //if so, set up a drilldown series obj
                    if (this_drilldown) {
                        this_drilldown = this_drilldown + "_" + IDcounter.getNextID();
                        top_indexes.push(i);
                        pushDrillSeries(output, drill_type, this_name, "sub1", this_drilldown);
                    }

                    output.series[0].data.push({
                        name: this_name,
                        x: drill_type === "bubble" ? getBubbleVal.call($(this), "x") : undefined,
                        y: this_val,
                        z: drill_type === "bubble" ? getBubbleVal.call($(this), "z") : undefined,
                        color: colors[output.series[0].data.length],
                        cursor: this_drilldown ? "pointer" : "default",
                        type: drill_type,
                        drilldown: this_drilldown,
                        lineWidth: 0,
                        sub: "sub0"
                    });
                }
            });

            return top_indexes;
        }; //end parseTopLevel

        /**parsing function for sub levels **/
        var drill_series_index = 0; // output.drilldown.series index (increments after this_sub === current_sub statement)

        var parseSubLevel = function parseSubLevel(current_sub, indexes) {
            var drill_found = false; //if returned false, loop will stop calling this func
            var indexes_count = 0; // gets incremented to move through indexes array
            var new_indexes = []; //keeps track of row indexes for start of each sub

            ///go through drilldown series array and populate with data

            $(output.drilldown.series).each(function (i, e) {

                var this_sub = this.sub;

                if (this_sub === current_sub) {
                    var high_i = indexes[indexes_count + 1] ? indexes[indexes_count + 1] : 10000000;
                    var low_i = indexes[indexes_count];

                    //go through each row with this sub and add them as an obj to that drilldown series data array
                    $("tbody th:lt(" + high_i + "):gt(" + low_i + ") p." + this_sub, input).each(function () {
                        var this_name = $(this).text();

                        var this_row = $(this).parent().parent();
                        var this_row_index = this_row.index();
                        var this_y = $("td:eq(0)", this_row).getNumber();

                        //check if there's a level beneath this
                        var next_sub = "sub" + Number(Number(this_sub.replace("sub", "")) + 1);
                        var this_drilldown = $("p", this_row.next()).is('[class="' + next_sub + '"]') ? this_name : null;

                        output.drilldown.series[drill_series_index].data.push({
                            name: this_name,
                            x: drill_type === "bubble" ? getBubbleVal.call($(this), "x") : undefined,
                            y: this_y,
                            z: drill_type === "bubble" ? getBubbleVal.call($(this), "z") : undefined,
                            sub: next_sub,
                            type: drill_type,
                            cursor: this_drilldown ? "pointer" : "default",
                            lineWidth: 0
                        });

                        //if there was a next sub level found, create that drilldown series with an id, name, and empty data array
                        if (this_drilldown) {

                            //assign drilldown id to this last series (just pushed)
                            this_drilldown = this_drilldown + "_" + IDcounter.getNextID();
                            output.drilldown.series[drill_series_index].data[output.drilldown.series[drill_series_index].data.length - 1].drilldown = this_drilldown;

                            drill_found = true;
                            new_indexes.push(this_row_index);

                            pushDrillSeries(output, drill_type, this_name, next_sub, this_drilldown);
                        }
                    }); //end loop through p.[sub]

                    drill_series_index++;
                    indexes_count++;
                } // end if specfific sub
            }); //end loop through output.drilldown.series

            return {
                drill_found: drill_found,
                indexes: new_indexes
            };
        }; //end parseSubLevel

        //make the top level series
        var top_indexes = parseTopLevel();

        //  loop through sub levels until no more drilldowns found
        var current_sub = 1;
        var drill_stat = parseSubLevel("sub" + current_sub, top_indexes);

        while (drill_stat.drill_found) {
            current_sub++;
            drill_stat = parseSubLevel("sub" + current_sub, drill_stat.indexes);
        }

        //if this is a bubble drilldown, make a min and max size bubble so sizing is constant between drills
        if (drill_type === "bubble") {

            //apend invisible series to each series and drilldown.series array

            var appendToEachSeries = function appendToEachSeries(series, obj) {
                $.each(series, function (i, serie) {
                    serie.data.push(obj);
                });
            };

            var min_invisible_bubble = getInvisibleBubble("min", output);
            var max_invisible_bubble = getInvisibleBubble("max", output);

            output.series[0].data.push(min_invisible_bubble);
            output.series[0].data.push(max_invisible_bubble);

            //  output.drilldown.series.push(max_invisible_bubble);

            appendToEachSeries(output.drilldown.series, max_invisible_bubble);
            appendToEachSeries(output.drilldown.series, min_invisible_bubble);
        }

        return output;
    } catch (e) {
        console.log(e.line, e.stack, e);
        utils_main.showError("Sorry, the table wasn't formatted correctly for a drilldown chart. Please see the example on the data tab.");
    }
};

module.exports = parseForDrilldown;

},{"../utils/utils_main.js":71}],59:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for maps  - adds values to all_map_options.areas based on table input
 * @module
 * @param all_map_options {object} main map object with path and svg options
 * @param input {element} input jquery table element retrieved from textarea
 * @returns {object} modded map object with path d's and fill colors
 */

var parseForMap = function parseForMap(all_map_options, table_input) {

    console.log("parsing for map");

    all_map_options.areas_not_found_from_table = [];

    $("tbody tr", $(table_input)).each(function () {
        //get location name, value, and extra values from table input

        var thisRow = this;
        var row_loc_name = $.trim($("th", thisRow).text().replace(/  +/g, ' ')); //location name

        //get number from cell, or get string if "colored by names" was checked. Main value that area will be colored by (from first column)

        if (all_map_options.is_colored_by_names) {
            var row_val = $.trim($("td:eq(0)", thisRow).text());
        } else {
            var row_val = $("td:eq(0)", thisRow).getNumber();
        }

        var extra_vals = []; //extra values
        var animated_vals = []; //animated values for animated maps

        //if animated, add animated titles and values
        if (all_map_options.is_animated) {

            //coloring by names, we push the text of the cell
            if (all_map_options.is_colored_by_names) {
                $("td", thisRow).each(function () {
                    animated_vals.push($.trim($(this).text()));
                });
            } else {
                //otherwise (not colored by names) we push the number value
                $("td", thisRow).each(function () {
                    animated_vals.push($(this).getNumber());
                });
            }

            //else (not animated) add extra value titles and values
        } else {
                $("td:gt(0)", thisRow).each(function () {
                    extra_vals.push($.trim($(this).text()));
                });
            }

        var found = false; //used for areas not found report

        //assign values on objs in all_map_options.areas array
        for (var i = 0, len = all_map_options.areas.length; i < len; i++) {
            if (all_map_options.areas[i].loc_name) {

                //match table row names to area names from map json (replace to match different format styles)
                if (all_map_options.areas[i].loc_name.replace(" County", "").replace(" Parish", "").replace("St. ", "St ") === row_loc_name.replace(" County", "").replace(" Parish", "").replace("St. ", "St ").replace(/Washington, D\.*C\.*/, "District of Columbia") || all_map_options.map_type === "region" && all_map_options.areas[i].region === row_loc_name || all_map_options.map_type === "division" && all_map_options.areas[i].division === row_loc_name) {

                    all_map_options.areas[i].value = row_val;
                    all_map_options.areas[i].extra_vals = extra_vals;
                    all_map_options.areas[i].animated_vals = animated_vals;

                    found = true;

                    if (["metro_area", "state", "county"].indexOf(all_map_options.map_type) > -1) {
                        break;
                    }
                }
            }
        }

        //if an area from the table is not found in the map, push it to the array to show in the report
        if (!found) {
            all_map_options.areas_not_found_from_table.push(row_loc_name);
        }
    }); //end tbody tr loop

    //adds titles to an array from THs
    var addTitles = function addTitles(i, arr) {
        $("thead th:gt(" + i + ")", $(table_input)).each(function () {
            all_map_options[arr].push($.trim($(this).text()));
        });
    };

    //if animated, add animated titles and values
    if (all_map_options.is_animated) {
        addTitles(0, "animated_value_titles");

        //else add extra value titles and values
    } else {
            addTitles(1, "extra_value_titles");
        }
};

module.exports = parseForMap;

},{}],60:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for pie charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForPie = function parseForPie(input, chart_type, colors) {

    var output = {};

    output.x_axis_categories = []; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [{
        data: [],
        type: chart_type
    }];

    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var slice = {
            y: $("td:first", this_row).getNumber(),
            name: $.trim($("th:first", this_row).text()),
            color: colors[i]
        };

        output.series[0].data.push(slice);
    });

    return output;
};

module.exports = parseForPie;

},{}],61:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for range chart types. Values in the first column will load as a line or just markers depending on type of range. Then, values from the second column will load as the top range, and values from the third column will load as the bottom range. To load more lines with ranges, add more columns.
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param load_series_from {string} column_heads or column_rows
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */

var parseForRange = function parseForRange(input, chart_type, colors) {

    var type = chart_type.replace("stacked_", "");

    var output = {};
    output.series = [];

    //load x-axis categories from row heads
    output.x_axis_categories = [];
    $("tbody th", input).each(function () {
        output.x_axis_categories.push($.trim($(this).text()));
    });

    //load series object names from column heads, and data from each column tds

    $("thead tr:last th:nth-child(3n - 1)", input).each(function (i) {
        var seriesObj = {
            name: $.trim($(this).text()),
            data: [],
            type: "line",
            lineWidth: chart_type === "columnrange" ? 0 : 1,
            marker: {
                enabled: chart_type === "columnrange"
            },
            color: colors[i],
            _symbolIndex: 0,
            stacking: null,
            zIndex: 1
        };

        //data from each column's tds
        $("tbody tr", input).each(function () {
            var this_row = $(this);
            $("td:eq(" + i + ")", this_row).each(function () {
                seriesObj.data.push($(this).getNumber());
            });
        });

        //get range series
        var rangeObj = {
            name: $.trim($(this).text()) + ' range',
            data: [],
            type: chart_type,
            lineWidth: 0,
            linkedTo: ':previous',
            color: chart_type === "columnrange" ? colors[i + 1] : colors[i],
            fillOpacity: 0.3,
            zIndex: 0,
            stacking: null
        };

        //data from next 2 columns
        $("tbody tr", input).each(function () {
            var this_row = $(this);
            $("td:eq(" + (i + 1) + ")", this_row).each(function () {
                var high = $(this).getNumber();
                var low = $(this).next().getNumber();
                rangeObj.data.push([low, high]);
            });
        });

        output.series.push(seriesObj);
        output.series.push(rangeObj);
    });

    return output;
};

module.exports = parseForRange;

},{}],62:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for scatter charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForScatter = function parseForScatter(input, chart_type, colors) {

    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true,
                symbol: "circle"
            },
            color: colors[i - Math.floor(i / 15) * 15],
            _symbolIndex: 0
        };

        //get data values from each row's td cells
        $("td:even", this_row).each(function (i) {
            var x = $(this).getNumber();
            var y = $(this).next().getNumber();
            if (y === null || y === undefined) {
                $(".alert-danger").text("Sorry, the table wasn't formatted correctly for a scatter chart. Please see the example on the data tab.");

                setTimeout(function () {
                    $(".alert-danger").text("");
                }, 10000);
            }

            var xy_arr = [x, y];

            seriesObj.data.push(xy_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForScatter;

},{}],63:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for typical chart types (line, bar, column) 
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param load_series_from {string} column_heads or column_rows
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */

var parseForTypicalChart = function parseForTypicalChart(input, load_series_from, chart_type, legend_toggle_enabled, colors) {

    var type = chart_type.replace("stacked_", "");

    var output = {};
    output.series = [];

    /** If loading series names from column heads is selected*/
    if (load_series_from === "column_heads") {
        //load x-axis categories from row heads
        output.x_axis_categories = [];
        $("tbody th", input).each(function () {
            output.x_axis_categories.push($.trim($(this).text()));
        });

        //load series object names from column heads
        $("thead tr:last th:gt(0)", input).each(function (i) {
            var seriesObj = {
                name: $.trim($(this).text()),
                data: [],
                type: type,
                color: colors[i],
                _symbolIndex: 0,
                stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null,
                visible: i > 0 && legend_toggle_enabled === true ? false : true

            };

            output.series.push(seriesObj);
        });

        //make matrix from table body tds
        var matrix = [];

        $("tbody tr", input).each(function (row_index, row) {
            matrix.push([]);
            $("td", row).each(function (td_index, td) {
                matrix[row_index].push($(td).getNumber());
            });
        });

        //populate series data arrays from the matrix
        output.series.forEach(function (series, i) {
            matrix.forEach(function (arr, j) {
                series.data.push(arr[i]);
            });
        });

        /** Else if loading series names from row heads is selected*/
    } else {

            //load x-axis categories from column heads
            output.x_axis_categories = [];
            $("thead th:gt(0)", input).each(function () {
                output.x_axis_categories.push($.trim($(this).text()));
            });

            //load series object names from row heads, and data from row tds
            $("tbody tr", input).each(function (i, this_row) {

                var seriesObj = {
                    name: $.trim($("th:eq(0)", this_row).text()),
                    data: [],
                    type: type,
                    color: colors[i],
                    _symbolIndex: i,
                    stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null,
                    visible: i > 0 && legend_toggle_enabled === true ? false : true
                };

                //get data values from each row's td cells
                $("td", this_row).each(function () {
                    seriesObj.data.push($(this).getNumber());
                });

                output.series.push(seriesObj);
            });
        }

    return output;
};

module.exports = parseForTypicalChart;

},{}],64:[function(require,module,exports){
"use strict";

/* takes the table html from a given textarea and parses it into an object, depending on user-selected inputs */

/* parsing function for typical chart types (line, bar, column) */
var parseForTypicalChart = require("./parse_for_typical_chart.js");

/* parsing function for range charts */
var parseForRange = require("./parse_for_range.js");

/* parsing function for scatter charts */
var parseForScatter = require("./parse_for_scatter.js");

/* parsing function for box plot charts */
var parseForBoxPlot = require("./parse_for_box_plot.js");

/* parsing function for bubble charts */
var parseForBubble = require("./parse_for_bubble.js");

/*parsing function for pie charts */
var parseForPie = require("./parse_for_pie.js");

/* parsing function for animated bubble charts */
var parseForAnimatedBubble = require("./parse_for_animated_bubble.js");

/* parsing function for drilldown charts */
var parseForDrilldown = require("./parse_for_drilldown.js");

var utils_main = require("../utils/utils_main.js");

/** 
 * Function that decides which parse function to run, depending on chart type
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param load_series_from {string} column_heads or column_rows
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */

var parseTableInput = function parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, colors, chart, all_chart_options) {

    try {

        if (chart) {
            chart.yAxis[0].update({
                lineWidth: chart_type == "pie" ? 0 : 1
            });

            chart.xAxis[0].update({
                lineWidth: chart_type == "pie" ? 0 : 1
            });
        }

        var output = {};

        //if animated map is playing, stop it and remove - also prevents errors
        $(".map_play_button.playing").click();
        $(".chart_animation_div").remove();

        /** Depending on the chart type, start that parsing */
        if (["area", "line", "bar", "stacked_bar", "column", "stacked_column"].indexOf(chart_type) > -1) {
            output = parseForTypicalChart(input, load_series_from, chart_type, legend_toggle_enabled, colors);
        } else if (chart_type == "pie") {

            output = parseForPie(input, chart_type, colors);
        } else if (chart_type == "arearange" || chart_type == "columnrange") {
            output = parseForRange(input, chart_type, colors);
        } else if (chart_type == "bubble") {
            if ($("#bubble_animated_checkbox").is(':checked')) {
                output = parseForAnimatedBubble(input, chart_type, colors, chart, all_chart_options);
            } else {
                output = parseForBubble(input, chart_type, colors);
            }
        } else if (chart_type == "scatter") {
            output = parseForScatter(input, chart_type, colors);
        } else if (chart_type == "drilldown") {
            var drill_type = $("#drilldown_type_select").val();
            output = parseForDrilldown(chart, input, drill_type, colors);
        } else if (chart_type == "boxplot") {
            output = parseForBoxPlot(input, chart_type, colors);
        }

        //add chart title (same for all types of charts)
        output.title_text = $("caption", input).text();

        // console.log("out", output);
        return output;
    } catch (e) {
        utils_main.showError("Sorry, the table wasn't formatted correctly for a " + chart_type + " chart. Please see the example on the data tab.");
    }
};

module.exports = parseTableInput;

},{"../utils/utils_main.js":71,"./parse_for_animated_bubble.js":55,"./parse_for_box_plot.js":56,"./parse_for_bubble.js":57,"./parse_for_drilldown.js":58,"./parse_for_pie.js":60,"./parse_for_range.js":61,"./parse_for_scatter.js":62,"./parse_for_typical_chart.js":63}],65:[function(require,module,exports){
"use strict";

/** 
Contains functions that make a report showing what areas from the given map were colored and what weren't
@module
**/
var areas_colored_report = {

    /** gerates the report **/
    generateReport: function generateReport(all_map_options) {

        var areas_colored = [];
        var areas_not_colored = [];

        $.each(all_map_options.areas, function (i, e) {

            if (e.loc_name && e.value != undefined) {
                //if the area has a value
                areas_colored.push(e.loc_name);
            } else if (e.loc_name) {
                //if it's null or undefined
                areas_not_colored.push(e.loc_name);
            }
        });
        //  console.log(areas_not_colored);

        //alphabetize lists
        areas_colored.sort();
        areas_not_colored.sort();
        all_map_options.areas_not_found_from_table.sort();

        //bind to link and popup box
        $(".alert-danger").text($(areas_colored.length).addCommas() + " areas colored. Click for details.").css({
            "cursor": "pointer",
            "text-decoration": "underline"
        }).unbind().click(function () {
            areas_colored_report.showReport(all_map_options, areas_colored, areas_not_colored);
        });
    },

    /** bind clicking the alert-danger text popup to bring up the areas colored report **/
    showReport: function showReport(all_map_options, areas_colored, areas_not_colored) {
        $("#areas_colored_report_div").slideDown(50, function () {
            $("#areas_colored_textarea").val(areas_colored.join("\n"));
            $("#areas_not_colored_textarea").val(areas_not_colored.join("\n"));
            $("#areas_not_found_from_table_textarea").val(all_map_options.areas_not_found_from_table.join("\n"));
        });
    }

};

module.exports = areas_colored_report;

},{}],66:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** calculate recession dates function 
@namespace
**/

var calculate_recession_dates = {

    /** calculate recession dates function  **/
    createPlotBands: function createPlotBands(x_axis_categories, dates_type) {

        //load new plotbands
        var plot_bands_arr = [];

        if (dates_type === "no_recession") {
            return plot_bands_arr;
        }

        if (dates_type === "quarterly_recession") {
            ///quarterly dates
            var recession_dates_starts_array = ["Q2 1953", "Q3 1957", "Q2 1960", "Q4 1969", "Q4 1973", "Q1 1980", "Q3 1981", "Q3 1990", "Q1 2001", "Q4 2007"];
            var recession_date_ends_array = ["Q2 1954", "Q2 1958", "Q1 1961", "Q4 1970", "Q1 1975", "Q3 1980", "Q4 1982", "Q1 1991", "Q4 2001", "Q2 2009"];
        }

        if (dates_type === "monthly_recession") {
            //monthly dates
            var recession_dates_starts_array = ["Jul 1953", "Aug 1957", "Apr 1960", "Dec 1969", "Nov 1973", "Jan 1980", "Jul 1981", "Jul 1990", "Mar 2001", "Dec 2007"];
            var recession_date_ends_array = ["May 1954", "Apr 1958", "Feb 1961", "Nov 1970", "Mar 1975", "Jul 1980", "Nov 1982", "Mar 1991", "Nov 2001", "Jun 2009"];
        }

        if (dates_type === "eci_recession") {
            //ECI dates
            var recession_dates_starts_array = ["Jun 1953", "Sep 1957", "Jun 1960", "Dec 1969", "Dec 1973", "Mar 1980", "Sep 1981", "Sep 1990", "Mar 2001", "Dec 2007"];
            var recession_date_ends_array = ["Jun 1954", "Jun 1958", "Mar 1961", "Dec 1970", "Mar 1975", "Sep 1980", "Dec 1982", "Mar 1991", "Dec 2001", "Jun 2009"];
        }

        var plot_band_starts_arr = [];
        var plot_band_ends_arr = [];

        ///get start indexes
        for (var i = 0, len = recession_dates_starts_array.length; i < len; i++) {
            var found_start_index = x_axis_categories.indexOf(recession_dates_starts_array[i]);
            if (found_start_index >= 0) {
                plot_band_starts_arr.push(found_start_index);
            }
        }

        ///get ends indexes
        for (var i = 0, len = recession_date_ends_array.length; i < len; i++) {
            var found_end_index = x_axis_categories.indexOf(recession_date_ends_array[i]);
            if (found_end_index >= 0) {
                plot_band_ends_arr.push(found_end_index);
            }
        }

        //fix if lengths aren't the same (if chart starts or ends in the middle of a recession)
        if (plot_band_starts_arr[0] > plot_band_ends_arr[0]) {
            plot_band_starts_arr.unshift(0);
        }

        if (plot_band_ends_arr.length < plot_band_starts_arr.length) {
            plot_band_ends_arr.push(x_axis_categories.length - 1);
        }

        if (plot_band_ends_arr.length > plot_band_starts_arr.length) {
            plot_band_starts_arr.unshift(0);
        }

        ///alert if not found
        if (plot_band_starts_arr.length == 0) {
            utils_main.showError("There are no matching recession dates, or your dates aren't formatted in the needed style.");
        } else {
            for (var i = 0, len = plot_band_starts_arr.length; i < len; i++) {
                var newPlotBand = {
                    color: 'rgb(222, 222, 222)',
                    from: plot_band_starts_arr[i],
                    to: plot_band_ends_arr[i]
                };
                plot_bands_arr.push(newPlotBand);
            }
        }
        return plot_bands_arr;
    },

    /** add the recession plot bands array to the actual chart **/
    insertPlotBands: function insertPlotBands(plot_bands_arr, chart, all_chart_options) {

        chart.xAxis[0].update({
            plotBands: plot_bands_arr
        });

        //add note about recession shading if applicable
        if (plot_bands_arr.length === 1) {
            var credits = "Shaded area represents a recession as determined by the National Bureau of Economic Research.\nClick legend items to change data display. Hover over chart to view data.\nSource: U.S. Bureau of Labor Statistics.";
        } else if (plot_bands_arr.length > 1) {
            var credits = "Shaded areas represent recessions as determined by the National Bureau of Economic Research.\nClick legend items to change data display. Hover over chart to view data.\nSource: U.S. Bureau of Labor Statistics.";
        } else {
            var credits = "Click legend items to change data display. Hover over chart to view data.\nSource: U.S. Bureau of Labor Statistics.";
        }
        $("#chart_credits_text_textarea").val(credits);

        all_chart_options.xAxis.plotBands = plot_bands_arr;
    }

};

module.exports = calculate_recession_dates;

},{"../utils/utils_main.js":71}],67:[function(require,module,exports){
"use strict";

var utils_forms = require("./utils_forms.js");

/**
 * Contains functions that deal with chart (options selected and data loaded) saving and loading
 * @namespace
 */

var chart_recall = {

    /** reads all of the page's selectable options and loads values into an object **/

    saveValues: function saveValues() {
        //object to load each input's values and ID's into (textareas, selects, checkboxes, div icons etc )
        var saved_values = [];

        $("input, select, textarea, #chart_type_icons, #table_input_load_series_from_icons, #color_palettes, .series_type_div", $("#side_main")).each(function () {

            if (this.nodeName === "DIV") {
                var input_val = $(this).children("[class*='selected']").divVal();
            } else {
                var input_val = this.type === "checkbox" ? utils_forms.getCheckBoxValue($(this)) : $(this).val();
            }

            saved_values.push({
                id: $(this).attr("id"),
                val: input_val
            });
        });
        return saved_values;
    },

    /** takes input (originally from #load_chart_textarea, parses it, and sets option values accordingly, to load a saved chart) **/

    loadValues: function loadValues(chart, all_chart_options, input) {
        var utils_main = require("./utils_main.js");
        try {
            input = JSON.parse(input);
        } catch (e) {
            utils_main.showError("Sorry, the JSON parsing didn't work. Please double check your input. " + e);
        }

        /** goes through an array of objects with id / val, sets elements with a given ID to that value **/
        var setValues = function setValues(arr, set_individual_series /*bool*/) {
            var individual_series_options = []; //gets populated if series_color and line_style_select are found

            $.each(arr, function () {

                if (!set_individual_series && this.id.match(/series_color|series_type_div|line_style_select|series_visible_checkbox|series_extra_data/)) {
                    //look if this id has to do with individual series options
                    individual_series_options.push(this);
                } else {

                    var element = document.getElementById(this.id);
                    if (element) {
                        if (element.nodeName === "DIV") {
                            $(element).children().removeClass("selected");
                            $(element).children("[value='" + this.val + "']").addClass("selected");
                            $(element).children("[type='" + this.val + "']").click();
                        } else if (element.type === "checkbox") {
                            element.checked = this.val;
                        } else {
                            element.value = this.val;
                        }
                    } else {
                        console.log(this.id + " not found");
                    }
                }
            });

            return individual_series_options;
        }; //end setValues

        var individual_series_options = setValues(input, false); //false to not set indivdual series yet

        //initial all chart options init and redraw chart
        var allChartOptionsInit = require("../initializers/charts/all_chart_options_init.js");
        var draw_chart = require("../draw_chart.js");
        var chart_type = $("#chart_type_icons .selected").divVal();
        all_chart_options = allChartOptionsInit(chart_type);
        chart = undefined;
        chart = draw_chart.init(all_chart_options, draw_chart.chartCallback);

        //reinit form updates bindings
        var allFormUpdates = require("../form_updates/all_form_updates.js");
        allFormUpdates(chart, all_chart_options);

        //re populate the individual series options forms
        var update_individual_series = require("../form_updates/update_individual_series.js");
        update_individual_series.populateForm(chart, all_chart_options);
        setValues(individual_series_options, true); //true to set indivdual series now

        /*  trigger changes to update chart  */

        //line style changes
        $(".line_style_select, .series_visible_checkbox").each(function () {
            $(this).change();
        });

        //extra data
        $(".series_extra_data_title_textarea, .series_extra_data_values_textarea").trigger('propertychange');

        //chart size
        $("#chart_width_textinput, #chart_height_textinput").keyup();

        //individual color changes
        $(".jscolor").each(function (i) {
            var color = "#" + $(this).val();
            update_individual_series.updateSeriesColor(chart, all_chart_options, i, color);
            $(this).focus().blur();
        });

        //add recession shading
        $("#chart_add_recession_shading_select").change();

        //click selected chart type (refreshes some .just_ options showing) FIX - this makes it all one type of chart
        allFormUpdates.displayOptions(chart_type);
        //  $("#chart_type_icons .selected").click();

        window.scrollTo(0, 0); //scrolls to top
    },

    /** when load_chart_button is clicked, load the input options from #load_chart_textarea and update the chart **/

    initLoad: function initLoad(chart, all_chart_options) {

        $("#load_chart_button").unbind().click(function () {
            var re = /"saved_values": *(\[[\s\S]+}\])/; //looks for saved values array of objects
            var input = $("#load_chart_textarea").val().match(re)[1]; //separate all_chart_options obj from textarea

            $("#load_chart_div").hide(function () {
                //hide this area (makes loading much faster)
                if (input.length > 0) {
                    chart_recall.loadValues(chart, all_chart_options, input);
                    $("#show_load_chart_area_button").removeClass("load_chart_showing");
                };
            });
        });
    }

};

module.exports = chart_recall;

},{"../draw_chart.js":14,"../form_updates/all_form_updates.js":15,"../form_updates/update_individual_series.js":21,"../initializers/charts/all_chart_options_init.js":29,"./utils_forms.js":70,"./utils_main.js":71}],68:[function(require,module,exports){
"use strict";

/** 
 * custom jQuery extensions
 * @module
 */
var jq_extensions = function () {

    jQuery.fn.extend({

        /** extend so that we can get and set "value" with divs */
        divVal: function divVal(string) {
            if (arguments.length === 0) {
                return $(this).attr("value") || $(this).attr("type") || $(this).index();
            } else {
                $(this).attr("value", string);
                return $(this);
            }
        },

        /** puts commas in a number */
        addCommas: function addCommas(decimals) {

            var val = this[0] || 0;

            if (isNaN(val) || val < 999 && val > -999 && decimals < 1) {
                //small numbers auto decimals
                return val;
            } else if (val < 999 && val > -999 && decimals > 0) {
                //small numbers fixed decimals
                return val.toFixed(decimals);
            } else if ((val > 999 || val < -999) && decimals > 0) {
                //big numbers fixed decimals
                while (/(\d+)(\d{3})/.test(val.toString())) {
                    val = val.toFixed(decimals).replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
                }
            } else if (val > 999 || val < -999) {
                //big number auto decimals
                while (/(\d+)(\d{3})/.test(val.toString())) {
                    val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
                }
            }

            return val;
        },

        /** takes an element's text string and returns a number, trimming spaces and removing non-numbers (good for numbers with commas etc.)*/
        getNumber: function getNumber() {
            var val = $.trim($(this).text().replace(/\(.*\)/, "").replace(/[^0-9\.\-]+/g, ''));

            return val === "" || isNaN(Number(val)) ? null : Number(val);
        },

        /** gets a .val() but returns 0 if isNaN **/
        getValNumber: function getValNumber() {
            return isNaN(Number($(this).val())) ? 0 : Number($(this).val());
        },

        /** outer html - not just inner as default **/

        outerHTML: function outerHTML(replacement) {
            // We just want to replace the entire node and contents with
            // some new html value
            if (replacement) {
                return this.each(function () {
                    $(this).replaceWith(replacement);
                });
            }

            /*
             * Now, clone the node, we want a duplicate so we don't remove
             * the contents from the DOM. Then append the cloned node to
             * an anonymous div.
             * Once you have the anonymous div, you can get the innerHtml,
             * which includes the original tag.
             */
            var tmp_node = $("<div></div>").append($(this).clone());
            var markup = tmp_node.html();

            // Don't forget to clean up or we will leak memory.
            tmp_node.remove();
            return markup;
        }

    });
}();

module.exports = jq_extensions;

},{}],69:[function(require,module,exports){
"use strict";

/** checks if the app was loaded from the Better Table Wizard, and if so, loads that table and selects that icon 
@module
**/

var loadFromTableWizard = function () {
    if (window.opener) {

        if (window.opener.importedTable && window.opener.importedTable.length > 0) {

            $(".chart_type_icon").removeClass("selected");

            $("#" + window.opener.importedChartType).addClass("selected");

            $("#table_input_textarea").val(window.opener.importedTable);

            window.opener.importedTable = null; //clear it so when page refreshes it's not the same table still
        }
    }
}();

module.exports = loadFromTableWizard;

},{}],70:[function(require,module,exports){
"use strict";

/**
 * Forms utility object, contains functions that work with form elements
 * @namespace
 */
var utils_forms = {

    /** when Unpack button (beautify_code_button) is clicked, this unpacks the JS output using beautify.js **/
    beautifyCode: function () {
        $("#beautify_code_button").click(function () {

            var input = "<script>" + document.getElementById("chart_output_code").value + "</script>";
            var output = html_beautify(input);
            document.getElementById("chart_output_code").value = output.replace("<script>", "").replace("</script>", "");

            $(this).text("Unpacked!");
            setTimeout(function () {
                $("#beautify_code_button").text("Unpack");
            }, 10000);
        });
    }(),

    /** When clipboard icon is clicked, this copies the next textarea to a clipboard **/
    copyToClipBoard: function () {
        $(".copy_to_clipboard_button").click(function () {

            var copied_text = $(this).nextAll("textarea:eq(0)").select();
            var copy_message_span = $(this).next().children(".copy_message");

            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'Copied!' : 'Not copied! Try again in a few seconds.';
                copy_message_span.text(msg);

                setTimeout(function () {
                    //hide message after a bit
                    copy_message_span.text("");
                }, 2000);
            } catch (err) {
                alert("Your browser won't allow this to copy - please do it manually");
            }
        });
    }(),

    /** When download .js icon is clicked, this will create and download a .js file from the .js text area **/
    downloadJSFile: function () {

        $("#download_js_button").click(function () {
            var text = $("#chart_output_code").val();
            var filename = $("#js_filename_textarea").val();
            filename = filename != "" ? filename : $("#chart_id_textinput").val();
            var blob = new Blob([text], {
                type: "text/plain;charset=utf-8"
            });
            saveAs(blob, filename + ".js");
        });
    }(),

    /** When download .js icon is clicked, this will create and download a .js file from the .js text area **/
    downloadHTMLFile: function () {

        $("#download_html_button").click(function () {
            var text = $("#chart_html_code").val();
            var filename = $("#html_filename_textarea").val();
            filename = filename != "" ? filename : $("#chart_id_textinput").val();
            var blob = new Blob([text], {
                type: "text/plain;charset=utf-8"
            });
            saveAs(blob, filename + ".htm");
        });
    }(),

    /** when download chart image icon is clicked, this will covert the svg to canvas then to png and download **/

    downloadChartImage: function () {

        $("#download_chart_image_button").click(function () {

            var svgString = null;

            console.log($("#chart_type_icons .selected").divVal());
            if ($("#chart_type_icons .selected").divVal() === "map") {
                svgString = $("svg.map_svg").outerHTML();
            } else {
                svgString = $("#highcharts-0 svg").outerHTML();

                console.log("MAP");
            }

            var canvas = document.getElementById("chart_image_canvas");
            canvas.width = $("#chart_width_textinput").val();
            canvas.height = $("#chart_height_textinput").val();

            var ctx = canvas.getContext("2d");
            var DOMURL = self.URL || self.webkitURL || self;
            var img = new Image();

            var svg = new Blob([svgString], {
                type: "image/svg+xml;charset=utf-8"
            });

            var url = DOMURL.createObjectURL(svg);

            img.onload = function () {
                ctx.drawImage(img, 0, 0);

                var png = canvas.toDataURL("image/png");
                //  document.querySelector('#chart_image_container').innerHTML = '<img src="' + png + '"/>';
                DOMURL.revokeObjectURL(png);

                var filename = $("#chart_image_filename_textarea").val();
                filename = filename != "" ? filename : $("#chart_id_textinput").val();
                canvas.toBlob(function (blob) {
                    saveAs(blob, filename);
                });
            };

            img.src = url;
        });
    }(),

    /** returns true if checkbox is checked, false if not 
    @param elem {element} checkbox element
    @returns {bool}
    */
    getCheckBoxValue: function getCheckBoxValue(elem) {
        return elem.is(':checked');
    },

    /** gets an array of values from a given class 
    @param class_name {string}
    @returns {array}
    */
    getClassValuesArray: function getClassValuesArray(class_name) {
        var arr = [];
        $("." + class_name).each(function () {
            arr.push(Number($(this).val()));
        });
        return arr;
    },

    /** given a group of elements, this gives the index of an element with a class of "selected" **/
    getSelectedIndex: function getSelectedIndex(elem) {
        var selected_index = 0;
        elem.each(function (i) {
            if ($(this).hasClass("selected")) {
                selected_index = i;
            }
        });

        return selected_index;
    }

};

module.exports = utils_forms;

},{}],71:[function(require,module,exports){
"use strict";

/**
 * Main utility object, contains functions that get reused often, including the code writing
 * @namespace
 */
var utils_main = {

    /** check value - if 0 or not a number, return undefined **/
    checkForUndefined: function checkForUndefined(val) {
        if (val === "0") {
            return 0;
        }

        if (isNaN(val) || val === "") {
            return undefined;
        }

        return Number(val);
    },

    /** 
    turns objects into strings, methods are stringified and put in an array to replace placeholders in the JSON later
    @returns {string} JSON
    */
    deepStringify: function deepStringify(obj) {
        var update_tooltip = require("../form_updates/update_tooltip.js");
        var update_y_axis = require("../form_updates/update_y_axis.js");
        var update_x_axis = require("../form_updates/update_x_axis.js");

        var fn_count = 0;

        var stringified_obj = {
            string: "",
            functions_arr: []
        };

        stringified_obj.string = JSON.stringify(obj, function (key, value) {

            //functions are named "function1, function2" and later replaced with the real function after the rest of the json has been stringified
            if (typeof value === 'function') {

                //combine y axis and tooltip replacement objs
                var replacements_obj = $.extend({}, update_x_axis.replacement_obj);
                //update_tooltip.replacement_obj,
                //put these string functions in the array for later
                stringified_obj.functions_arr.push(utils_main.stringifyFormatter(value, replacements_obj));

                // use a placeholder text in this json
                var fn_placeholder = "function" + fn_count;

                fn_count++;
                return fn_placeholder;
            } else {
                return value;
            }
        });

        return stringified_obj;
    },

    /** if drilled into a drilldown, click the up button to get out - prevents errors **/
    drillUp: function drillUp() {
        while ($(".highcharts-button").length > 0) {
            $(".highcharts-button").click();
        }
    },

    /** functions to set or return min max values **/
    limits: {

        max: 0,
        min: undefined,

        setMax: function setMax(val) {
            utils_main.limits.max = val > utils_main.limits.max ? val : utils_main.limits.max;
        },

        setMin: function setMin(val) {
            if (utils_main.limits.min === undefined) {
                utils_main.limits.min = val;
            } else {
                utils_main.limits.min = val < utils_main.limits.min ? val : utils_main.limits.min;
            }
        },

        resetMax: function resetMax() {
            utils_main.limits.max = 0;
        },

        resetMin: function resetMin() {
            utils_main.limits.min = undefined;
        },

        getMax: function getMax() {
            return utils_main.limits.max;
        },

        getMin: function getMin() {
            return utils_main.limits.min;
        }
    },

    /** 
    creates and returns a clearfloat class div
    @returns {element} div with "clearfloat" class
    */
    makeClearFloatDiv: function makeClearFloatDiv() {
        var clear_div = document.createElement("div");
        clear_div.className = "clearfloat";
        return clear_div;
    },

    /** looks at an array, takes string "false" or "null" and returns false or null **/
    parseBoolsFromArray: function parseBoolsFromArray(arr) {
        return arr.map(function (e) {
            if (e === "true") {
                return true;
            } else if (e === "false") {
                return false;
            } else if (e === "null") {
                return null;
            } else {
                return e;
            }
        });
    },

    /** Converts an rgb string to an array of 3 values**/
    rgb2arr: function rgb2arr(rgb) {
        return rgb.replace(/[^0-9\,]+/g, '').split(",").map(function (item) {
            return parseInt(item, 10);
        });
    },

    /** Displays an error message for a few seconds**/
    showError: function showError(string) {
        $(".alert-danger").text(string);
        setTimeout(function () {
            $(".alert-danger").text("");
        }, 8000);
    },

    /** stringify tooltip / y-axis formatter function **/
    stringifyFormatter: function stringifyFormatter(formatter, replacement_obj) {

        var formatter_str = formatter.toString().replace(/\/\/.*\/\//g, ""); //replace notes in between //...//

        //x,y,z signs array replacements

        formatter_str = formatter_str
        //    .replace(/y_signs_arr\[0\]/g, '"' + replacement_obj.y_signs_arr[0] + '"')
        //    .replace(/y_signs_arr\[1\]/g, '"' + replacement_obj.y_signs_arr[1] + '"')
        //    .replace(/x_signs_arr\[0\]/g, '"' + replacement_obj.x_signs_arr[0] + '"')
        //    .replace(/x_signs_arr\[1\]/g, '"' + replacement_obj.x_signs_arr[1] + '"')
        //    .replace(/z_signs_arr\[0\]/g, '"' + replacement_obj.z_signs_arr[0] + '"')
        ///    .replace(/z_signs_arr\[1\]/g, '"' + replacement_obj.z_signs_arr[1] + '"')
        .replace(/x_axis_signs_arr\[0\]/g, '"' + replacement_obj.x_axis_signs_arr[0] + '"').replace(/x_axis_signs_arr\[1\]/g, '"' + replacement_obj.x_axis_signs_arr[1] + '"');

        for (name in replacement_obj) {
            var re = new RegExp("\\b" + name, "g");

            if (isNaN(Number(replacement_obj[name]))) {
                //replace strings with quotes
                formatter_str = formatter_str.replace(re, '"' + replacement_obj[name] + '"');
            } else {
                formatter_str = formatter_str.replace(re, replacement_obj[name]); //replace numbers without quotes
            }

            formatter_str = formatter_str.replace('+ ""', "").replace('"" +', "").replace(/y \* 1(?!0)/g, "y").replace(/value \/ 1(?!0)/g, "value"); //replace empty strings and remove divide or times by 1
        }

        return formatter_str;
    },

    /** returns a sorted array, given an array of objects, each with a value key **/
    valueSort: function valueSort(arr) {
        var values_arr = [];
        $.each(arr, function () {
            if (this.value) {
                values_arr.push(this.value);
            }
        });
        values_arr.sort(function (a, b) {
            return a - b;
        });

        return values_arr;
    }
};

module.exports = utils_main;

},{"../form_updates/update_tooltip.js":26,"../form_updates/update_x_axis.js":27,"../form_updates/update_y_axis.js":28}],72:[function(require,module,exports){
"use strict";

var chart_recall = require("./chart_recall.js");
var utils_main = require("./utils_main.js");
/** functions for chart / map code output 
@namespace
**/

var write_code = {

    /** calls code writing functions and writes to code area*/
    writeCode: function writeCode(all_chart_options, all_map_options) {

        var width = $("#chart_width_textinput").val();
        var height = $("#chart_height_textinput").val();
        var id = $("#chart_id_textinput").val();

        if (all_chart_options.chart.type !== "map") {
            //not map

            var html_string = write_code.writeChartHTMLCode(all_chart_options, width, height, id);
            var js_string = write_code.writeChartJSCode(all_chart_options);
        } else {
            //map
            var html_string = write_code.writeMapHTMLCode(all_map_options, width, height, id);
            var js_string = write_code.writeMapJSCode(all_map_options, all_chart_options);
        }

        //put code in the <code>
        $("#chart_html_code").val(html_string);

        //put js code in code area
        $("#chart_output_code").val(js_string);
    },

    /** creates and returns chart HTML code  **/
    writeChartHTMLCode: function writeChartHTMLCode(all_chart_options, width, height, id) {
        var html_string = '<div id="' + id + '" style = "position: relative; width: ' + width + 'px; height: ' + height + 'px; margin: auto; padding: 0px;"> </div>';

        return html_string;
    },

    /** creates and returns map HTML code  **/
    writeMapHTMLCode: function writeMapHTMLCode(all_map_options, width, height, id) {

        var html_string = '<div class="map_display_area" id="' + id + '" style = "width: ' + width + 'px; height: ' + height + 'px; margin: auto; padding: 0px;"> </div>';

        return html_string;
    },

    /** place code in chart_output_code and reinit highlight */
    writeChartJSCode: function writeChartJSCode(all_chart_options) {

        var draw_chart = require("../draw_chart.js");

        //save chart input values
        all_chart_options.saved_values = chart_recall.saveValues();

        var chart_options_js = utils_main.deepStringify(all_chart_options);

        chart_options_js.string = chart_options_js.string.replace(/"function(\d+)"/g, function (match, i) {
            return chart_options_js.functions_arr[i];
        }) // replace function place holders with their function string from its index in the array
        .replace(/headers=\\"rowHead\d+ columnHead\d+\\"/g, "") //trim down table alt output to make it smaller
        .replace(/id=\\"(rowHead|columnHead)\d+\\"/g, "")
        //replace ansi symbols (n-dash etc), with printed js code
        .replace(/–/g, "\\u2013") //ndash
        .replace(/—/g, "\\u2014") //mdash
        .replace(/\s{2,} /g, " ") //replace several spaces with one
        .replace(/"null"/g, "null") //replace "null" with null
        .replace('"drilldown":{},', "") //replace empty drilldown obj with nothing
         + ";\n\n";

        //write callback function
        chart_options_js.string = chart_options_js.string + "var chartCallback = " + draw_chart.chartCallback.toString();+"\n";

        //add surrounding JS (doc ready, render chart, jq extensions...)
        chart_options_js.string = '$(function(){\n\
             var all_chart_options = ' + chart_options_js.string + ';\n\
Highcharts.setOptions({lang: {thousandsSep: ",",\n\drillUpText: "◁ Back ",\n\contextButtonTitle: "Download chart image"\n\   }});\n\n\
    var chart = new Highcharts.Chart(all_chart_options, chartCallback(all_chart_options));\n';

        //redraw the chart if its a drilldown (to customize individual points)\n\
        if (all_chart_options.drilldown) {
            if (Object.keys(all_chart_options.drilldown).length > 0) {
                chart_options_js.string += 'chart.redraw(false);//redraw the chart if its a drilldown (to customize individual points)\n';
            }
        }

        chart_options_js.string += '});\n\
jQuery.fn.extend({addCommas:' + $("string").addCommas.toString() + ' });';

        return chart_options_js.string;
    },

    /** creates and returns map JS code  **/
    writeMapJSCode: function writeMapJSCode(all_map_options, all_chart_options) {

        var map_init = require("../initializers/maps/map_init.js");
        var map_subtitle_init = require("../initializers/maps/map_subtitle_init.js");
        var map_title_init = require("../initializers/maps/map_title_init.js");
        var map_credits_init = require("../initializers/maps/map_credits_init.js");
        var map_legend_init = require("../initializers/maps/map_legend_init.js");
        var map_tooltip_init = require("../initializers/maps/map_tooltip_init.js");
        var map_ranked_columns_init = require("../initializers/maps/map_ranked_columns_init.js");
        var map_animation_init = require("../initializers/maps/map_animation_init.js");

        //save chart input values
        all_map_options.saved_values = chart_recall.saveValues();

        var map_js = utils_main.deepStringify(all_map_options);

        //write out map options object
        map_js.string = "$(function(){\n" + "var all_map_options = " + map_js.string + ";\n\n" +

        //write out functions needed to convert all_map_options to svg //

        //map_init

        "var map_init = {}; \n" +

        //map_init.getMapOuterDiv
        "map_init.getMapOuterDiv = " + map_init.getMapOuterDiv.toString() + ";\n\n" +

        //map_init.getMapOuterSVG
        "map_init.getMapOuterSVG = " + map_init.getMapOuterSVG.toString() + ";\n\n" +

        //map_init.populateSVGAreas
        "map_init.populateSVGAreas = " + map_init.populateSVGAreas.toString() + ";\n\n" +

        //map_title_init.getMapTitle
        "var map_title_init = {}; \n map_title_init.getMapTitle = " + map_title_init.getMapTitle.toString() + ";\n\n" +

        //map_subtitle_init.getMapSubtitle
        "var map_subtitle_init = {}; \n map_subtitle_init.getMapSubtitle = " + map_subtitle_init.getMapSubtitle.toString() + ";\n\n" +

        //map_credits_init.getMapCredits
        "var map_credits_init = {}; \n map_credits_init.getMapCredits = " + map_credits_init.getMapCredits.toString() + ";\n\n" +

        //map_legend_init.valueMod
        "var map_legend_init = {}; \n map_legend_init.valueMod = " + map_legend_init.valueMod.toString() + ";\n\n" +

        //map_legend_init.getMapLegend
        "map_legend_init.getMapLegend = " + map_legend_init.getMapLegend.toString() + ";\n\n" +

        //map_ranked_columns_init.getRankedColumns
        "var map_ranked_columns_init = {}; \n map_ranked_columns_init.getRankedColumns = " + map_ranked_columns_init.getRankedColumns.toString() + ";\n\n" +

        //map_tooltip_init.getMapTooltip
        "var map_tooltip_init = {}; \n map_tooltip_init.getMapTooltip = " + map_tooltip_init.getMapTooltip.toString() + ";\n\n" +

        //map_init.convertMapOptionsToSVG
        "map_init.convertMapOptionsToSVG = " + map_init.convertMapOptionsToSVG.toString() + ";\n\n" +

        //map_init.setUpMapHover
        "map_init.setUpMapHover = " + map_init.setUpMapHover.toString() + ";\n\n" +

        //map_init.setUpMapRankedColumnsHover
        "map_init.setUpMapRankedColumnsHover = " + map_init.setUpMapRankedColumnsHover.toString() + ";\n\n" +

        //map_init.setUpMapLegendHover
        "map_init.setUpMapLegendHover = " + map_init.setUpMapLegendHover.toString() + ";\n\n" +

        //map_init.setUpMapLegendClick
        "map_init.setUpMapLegendClick = " + map_init.setUpMapLegendClick.toString() + ";\n\n" +

        //map_init.setUpMapStateLinks
        "map_init.setUpMapStateLinks = " + map_init.setUpMapStateLinks.toString() + ";\n\n" +

        //map_animation_init.getAnimationDiv (only if used)
        "var map_animation_init = {}; \n map_animation_init.getAnimationDiv = " + (all_map_options.is_animated ? map_animation_init.getAnimationDiv.toString() : null) + ";\n\n" +

        //map_animation_init.setUpMapAnimation (only if used)
        "map_animation_init.setUpMapAnimation = " + (all_map_options.is_animated ? map_animation_init.setUpMapAnimation.toString() : null) + ";\n\n" +

        //call functions
        "var map_display_area = map_init.convertMapOptionsToSVG(all_map_options);\n\n" + //converts all_map_options to svg and puts it on page

        //init tooltip and highlighting
        "map_init.setUpMapHover(all_map_options, map_display_area);\n\n" +

        //init legend hovering
        "map_init.setUpMapLegendHover(map_display_area);\n\n" +

        //init ranked column hovering
        "map_init.setUpMapRankedColumnsHover(map_display_area);\n\n" +

        //init legend clicking
        "if (all_map_options.map_type === 'metro_area') {\n map_init.setUpMapLegendClick(map_display_area); \n } \n\n" + "map_init.setUpMapLegendHover(map_display_area);\n\n" +

        //init state links to eag pages
        "map_init.setUpMapStateLinks(map_display_area);\n\n" + (

        //init setup of animation functions (if used)
        all_map_options.is_animated ? "map_animation_init.setUpMapAnimation(all_map_options, map_display_area);\n\n" : "") +

        ///end of doc ready
        "});" +

        //add jQuery addcommas extension
        'jQuery.fn.extend({addCommas:' + $("string").addCommas.toString() + ' });';

        //replacements
        map_js.string = map_js.string.replace(/▶/g, "\\u25B6");

        return map_js.string;
    }

};

module.exports = write_code;

},{"../draw_chart.js":14,"../initializers/maps/map_animation_init.js":43,"../initializers/maps/map_credits_init.js":46,"../initializers/maps/map_init.js":47,"../initializers/maps/map_legend_init.js":48,"../initializers/maps/map_ranked_columns_init.js":49,"../initializers/maps/map_subtitle_init.js":50,"../initializers/maps/map_title_init.js":51,"../initializers/maps/map_tooltip_init.js":52,"./chart_recall.js":67,"./utils_main.js":71}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
