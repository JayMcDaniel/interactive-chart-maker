(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {

    //utils
    var utils_main = require("./utils/utils_main.js");
    var jq_extensions = require("./utils/jq_extensions.js");

    //page init
    var page_init = require("./controllers/page_init.js");

    //constructors
    var AllChartOptions = require("./constructors/charts/all_chart_options.js");

    var options = {
        colors: [1, 3]
    };
    var all_chart_options = new AllChartOptions(options);

    all_chart_options.setOption("colors", [5, 6]);

    var chart_options_js_string = utils_main.deepStringify(all_chart_options);

    $("#chart_output_code").text(chart_options_js_string);
});

},{"./constructors/charts/all_chart_options.js":2,"./controllers/page_init.js":3,"./utils/jq_extensions.js":6,"./utils/utils_main.js":7}],2:[function(require,module,exports){
"use strict";

/** All Chart options constructor. combines all other options into main options object. Info at http://api.highcharts.com/highcharts */
var utils_main = require("../../utils/utils_main.js");

var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart || {};
    this.colors = o.colors || [];
    this.credits = o.credits || {};
    this.exporting = o.exporting || {};
    this.legend = o.legend || {};
    this.plot_options = o.plot_options || {};
    this.series = o.series || [{}];
    this.subtitle = o.subtitle || {};
    this.title = o.title || {};
    this.tooltip = o.tooltip || {};
    this.xAxis = o.xAxis || {};
    this.yAxis = o.yAxis || {};
};

AllChartOptions.prototype.setOption = utils_main.setOption;

module.exports = AllChartOptions;

},{"../../utils/utils_main.js":7}],3:[function(require,module,exports){
"use strict";

//inits
module.exports = function () {

    var navigation_setup = require("../navigation_setup.js");
    var keyboard_inputs = require("../keyboard_inputs");
}();

},{"../keyboard_inputs":4,"../navigation_setup.js":5}],4:[function(require,module,exports){
"use strict";

module.exports = function () {

    var keyboard_inputs = {

        bindNumberEntryInputs: function bindNumberEntryInputs() {

            var adjValue = function adjValue(val, direction) {
                var val = Number(val);
                if (!isNaN(val)) {
                    return direction === "+" ? val + 10 : val - 10;
                } else {
                    return val;
                }
            };

            $(".number_entry").keyup(function (e) {
                if (e.keyCode === 38) {
                    //up pushed
                    $(this).val(adjValue($(this).val(), "+"));
                } else if (e.keyCode === 40) {
                    $(this).val(adjValue($(this).val(), "-"));
                }
            });
        }

    };

    keyboard_inputs.bindNumberEntryInputs();
}();

},{}],5:[function(require,module,exports){
"use strict";

/** object that contains functions for all the navigation, ie changing between options and chart types */
module.exports = function () {
    var navigation_setup = {

        /** when tabs on left side nav bar are clicked, options displayed are changed */
        sideNavTabsChange: function sideNavTabsChange() {

            $("#side_nav_tabs .tab").click(function () {
                //change selected menu tab
                $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
                $(this).addClass("selected_tab");

                //change display div showing
                var selectedID = "#" + $(this).attr("id").replace("tab", "display");
                $("#side_display .selected_display").removeClass("selected_display");
                $(selectedID).addClass("selected_display");
            });
        },

        /** when chart type icon is clicked and changed */
        chartTypeIconChange: function chartTypeIconChange() {

            $("#chart_type_icons .chart_type_icon").click(function () {
                //change selected icon
                $("#chart_type_icons .chart_type_icon").removeClass("selected_chart_type");
                $(this).addClass("selected_chart_type");
            });
        },

        /** when a help icon is clicked */

        helpIconClick: function helpIconClick() {

            $(".help_icon").click(function () {
                $(this).toggleClass("help_on");
                $(".notes", $(this).parents(".display")).toggle();
            });
        },

        /** when a get code button is clicked */

        getCodeButtonClick: function getCodeButtonClick() {

            $("#get_code_button").click(function (e) {
                var $get_code_span = $("#get_code_text");
                $(this).toggleClass("code_on");
                $("#main_result_code_div").slideToggle(100);
                if ($get_code_span.text() === "Get code") {
                    $get_code_span.text("Hide code");
                } else {
                    $get_code_span.text("Get code");
                }
            });
        }
    };

    navigation_setup.sideNavTabsChange();
    navigation_setup.chartTypeIconChange();
    navigation_setup.helpIconClick();
    navigation_setup.getCodeButtonClick();
}();

},{}],6:[function(require,module,exports){
"use strict";

var jq_extensions = function () {

    jQuery.fn.extend({
        divVal: function divVal(string) {
            //extend so that we can get and set "value" with divs
            if (arguments.length === 0) {
                return $(this).attr("value");
            } else {

                $(this).attr("value", string);
                return $(this);
            }
        }
    });
}();

module.exports = jq_extensions;

},{}],7:[function(require,module,exports){
"use strict";

/** Main utility object, contains functions that get reused often */
var utils_main = {

    /** shortcut for console.log **/
    log: function log(e) {
        return console.log(e);
    },

    //turns objects into strings, including their methods
    deepStringify: function deepStringify(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (typeof value === 'function') {
                return value.toString();
            } else {
                return value;
            }
        }).replace(/\\n/g, "");
    },

    //sets an option to a given object. the chart options constructors use this in thier prototypes
    setOption: function setOption(option, obj) {
        this[option] = obj;
    }

};

module.exports = utils_main;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
