(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {

    //utils
    var jq_extensions = require("./utils/jq_extensions.js");
    var utils_main = require("./utils/utils_main");

    //initial all chart options init
    var allChartOptionsInit = require("./initializers/all_chart_options_init.js");
    var all_chart_options = allChartOptionsInit();

    //draw chart
    var draw_chart = require("./draw_chart.js");
    var chart = draw_chart.init(all_chart_options);

    //write code to "#chart_output_code" function
    utils_main.writeCode(all_chart_options);

    //page init (navigation and keyboard entries)
    var navigation_setup = require("./navigation_setup.js");
    navigation_setup.initAllNavigation(all_chart_options);

    var keyboard_inputs = require("./keyboard_inputs");
    //first init
    keyboard_inputs.sideNavTabShortcuts(chart, all_chart_options);
    keyboard_inputs.initListeners(chart, all_chart_options);

    //all form updates - when updates are made, update the chart
    var allFormUpdates = require("./form_updates/all_form_updates.js");
    allFormUpdates(chart, all_chart_options);
});

},{"./draw_chart.js":14,"./form_updates/all_form_updates.js":15,"./initializers/all_chart_options_init.js":26,"./keyboard_inputs":39,"./navigation_setup.js":40,"./utils/jq_extensions.js":45,"./utils/utils_main":47}],2:[function(require,module,exports){
"use strict";

/** 
* All Chart options constructor. Combines all other options into main options object. Info at http://api.highcharts.com/highcharts 
@constructor AllChartOptions
@param o {object} chart options object
*/
var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart;
    this.colors = o.colors;
    this.credits = o.credits;
    this.exporting = o.exporting;
    this.legend = o.legend;
    this.plotOptions = o.plotOptions;
    this.series = o.series;
    this.subtitle = o.subtitle;
    this.title = o.title;
    this.tooltip = o.tooltip;
    this.xAxis = o.xAxis;
    this.yAxis = o.yAxis;
};

module.exports = AllChartOptions;

},{}],3:[function(require,module,exports){
'use strict';

/** Chart options constructor. Info at http://api.highcharts.com/highcharts#chart
* @constructor ChartOptions 
*  @param o {object} chart options object
*/
var ChartOptions = function ChartOptions(o) {

    this.renderTo = o.renderTo || "chart_display_area";
    this.margin = [o.margin[0] || 90, o.margin[1] || 40, o.margin[2] || 80, o.margin[3] || 75]; //[top,right,bottom,left]
    this.borderWidth = o.borderWidth || 0;
    this.plotBorderColor = o.plotBorderColor || '#fff';
    this.plotBorderWidth = o.plotBorderWidth || 0;
    this.type = o.type || 'line';
    this.zoomType = o.zoomType || null;
    this.alignTicks = o.alignTicks || false;
    this.inverted = o.inverted || false;
    this.ignoreHiddenSeries = o.ignoreHiddenSeries || true; //false for bubble charts so bubbles won't resize
};

module.exports = ChartOptions;

},{}],4:[function(require,module,exports){
"use strict";

/** Credits options constructor. Info at http://api.highcharts.com/highcharts#credits
* @constructor Credits 
*  @param o {object} credits options object
*/
var Credits = function Credits(o) {
    this.href = "http://www.bls.gov";

    this.position = {
        align: 'left',
        x: 10,
        y: o.position ? o.position.y || -20 : -20
    };

    this.style = {
        cursor: "default",
        color: "#2C2C2C"
    };

    this.text = o.text || "";
    this.useHTML = true;
};

module.exports = Credits;

},{}],5:[function(require,module,exports){
'use strict';

/** Exporting options constructor. Info at http://api.highcharts.com/highcharts#exporting
* @constructor Exporting 
* @param o {object} exporting options object
*/
var Exporting = function Exporting(o) {

    this.buttons = {
        contextButton: {
            enabled: true,
            verticalAlign: 'bottom',
            x: -10
        }
    };
};

module.exports = Exporting;

},{}],6:[function(require,module,exports){
'use strict';

/** Legend options constructor. Info at http://api.highcharts.com/highcharts#legend 
* @constructor Legend 
* @param o {object} legend options object
*/
var Legend = function Legend(o) {

    this.align = o.align || 'left';
    this.backgroundColor = o.backgroundColor || 'none';
    this.borderColor = o.borderColor || 'none';
    this.borderWidth = o.borderWidth || 0;
    this.enabled = o.enabled || true;
    this.floating = o.floating || false;
    this.itemDistance = o.itemDistance || 30;
    this.layout = o.layout || 'horizontal';
    this.reversed = o.reversed || false;
    this.shadow = o.shadow || false;
    this.useHTML = o.useHTML || false;
    this.verticalAlign = o.verticalAlign || 'top';
    this.width = o.width;
    this.x = o.x || 0;
    this.y = o.y || 30;

    this.itemStyle = {
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
        color: '#000'
    };
    this.itemHiddenStyle = {
        color: 'gray'
    };
    this.itemHoverStyle = {
        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
    };
};

module.exports = Legend;

},{}],7:[function(require,module,exports){
"use strict";

/** PlotOptions constructor. Info at http://api.highcharts.com/highcharts#plotOptions
* @constructor PlotOptions 
* @param o {object} PlotOptions options object
*/
var PlotOptions = function PlotOptions(o) {

    //for all chart types. values are undefined if not in o.
    this.series = {
        events: {
            legendItemClick: o.series.events.legendItemClick
        },
        dataLabels: {
            enabled: o.series.dataLabels.enabled || false
        },
        pointPlacement: o.series.pointPlacement,
        stacking: o.series.stacking,
        pointPadding: o.series.pointPadding,
        groupPadding: o.series.groupPadding,
        minPointLength: o.series.minPointLength,
        maxSize: o.series.maxSize,
        sizeBy: o.series.sizeBy,
        lineWidth: o.series.lineWidth,
        states: o.series.states,
        marker: o.series.marker

    };
};

module.exports = PlotOptions;

},{}],8:[function(require,module,exports){
"use strict";

/** series (an array of objs) options constructor. Info at http://api.highcharts.com/highcharts#series 
* @constructor Series 
* @param o {object} Series options object
*/
var Series = function Series(o) {

    this.series = o || [{}];
};

module.exports = Series;

},{}],9:[function(require,module,exports){
"use strict";

/** subtitle options constructor. Info at http://api.highcharts.com/highcharts#subtitle
* @constructor Subtitle 
* @param o {object} Subtitle options object
*/
var Subtitle = function Subtitle(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'normal',
        fontSize: '12px'
    };
};

module.exports = Subtitle;

},{}],10:[function(require,module,exports){
"use strict";

/** Title options constructor. Info at http://api.highcharts.com/highcharts#title
* @constructor Title 
* @param o {object} Title options object
*/
var Title = function Title(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'bold',
        fontSize: '14px'
    };
};

module.exports = Title;

},{}],11:[function(require,module,exports){
'use strict';

/** Tooltip options constructor. Info at http://api.highcharts.com/highcharts#tooltip
* @constructor Tooltip 
* @param o {object} Tooltip options object
*/

var Tooltip = function Tooltip(o) {
    this.backgroundColor = '#FEFFEF';
    this.crosshairs = o.crosshairs || [false, false];
    this.formatter = o.formatter;

    this.style = {
        color: '#000000',
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif'
    };

    this.useHTML = true;
};

module.exports = Tooltip;

},{}],12:[function(require,module,exports){
'use strict';

/** xAxis options constructor. Info at http://api.highcharts.com/highcharts#xAxis
 * @constructor XAxis 
 * @param o {object} XAxis options object
 */
var XAxis = function XAxis(o) {

    this.categories = o.categories;
    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 0;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter || undefined : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineWidth = o.lineWidth || 1.2;
    this.lineColor = o.lineColor || 'gray';
    this.plotBands = o.plotBands || [];
    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 0
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';

    this.title = {
        align: o.title.align,
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : '',
        rotation: 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        },
        x: o.title.x
    };
};

module.exports = XAxis;

},{}],13:[function(require,module,exports){
'use strict';

/** yAxis options constructor. Info at http://api.highcharts.com/highcharts#yAxis
* @constructor yAxis 
* @param o {object} yAxis options object
*/

var yAxis = function yAxis(o) {

    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 1;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {

        format: o.labels ? o.labels.format : { value: value },
        formatter: o.labels ? o.labels.formatter : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineColor = o.lineColor || 'gray';
    this.lineWidth = o.lineWidth || 1;
    this.max = o.max || null;
    this.min = o.min || null;
    this.opposite = o.opposite || false;
    this.plotBands = o.plotBands || [];

    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 1
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';
    this.tickWidth = o.tickWidth || 1;

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : 6,
        align: o.title ? o.title.align || 'middle' : 'middle',
        offset: 20,
        rotation: 0,
        x: o.title ? o.title.x || 35 : 35,
        y: o.title ? o.title.y || -15 : -15,

        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };

    this.type = o.type || 'linear';
};

module.exports = yAxis;

},{}],14:[function(require,module,exports){
"use strict";

/** takes all_chart_options and prints a chart to the screen 
@namespace
*/

var draw_chart = {

    /** initialize function **/
    init: function init(all_chart_options) {
        var chart = new Highcharts.Chart(all_chart_options);
        return chart;
    }

};

module.exports = draw_chart;

},{}],15:[function(require,module,exports){
"use strict";

var update_template = require("./update_template.js");
var updateChartType = require("./update_chart_type.js");
var updateColors = require("./update_colors.js");
var utils_forms = require("../utils/utils_forms");
var update_legend = require("./update_legend.js");
var update_x_axis = require("./update_x_axis.js");
var update_y_axis = require("./update_y_axis.js");
var update_tooltip = require("./update_tooltip.js");
var update_data = require("./update_data.js");
var update_credits = require("./update_credits.js");
var update_individual_series = require("./update_individual_series.js");

/** listens for any form updates and calls appropriate function 
@module
*/
var allFormUpdates = function allFormUpdates(chart, all_chart_options) {

    /* CHART TYPE CHANGES */

    //chart type changed
    $.each(['area', 'line', 'bar', 'stacked_bar', 'column', 'stacked_column', 'bubble', 'scatter', "drilldown"], function (i, type) {
        $('#chart_type_' + type).click(function () {
            updateChartType(i, type, chart, all_chart_options);
        });
    });

    /* TEMPLATE CHANGES */

    //chart width
    $("#chart_width_textinput").keyup(function () {
        update_template.resize($(this).val(), "width", chart);
    });

    //chart height
    $("#chart_height_textinput").keyup(function () {
        update_template.resize($(this).val(), "height", chart);
    });

    //inner chart margins
    $(".margin_input").keyup(function () {
        var margins_arr = utils_forms.getClassValuesArray("margin_input");
        update_template.margin(margins_arr, chart, all_chart_options);
    });

    /* CHART DATA CHANGES - (x-axis categories and series array)*/
    //"series names loaded from" icon clicked
    $(".load_series_from_icon").click(function () {
        update_data.updateData(chart, all_chart_options);
    });

    $("#table_input_textarea").bind('input propertychange', function () {
        update_data.updateData(chart, all_chart_options);
    });

    /* INDIVIDUAL SERIES UPDATES */

    //update individual series options section (call on load and when data is changed)
    $("#tab_series_options").click(function () {
        update_individual_series.populateForm(chart, all_chart_options);
    });

    /* COLOR PALETTE CHANGES */
    $(".color_palette_row").click(function () {
        updateColors(chart, all_chart_options);
    });

    /* LEGEND CHANGES */

    //legend layout changed
    $("#legend_layout_select").change(function () {
        update_legend.updateLayout($(this).val(), chart, all_chart_options);
    });

    //legend reverse ceckbox changed
    $("#legend_reverse_layout_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_legend.updateIsReversed(val, chart, all_chart_options);
    });

    //legend toggle (hide others) checkbox changed
    $("#legend_make_toggle_checkbox").change(function () {
        var toggle_enabled = utils_forms.getCheckBoxValue($(this));
        update_legend.updateToggle(toggle_enabled, chart, all_chart_options);
    });

    //legend X or Y placement values changed
    $("#legend_placement_x, #legend_placement_y").keyup(function () {
        var newX = Number($("#legend_placement_x").val());
        var newY = Number($("#legend_placement_y").val());

        update_legend.updateXYpositions(newX, newY, chart, all_chart_options);
    });

    /* X-AXIS CHANGES */

    //x-axis title textarea changed
    $("#chart_x_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_x_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //x-axis tickmark interval input changed
    $("#chart_x_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_x_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    /* Y-AXIS CHANGES */

    //y-axis title textarea changed
    $("#chart_y_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_y_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //y-axis title indent changed
    $("#chart_y_axis_x_position_input").keyup(function () {
        var newXPosition = Number($(this).val());
        update_y_axis.updateXPosition(newXPosition, chart, all_chart_options);
    });

    //y-axis tickmark interval input changed
    $("#chart_y_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_y_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    //y-axis max input changed
    $("#chart_y_axis_max_input").keyup(function () {
        var newMax = Number($(this).val());
        update_y_axis.updateMax(newMax, chart, all_chart_options);
    });

    //y-axis min input changed
    $("#chart_y_axis_min_input").keyup(function () {
        var newMin = Number($(this).val());
        update_y_axis.updateMin(newMin, chart, all_chart_options);
    });

    //y-axis opposite side ceckbox changed
    $("#chart_y_axis_opposite_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsOpposite(val, chart, all_chart_options);
    });

    //y-axis log ceckbox changed
    $("#chart_y_axis_log_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsLog(val, chart, all_chart_options);
    });

    //y-axis dollar / percent or decimal selects changed (format)
    $("#chart_y_axis_signs_select, #chart_y_axis_decimals_select").change(function () {
        var sign = $("#chart_y_axis_signs_select").val();
        var decimals = $("#chart_y_axis_decimals_select").val();
        update_y_axis.updateFormat(sign, decimals, chart, all_chart_options);
    });

    /* TOOLTIP CHANGES */

    //change shared tooltip checkbox, decimals, signs, or mulitplier selects
    $("#chart_tooltip_shared_checkbox, #chart_tooltip_force_decimals_select, #chart_tooltip_signs_select, #chart_tooltip_y_multiple_select").change(function () {
        update_tooltip.updateToolTip(chart, all_chart_options);
    });
    //call update tooltip after page and chart is loaded (has to be on a callback with the 'chart' object)
    update_tooltip.updateToolTip(chart, all_chart_options);

    /* CREDITS CHANGES */

    $("#chart_credits_text_textarea").bind('input propertychange', function () {
        update_credits.updateCreditText(chart, all_chart_options);
    });
};

module.exports = allFormUpdates;

},{"../utils/utils_forms":46,"./update_chart_type.js":16,"./update_colors.js":17,"./update_credits.js":18,"./update_data.js":19,"./update_individual_series.js":20,"./update_legend.js":21,"./update_template.js":22,"./update_tooltip.js":23,"./update_x_axis.js":24,"./update_y_axis.js":25}],16:[function(require,module,exports){
"use strict";

var plotOptionsInit = require("../initializers/plot_options_init.js");
var update_data = require("./update_data.js");
var update_tooltip = require("./update_tooltip.js");

/** when a chart icon is clicked, this function is called - changes the chart type shown 
@module
*/
var updateChartType = function updateChartType(i, type, chart, all_chart_options) {

    type = type.replace("stacked_", "");

    if (type === "bar") {
        //fix y axis position
        chart.inverted = true;
        all_chart_options.yAxis.title.align = "middle";
        all_chart_options.xAxis.title.align = "high";
        all_chart_options.yAxis.title.x = 0;
        all_chart_options.yAxis.title.y = 8;
        all_chart_options.xAxis.title.y = -20;
        all_chart_options.xAxis.title.x = 40;

        //hide non-relevant elements
        $(".not_bar").hide();
    } else {
        //chart not bar
        chart.inverted = false;
        all_chart_options.yAxis.title.align = "high";
        all_chart_options.xAxis.title.align = "middle";
        all_chart_options.yAxis.title.x = Number($("#chart_y_axis_x_position_input").val());
        all_chart_options.yAxis.title.y = -20;
        all_chart_options.xAxis.title.y = 0;
        all_chart_options.xAxis.title.x = 0;

        $(".not_bar").show();
    }

    if (type === "drilldown") {
        type = "column";
    }

    chart.xAxis[0].update({
        plotLines: [{
            "value": 0,
            "color": "#c0c0c0",
            "dashStyle": "solid",
            "width": type === "scatter" || type === "bubble" ? 1 : 0
        }]
    }, false);

    chart.xAxis[0].setTitle({
        align: all_chart_options.xAxis.title.align,
        y: all_chart_options.xAxis.title.y,
        x: all_chart_options.xAxis.title.x
    }, false);

    chart.yAxis[0].setTitle({
        align: all_chart_options.yAxis.title.align,
        x: all_chart_options.yAxis.title.x,
        y: all_chart_options.yAxis.title.y
    }, false);

    //re parse data
    update_data.updateData(chart, all_chart_options);

    all_chart_options.chart.type = type;

    //update tooltip
    update_tooltip.updateToolTip(chart, all_chart_options);
};

module.exports = updateChartType;

},{"../initializers/plot_options_init.js":32,"./update_data.js":19,"./update_tooltip.js":23}],17:[function(require,module,exports){
"use strict";

var colorsInit = require("../initializers/colors_init.js");

/** updates the chart's colors - called when palette is changed. Calls colorsInit 
@module
@param chart {object} the main chart object, built when chart is loaded
@param all_chart_options {object} the main chart options that load into building of the chart and are turned to string for the output
**/
var updateColors = function updateColors(chart, all_chart_options) {
    all_chart_options.colors = colorsInit();

    $(chart.series).each(function (i) {

        //update chart
        this.update({
            color: all_chart_options.colors[i]
        }, false);

        //update all_chart_options.series colors
        all_chart_options.series[i].color = all_chart_options.colors[i];
    });

    chart.redraw();
};

module.exports = updateColors;

},{"../initializers/colors_init.js":28}],18:[function(require,module,exports){
"use strict";

var creditsInit = require("../initializers/credits_init.js");

/** when credit options are changed in the side area 
@namespace
*/

var update_credits = {

    /** get and set the credits text **/
    updateCreditText: function updateCreditText(chart, all_chart_options) {

        all_chart_options.credits = creditsInit();

        var new_y = Number($("#chart_height_textinput").val()) + all_chart_options.credits.position.y - 26;
        chart.credits.element.setAttribute("y", new_y);

        //svg text elements don't use break; each new line must be wrapped in a new tspan
        var credits_text = all_chart_options.credits.text.split("<br>").map(function (line, i) {
            return '<tspan x="10" dy="12">' + line + "</tspan>";
        }).join("");

        $(chart.credits.element).html(credits_text);
    }

};

module.exports = update_credits;

},{"../initializers/credits_init.js":29}],19:[function(require,module,exports){
"use strict";

var parseTableInput = require("../parsers/parse_table_input.js");
var utils_forms = require("../utils/utils_forms.js");

/** called when .selected_chart_type or #table_input_textarea is changed - calls functions to reparse data
@namespace
*/

var update_data = {

    /** called when .selected_chart_type or #table_input_textarea is changed - calls functions to reparse data */
    updateData: function updateData(chart, all_chart_options) {
        var chart_type = $(".selected_chart_type").divVal();
        var input = $("#table_input_textarea").val();
        var legend_toggle_enabled = utils_forms.getCheckBoxValue($("#legend_make_toggle_checkbox"));
        var load_series_from = $(".selected_load_series_from").divVal();
        var parsed_table_output = parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, all_chart_options.colors);

        //update x-axis categories
        chart.xAxis[0].update({
            categories: parsed_table_output.x_axis_categories
        }, false);

        //remove existing series array
        $(chart.series).each(function () {
            this.remove(false); //false to not redraw yet
        });

        //add new series
        $(parsed_table_output.series).each(function () {
            chart.addSeries(this, false); //false to not redraw yet
        });
        chart.redraw(true);

        //update chart options for code output
        all_chart_options.series = parsed_table_output.series;
        all_chart_options.xAxis.categories = parsed_table_output.x_axis_categories;

        //update whether legend toggle is enabled
        $("#legend_make_toggle_checkbox").change();
    }

};

module.exports = update_data;

},{"../parsers/parse_table_input.js":44,"../utils/utils_forms.js":46}],20:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** methods for updating individual series options in  #display_series_options - called when its side nav tab is selected.
@module
@param chart {object} the main chart object, built when chart is loaded
@param all_chart_options {object} the main chart options that load into building of the chart and are turned to string for the output
**/

var update_individual_series = {

    /** called when the series type icons are clicked. Binded at the end of populateForm **/
    seriesTypeIconChange: function seriesTypeIconChange(chart, all_chart_options) {
        $(".series_type_icon").click(function () {
            //update series type
            var type = $(this).attr("type");
            var i = $(this).parents(".series_snippet").index();
            chart.series[i].update({
                type: type
            });

            //highlight clicked icon
            $(".series_type_selected", $(this).parent()).removeClass("series_type_selected");
            $(this).addClass("series_type_selected");

            //update all_chart_options
            all_chart_options.series[i].type = type;
        });
    },

    /** called when the jscolor selector is changed (mouse still down). Updates the actual chart object and all_chart_options code output object***/
    updateSeriesColor: function updateSeriesColor(chart, all_chart_options, i, jscolor) {
        all_chart_options.colors[i] = jscolor.toRGBString();
        all_chart_options.series[i].color = all_chart_options.colors[i];
        chart.series[i].update({
            color: all_chart_options.series[i].color
        });
    },

    /** makes a color box, called from populateForm **/
    makeSeriesColorDiv: function makeSeriesColorDiv(chart, all_chart_options, i) {
        var series_color_div = document.createElement("div");
        series_color_div.className = "series_color_div";

        // make a color label
        var series_color_label = document.createElement("label");
        series_color_label.className = "series_color_label";
        series_color_label.textContent = "Color: ";

        //make color input box
        var series_color = document.createElement('input');
        $(series_color).addClass("jscolor {valueElement:null}");

        //init with color, using jscolor.js
        var picker = new jscolor(series_color, {
            onFineChange: function onFineChange() {
                update_individual_series.updateSeriesColor(chart, all_chart_options, i, this);
            }
        });

        //convert rgb string into arrray
        var rgb = utils_main.rgb2arr(all_chart_options.colors[i]);
        //create picker
        picker.fromRGB(rgb[0], rgb[1], rgb[2]);

        //make clear float div
        var clear_div = utils_main.makeClearFloatDiv();

        series_color_div.appendChild(series_color_label);
        series_color_div.appendChild(series_color);
        series_color_div.appendChild(clear_div);

        return series_color_div;
    },

    makeSeriesTypeDiv: function makeSeriesTypeDiv(chart, all_chart_options, i) {
        var series_type_div = document.createElement("div");
        series_type_div.className = "series_type_div";

        var series_type_label = document.createElement("label");
        series_type_label.className = "series_type_label";
        series_type_label.textContent = "Type: ";

        var series_type_column = document.createElement("div");
        $(series_type_column).addClass("series_type_icon series_type_column").attr("type", "column");
        if (chart.series[i].type === "column") {
            $(series_type_column).addClass("series_type_selected");
        }

        var series_type_line = document.createElement("div");
        $(series_type_line).addClass("series_type_icon series_type_line").attr("type", "line");
        if (chart.series[i].type === "line") {
            $(series_type_line).addClass("series_type_selected");
        }

        var clear_div = utils_main.makeClearFloatDiv();

        series_type_div.appendChild(series_type_label);
        series_type_div.appendChild(series_type_line);
        series_type_div.appendChild(series_type_column);
        series_type_div.appendChild(clear_div);

        return series_type_div;
    },

    /** populates #display_series_options with options for each series. Called when its side nav tab is selected. **/
    populateForm: function populateForm(chart, all_chart_options) {

        var display_series_options_inner_div = $("#display_series_options_inner_div");
        display_series_options_inner_div.empty();

        $(chart.series).each(function (i) {

            //make series name header
            var series_name = document.createElement('h5');
            series_name.textContent = this.name;

            //make series color input
            var series_color_div = update_individual_series.makeSeriesColorDiv(chart, all_chart_options, i);

            //make outer snippet p tag
            var series_snippet = document.createElement('p');
            series_snippet.className = "series_snippet";

            series_snippet.appendChild(series_name);
            series_snippet.appendChild(series_color_div);

            //make series type div if applicable
            if (["line", "column"].indexOf(all_chart_options.chart.type) > -1) {
                var series_type_div = update_individual_series.makeSeriesTypeDiv(chart, all_chart_options, i);
                series_snippet.appendChild(series_type_div);
            }

            $(display_series_options_inner_div).append(series_snippet);
        });

        //bind series type changes
        update_individual_series.seriesTypeIconChange(chart, all_chart_options);
    }

};

module.exports = update_individual_series;

},{"../utils/utils_main.js":47}],21:[function(require,module,exports){
"use strict";

/** when legend options are changed in the side area 
@namespace
*/

var update_legend = {

    /** decide if the legend should be reverse order **/
    updateIsReversed: function updateIsReversed(val, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.reversed = val;
        legend.render();

        all_chart_options.legend.reversed = val;
    },

    /** if 'no legend' is selected, hide the legend, and set options, else, show it with the correct layout */
    updateLayout: function updateLayout(val, chart, all_chart_options) {

        var legend = chart.legend;
        if (val === "no_legend") {
            legend.group.hide();
            legend.box.hide();
            legend.display = false;
            legend.options.enabled = false;
            legend.render(false);

            val = undefined;
        } else {

            legend.options.layout = val;
            legend.render(false);
            legend.group.show();
            legend.box.show();
            legend.display = true;
            legend.options.enabled = true;
        }

        all_chart_options.legend.layout = val;
        all_chart_options.legend.enabled = legend.options.enabled;
    },

    /** set if when one legend item is clicked, the others hide */
    updateToggle: function updateToggle(toggle_enabled, chart, all_chart_options) {

        //update all_chart_options
        if (toggle_enabled) {

            var legendItemClick = function legendItemClick(event) {
                var selected = this.index;
                var allSeries = this.chart.series;
                $.each(allSeries, function (index, series) {
                    selected == index ? series.show() : series.hide();
                });
                return false;
            };
        } else {
            var legendItemClick = function legendItemClick(event) {};
        }

        if (!chart) {
            return legendItemClick;
        } else {
            all_chart_options.plotOptions.series.events.legendItemClick = legendItemClick;
        }

        //update in current chart
        $(chart.series).each(function (i) {
            this.update({
                visible: i > 0 && toggle_enabled === true ? false : true,
                events: {
                    legendItemClick: all_chart_options.plotOptions.series.events.legendItemClick
                }
            });
        });
    },

    /** update X and Y positions on legend */

    updateXYpositions: function updateXYpositions(newX, newY, chart, all_chart_options) {
        var legend = chart.legend;
        legend.options.x = newX;
        legend.options.y = newY;
        legend.render(false);

        all_chart_options.legend.x = newX;
        all_chart_options.legend.y = newY;
    }

};

module.exports = update_legend;

},{}],22:[function(require,module,exports){
"use strict";

/** when template are changed in the side area, these methods are called 
@namespace
*/
var update_template = {
    resize: function resize(val, dimension, chart) {
        val = Number(val);
        if (!isNaN(val)) {
            $(".chart_display_area").css(dimension, val + "px");
        }
        chart.reflow();
    },

    margin: function margin(margins_arr, chart, all_chart_options) {

        $.each(chart.axes, function (i, e) {
            e.isDirty = true; //to tell axes to refresh
        });
        chart.margin = margins_arr;
        chart.redraw(false);

        all_chart_options.chart.margin = margins_arr;
    }
};

module.exports = update_template;

},{}],23:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");
var utils_forms = require("../utils/utils_forms");

/** when tooltip options are changed in the side area, these methods are called 
@namespace
*/
var update_tooltip = {

    /** gets a tooltip for scatter charts. Called from updateToolTip**/
    getScatterTooltip: function getScatterTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type) {
        var new_tooltip = function new_tooltip() {

            var y_axis_title = this.series.yAxis.axisTitle ? this.series.yAxis.axisTitle.textStr : "Y-Axis";
            var x_axis_title = this.series.xAxis.axisTitle ? this.series.xAxis.axisTitle.textStr : "X-Axis";

            return "<b>" + this.series.name + "</b><br>" + y_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1] + "</b><br/>" + x_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.x * multiplier, decimals) + signs_arr[1] + "<br/>";
        };

        return new_tooltip;
    },

    /** gets a tooltip for typical charts (line, area, bar etc). Called from updateToolTip**/
    getTypicalTooltip: function getTypicalTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type) {

        var new_tooltip;

        if (is_shared) {
            //SHARED TOOLTIP

            if (decimals > 0) {
                //use decimal formatter

                new_tooltip = function new_tooltip() {

                    var shared_tooltip_arr = [];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push("<b>" + this.name + "</b> <br>" + this.points[point.x].x + ": " + signs_arr[0] + Highcharts.numberFormat(this.points[point.x].y * multiplier, decimals) + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>');
                };
            } else {
                //don't use decimal formatter

                new_tooltip = function new_tooltip() {

                    var shared_tooltip_arr = ["<b>" + this.key + "</b>"];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push(this.name + ": " + signs_arr[0] + $(this.points[point.x].y * multiplier).addCommas() + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>');
                };
            }
        } else {
            //NOT SHARED TOOLTIP

            if (decimals > 0) {
                //use decimal formatter
                new_tooltip = function new_tooltip() {
                    return "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1];
                };
            } else {
                //don't use decimal formatter
                new_tooltip = function new_tooltip() {
                    return "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + $(this.y * multiplier).addCommas() + signs_arr[1];
                };
            }
        }

        return new_tooltip;
    },

    /** update tooltip - decide which kind of chart and call that get tooltip function **/
    updateToolTip: function updateToolTip(chart, all_chart_options) {

        var is_shared = utils_forms.getCheckBoxValue($("#chart_tooltip_shared_checkbox"));
        var decimals = Number($("#chart_tooltip_force_decimals_select").val());
        var signs = $("#chart_tooltip_signs_select").val();
        var multiplier = $("#chart_tooltip_y_multiple_select").val();
        var chart_type = all_chart_options.chart.type;
        var new_tooltip;
        var signs_arr = [signs === "$" ? "$" : "", signs === "%" ? "%" : ""];

        //IF A TYPICAL CHART
        if (["area", "line", "bar", "stacked_bar", "column", "stacked_column"].indexOf(chart_type) > -1) {
            new_tooltip = update_tooltip.getTypicalTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type);
        }

        //IF A SCATTER CHART
        else if (chart_type === "scatter") {
                new_tooltip = update_tooltip.getScatterTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type);
            }

        if (!chart) {
            //for use in tooltip_init
            return new_tooltip;
        }

        chart.tooltip.options.formatter = new_tooltip;
        //    chart.tooltip.refresh(chart.series[0].data[0]);

        all_chart_options.tooltip.formatter = utils_main.stringifyFormatter(new_tooltip, decimals, multiplier, signs_arr);
    }

};

module.exports = update_tooltip;

},{"../utils/utils_forms":46,"../utils/utils_main.js":47}],24:[function(require,module,exports){
"use strict";

/** when X-axis options are changed in the side area, these methods are called 
@namespace
*/

var update_x_axis = {

    /** update the x axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.xAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.xAxis.title.text = newTitle;
    },

    /** update x axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        if (isNaN(newInterval) || newInterval === 0) {
            newInterval = undefined;
        };

        if (!chart) {
            // called when this is used in x_axis_init
            return newInterval;
        }

        if (newInterval > chart.xAxis[0].dataMax) {
            newInterval = chart.xAxis[0].dataMax;
        }

        chart.xAxis[0].update({
            tickInterval: newInterval
        });
        all_chart_options.xAxis.tickInterval = newInterval;
    }

};

module.exports = update_x_axis;

},{}],25:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** when Y-axis options are changed in the side area, these methods are called 
@namespace
*/
var update_y_axis = {

    /** update format when dollar / percent signs select is changed */
    updateFormat: function updateFormat(sign, decimals, chart, all_chart_options) {

        var newFormat = "{value:,." + decimals + "f}";
        if (sign === "$") {
            newFormat = "${value:,." + decimals + "f}";
        }

        if (sign === "%") {
            newFormat = "{value:,." + decimals + "f}%";
        }

        if (!chart) {
            // called when this is used in y_axis_init
            return newFormat;
        }

        chart.yAxis[0].update({
            labels: {
                format: newFormat
            }
        });

        all_chart_options.yAxis.format = newFormat;
    },

    /** update if y-axis is log */
    updateIsLog: function updateIsLog(val, chart, all_chart_options) {

        var type = val === true ? "logarithmic" : "linear";
        if (!chart) {
            // called when this is used in y_axis_init
            return type;
        }

        chart.yAxis[0].update({
            type: type
        });
        all_chart_options.yAxis.type = type;
    },

    /** update if y axis labels are on opposite side */
    updateIsOpposite: function updateIsOpposite(val, chart, all_chart_options) {
        chart.yAxis[0].update({
            opposite: val
        });
        all_chart_options.yAxis.opposite = val;
    },

    /** update y-axis max */
    updateMax: function updateMax(newMax, chart, all_chart_options) {
        newMax = utils_main.checkforUndefined(newMax);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMax;
        }

        chart.yAxis[0].update({
            max: newMax
        });

        all_chart_options.yAxis.max = newMax;
    },

    /** update y-axis min */
    updateMin: function updateMin(newMin, chart, all_chart_options) {
        newMin = utils_main.checkforUndefined(newMin);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMin;
        }

        chart.yAxis[0].update({
            min: newMin
        });

        all_chart_options.yAxis.min = newMin;
    },

    /** update the y axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.yAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.yAxis.title.text = newTitle;
    },

    /** update y axis x-position (title.x) */

    updateXPosition: function updateXPosition(newXPosition, chart, all_chart_options) {

        newXPosition = utils_main.checkforUndefined(newXPosition);

        chart.yAxis[0].setTitle({
            x: newXPosition
        });

        all_chart_options.yAxis.title.x = newXPosition;
    },

    /** update y axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        newInterval = utils_main.checkforUndefined(newInterval);

        if (!chart) {
            // called when this is used in y_axis_init
            return newInterval;
        }

        if (newInterval > chart.yAxis[0].dataMax) {
            newInterval = chart.yAxis[0].dataMax;
        }

        chart.yAxis[0].update({
            tickInterval: newInterval

        });
        all_chart_options.yAxis.tickInterval = newInterval;
    }

};

module.exports = update_y_axis;

},{"../utils/utils_main.js":47}],26:[function(require,module,exports){
"use strict";

var AllChartOptions = require("../constructors/charts/all_chart_options.js"),
    chartInit = require("./chart_init.js"),
    colorsInit = require("./colors_init.js"),
    creditsInit = require("./credits_init.js"),
    exportingInit = require("./exporting_init.js"),
    legendInit = require("./legend_init.js"),
    plotOptionsInit = require("./plot_options_init.js"),
    seriesInit = require("./series_init.js"),
    subtitleInit = require("./subtitle_init.js"),
    titleInit = require("./title_init.js"),
    tooltipInit = require("./tooltip_init.js"),
    xAxisInit = require("./x_axis_init.js"),
    yAxisInit = require("./y_axis_init.js"),
    parseTableInput = require("../parsers/parse_table_input.js"),
    utils_forms = require("../utils/utils_forms.js");

/** create and return an instance of all_chart_options 
@module
**/
var allChartOptionsInit = function allChartOptionsInit() {
    var chart_type = $(".selected_chart_type").divVal();
    var load_series_from = $(".selected_load_series_from").divVal();
    var legend_toggle_enabled = utils_forms.getCheckBoxValue($("#legend_make_toggle_checkbox"));
    var input = $("#table_input_textarea").val();
    var colors = colorsInit();

    var parsed_table_output = parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, colors);

    //get options from individual inits
    var options = {
        chart: chartInit(chart_type),
        credits: creditsInit(),
        colors: colors,
        // exporting: exportingInit(),
        legend: legendInit(),
        plotOptions: plotOptionsInit(chart_type, legend_toggle_enabled),
        series: seriesInit(parsed_table_output.series),
        subtitle: subtitleInit(),
        title: titleInit(parsed_table_output.title_text),
        tooltip: tooltipInit(),
        xAxis: xAxisInit(parsed_table_output.x_axis_categories, chart_type),
        yAxis: yAxisInit(chart_type)

    };

    var all_chart_options = new AllChartOptions(options);
    return all_chart_options;
};

module.exports = allChartOptionsInit;

},{"../constructors/charts/all_chart_options.js":2,"../parsers/parse_table_input.js":44,"../utils/utils_forms.js":46,"./chart_init.js":27,"./colors_init.js":28,"./credits_init.js":29,"./exporting_init.js":30,"./legend_init.js":31,"./plot_options_init.js":32,"./series_init.js":33,"./subtitle_init.js":34,"./title_init.js":35,"./tooltip_init.js":36,"./x_axis_init.js":37,"./y_axis_init.js":38}],27:[function(require,module,exports){
"use strict";

var ChartOptions = require("../constructors/charts/chart.js");

/** Initializer for "chart" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var chartInit = function chartInit(chart_type) {

    if (chart_type === "drilldown") {
        chart_type = "column";
    }

    //load options from user inputs
    var options = {
        margin: [Number($("#top_margin_textinput").val()), Number($("#right_margin_textinput").val()), Number($("#bottom_margin_textinput").val()), Number($("#left_margin_textinput").val())],
        renderTo: $("#chart_id_textinput").val(),

        type: chart_type
    };

    var chart_options = new ChartOptions(options);
    return chart_options;
};

module.exports = chartInit;

},{"../constructors/charts/chart.js":3}],28:[function(require,module,exports){
"use strict";

/** Initializer for "colors" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var colorsInit = function colorsInit() {
    var color_arr = [];
    $(".color_palette_selected .color_palette_cell").each(function () {
        color_arr.push($(this).css("background-color"));
    });

    if (color_arr.length < 1) {
        color_arr = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
    }

    return color_arr;
};

module.exports = colorsInit;

},{}],29:[function(require,module,exports){
"use strict";

var Credits = require("../constructors/charts/credits.js");

/** Initializer for "credits" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var creditsInit = function creditsInit() {

    var credits_text = $("#chart_credits_text_textarea").val().replace(/\n/g, "<br>");
    /** calculate vertical y position of credits, depending on how many lines it has 
    @param text {string} the credits text, originally from #chart_credits_text_textarea
    */
    var calculateCreditsPosition = function calculateCreditsPosition(text) {
        var new_y_pos = text.split("<br>").length * -11;
        return new_y_pos;
    };

    //load options from user inputs
    var options = {
        text: credits_text,
        position: {
            y: calculateCreditsPosition(credits_text)
        }
    };

    var credits = new Credits(options);
    return credits;
};

module.exports = creditsInit;

},{"../constructors/charts/credits.js":4}],30:[function(require,module,exports){
"use strict";

var Exporting = require("../constructors/charts/exporting.js");

/** Initializer for "exporting" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var exportingInit = function exportingInit() {

    //load options from user inputs
    var options = {};

    var exporting = new Exporting(options);
    return exporting;
};

module.exports = exportingInit;

},{"../constructors/charts/exporting.js":5}],31:[function(require,module,exports){
"use strict";

var Legend = require("../constructors/charts/legend.js");

/** Initializer for "legend" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var legendInit = function legendInit() {

    var getLegendLayout = function getLegendLayout() {
        var legend_layout_val = $("#legend_layout_select").val();
        return legend_layout_val !== "no_legend" ? legend_layout_val : undefined;
    };

    //load options from user inputs
    var options = {
        layout: getLegendLayout(),
        x: Number($("#legend_placement_x").val()),
        y: Number($("#legend_placement_y").val())

    };

    var legend = new Legend(options);
    return legend;
};

module.exports = legendInit;

},{"../constructors/charts/legend.js":6}],32:[function(require,module,exports){
"use strict";

var PlotOptions = require("../constructors/charts/plot_options.js");
var update_legend = require("../form_updates/update_legend.js");

/** Initializer for "plotOptions" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var plotOptionsInit = function plotOptionsInit(chart_type, legend_toggle_enabled) {

    //load options from user inputs
    var options = {
        series: {
            events: {
                // when one legend item is clicked, the others hide
                legendItemClick: update_legend.updateToggle(legend_toggle_enabled)
            },

            dataLabels: {},

            lineWidth: 1.5,
            marker: {
                enabled: false,
                states: {
                    hover: {
                        enabled: true,
                        radius: 5
                    }
                }
            },
            states: {
                hover: {
                    lineWidth: 4
                }
            }

        }

    };

    options[chart_type] = {};

    /** unique chart options (choosing to keep these with every chart so I don't have to reload them with individual series when chart types are updated) */
    //just for bar or column
    options.series.groupPadding = 0.2;
    options.series.pointPadding = 0.1;
    options.series.pointPlacement = null;
    options.series.stacking = null;
    options.series.minPointLength = 2;

    //just for bubble charts
    options.series.maxSize = 50;
    options.series.sizeBy = 'width'; //instead of 'area', seems more accurate

    var plotOptions = new PlotOptions(options);
    return plotOptions;
};

module.exports = plotOptionsInit;

},{"../constructors/charts/plot_options.js":7,"../form_updates/update_legend.js":21}],33:[function(require,module,exports){
"use strict";

var Series = require("../constructors/charts/series.js");

/** Initializer for "series" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var seriesInit = function seriesInit(series) {

    //load options from user inputs
    var options = series;

    var series = new Series(options);
    return series.series;
};

module.exports = seriesInit;

},{"../constructors/charts/series.js":8}],34:[function(require,module,exports){
"use strict";

var Subtitle = require("../constructors/charts/subtitle.js");

/** Initializer for "subtitle" options section of all_chart_options. Creates and returns a new instance
@module
*/

var subtitleInit = function subtitleInit() {

    //load options from user inputs
    var options = {};

    var subtitle = new Subtitle(options);
    return subtitle;
};

module.exports = subtitleInit;

},{"../constructors/charts/subtitle.js":9}],35:[function(require,module,exports){
"use strict";

var Title = require("../constructors/charts/title.js");

/** Initializer for "title" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var titleInit = function titleInit(title_text) {

    //load options from user inputs
    var options = {
        text: title_text
    };

    var title = new Title(options);
    return title;
};

module.exports = titleInit;

},{"../constructors/charts/title.js":10}],36:[function(require,module,exports){
"use strict";

var Tooltip = require("../constructors/charts/tooltip.js");
var utils_forms = require("../utils/utils_forms.js");

/** Initializer for "tooltip" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var tooltipInit = function tooltipInit() {

    //load options from user inputs
    var options = {
        formatter: undefined ///formatter is created with update_tooltip as a callback (needs chart to exist first)

    };

    var tooltip = new Tooltip(options);
    return tooltip;
};

module.exports = tooltipInit;

},{"../constructors/charts/tooltip.js":11,"../utils/utils_forms.js":46}],37:[function(require,module,exports){
"use strict";

var update_x_axis = require("../form_updates/update_x_axis.js");
var XAxis = require("../constructors/charts/x_axis.js");

/** Initializer for "xAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var xAxisInit = function xAxisInit(categories, chart_type) {

    //load options from user inputs
    var options = {

        categories: categories || undefined,
        plotLines: [{
            "value": 0,
            "color": "#c0c0c0",
            "dashStyle": "solid",
            "width": chart_type === "scatter" || chart_type === "bubble" ? 1 : 0
        }],
        title: {
            align: chart_type === "bar" || chart_type === "stacked_bar" ? "high" : "middle",
            text: $("#chart_x_axis_title_textarea").val(),
            x: chart_type === "bar" || chart_type === "stacked_bar" ? 40 : 0
        },
        tickInterval: update_x_axis.updateTickmarkInterval(Number($("#chart_x_axis_tickmark_interval_input").val()))

    };

    var xAxis = new XAxis(options);
    return xAxis;
};

module.exports = xAxisInit;

},{"../constructors/charts/x_axis.js":12,"../form_updates/update_x_axis.js":24}],38:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");
var YAxis = require("../constructors/charts/y_axis.js");
var update_y_axis = require("../form_updates/update_y_axis.js");
var utils_forms = require("../utils/utils_forms.js");

/** Initializer for "yAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var yAxisInit = function yAxisInit(chart_type) {

    /** load options from user inputs */
    var options = {

        labels: {
            format: update_y_axis.updateFormat($("#chart_y_axis_signs_select").val(), $("#chart_y_axis_decimals_select").val()) //val, decimals
        },

        max: update_y_axis.updateMax(Number($("#chart_y_axis_max_input").val())),
        min: update_y_axis.updateMin(Number($("#chart_y_axis_min_input").val())),
        type: update_y_axis.updateIsLog(utils_forms.getCheckBoxValue($("#chart_y_axis_log_checkbox"))),
        opposite: utils_forms.getCheckBoxValue($("#chart_y_axis_opposite_checkbox")),
        tickInterval: update_y_axis.updateTickmarkInterval(Number($("#chart_y_axis_tickmark_interval_input").val())),

        title: {
            text: $("#chart_y_axis_title_textarea").val(),
            align: chart_type === "bar" ? "middle" : "high",
            x: chart_type === "bar" || chart_type === "stacked_bar" ? 0 : Number($("#chart_y_axis_x_position_input").val()),
            y: chart_type === "bar" || chart_type === "stacked_bar" ? 8 : -20
        }

    };

    var yAxis = new YAxis(options);
    return yAxis;
};

module.exports = yAxisInit;

},{"../constructors/charts/y_axis.js":13,"../form_updates/update_y_axis.js":25,"../utils/utils_forms.js":46,"../utils/utils_main.js":47}],39:[function(require,module,exports){
"use strict";

var update_individual_series = require("./form_updates/update_individual_series.js");

/**
 * Contains functions that deal with keyboard inputs
 * @namespace
 */
var keyboard_inputs = {

    adjValue: function adjValue(val, direction) {
        var val = Number(val);
        if (!isNaN(val)) {
            return direction === "+" ? val + 10 : val - 10;
        } else {
            return val;
        }
    },

    /** clicks the next element of a given classname than the one selected
    @param classname {string} the class name of each of the elements
    @param selected_classname {string} the name of the selected element
    **/
    clickNext: function clickNext(classname, selected_classname) {
        var next = 0;
        var len = $("." + classname).length;
        $("." + classname).each(function (i) {
            if ($(this).hasClass(selected_classname)) {
                next = i + 1;
                if (next === len) {
                    next = 0;
                }
            }
        });
        $("." + classname + ":eq(" + next + ")").click();
    },

    /** when nothing is selected, pressing up or downchanges which side nav tab is selected */
    sideNavTabShortcuts: function sideNavTabShortcuts(chart, all_chart_options) {
        $(document).keydown(function (e) {

            //get code
            if (e.keyCode === 32) {
                //space bar
                e.preventDefault();
                $("#get_code_button").click();

                //chart resizing keys
            } else if (e.shiftKey && e.keyCode === 40) {
                    //shift + down
                    e.preventDefault();
                    $("#chart_height_textinput").val(keyboard_inputs.adjValue($("#chart_height_textinput").val(), "+")).keyup();
                } else if (e.shiftKey && e.keyCode === 38) {
                    //shift + up
                    e.preventDefault();
                    $("#chart_height_textinput").val(keyboard_inputs.adjValue($("#chart_height_textinput").val(), "-")).keyup();
                } else if (e.shiftKey && e.keyCode === 37) {
                    //shift + left
                    e.preventDefault();
                    $("#chart_width_textinput").val(keyboard_inputs.adjValue($("#chart_width_textinput").val(), "-")).keyup();
                } else if (e.shiftKey && e.keyCode === 39) {
                    //shift + right
                    e.preventDefault();
                    $("#chart_width_textinput").val(keyboard_inputs.adjValue($("#chart_width_textinput").val(), "+")).keyup();
                }

                //margin resizing keys (up and right margins)
                else if ((event.ctrlKey || event.metaKey) && e.keyCode === 39) {
                        //ctrl/cmd + right
                        e.preventDefault();
                        $("#right_margin_textinput").val(keyboard_inputs.adjValue($("#right_margin_textinput").val(), "-")).keyup();
                    } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 37) {
                        //ctrl/cmd + left
                        e.preventDefault();
                        $("#right_margin_textinput").val(keyboard_inputs.adjValue($("#right_margin_textinput").val(), "+")).keyup();
                    } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 38) {
                        //ctrl/cmd + up
                        e.preventDefault();
                        $("#top_margin_textinput").val(keyboard_inputs.adjValue($("#top_margin_textinput").val(), "-")).keyup();
                    } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 40) {
                        //ctrl/cmd + down
                        e.preventDefault();
                        $("#top_margin_textinput").val(keyboard_inputs.adjValue($("#top_margin_textinput").val(), "+")).keyup();
                    }

                    //margin resizing keys (bottom and left margins
                    else if (event.altKey && e.keyCode === 39) {
                            //alt + right
                            e.preventDefault();
                            $("#left_margin_textinput").val(keyboard_inputs.adjValue($("#left_margin_textinput").val(), "+")).keyup();
                        } else if (event.altKey && e.keyCode === 37) {
                            //alt + left
                            e.preventDefault();
                            $("#left_margin_textinput").val(keyboard_inputs.adjValue($("#left_margin_textinput").val(), "-")).keyup();
                        } else if (event.altKey && e.keyCode === 38) {
                            //alt + up
                            e.preventDefault();
                            $("#bottom_margin_textinput").val(keyboard_inputs.adjValue($("#bottom_margin_textinput").val(), "+")).keyup();
                        } else if (event.altKey && e.keyCode === 40) {
                            //alt + down
                            e.preventDefault();
                            $("#bottom_margin_textinput").val(keyboard_inputs.adjValue($("#bottom_margin_textinput").val(), "-")).keyup();
                        }

                        //side nav up and down keys
                        else if (e.keyCode === 38) {
                                //up
                                e.preventDefault();
                                $(".selected_tab").prev().click();
                            } else if (e.keyCode === 40) {
                                //down
                                e.preventDefault();
                                keyboard_inputs.clickNext("tab", "selected_tab");
                            }

                            //chart type (cycle through)   
                            else if (e.shiftKey && e.keyCode === 67) {
                                    //shift + c
                                    e.preventDefault();
                                    keyboard_inputs.clickNext("chart_type_icon", "selected_chart_type");
                                }

                                //data load - series names from columns / rows
                                else if (e.keyCode === 9) {
                                        //tab
                                        e.preventDefault();
                                        keyboard_inputs.clickNext("load_series_from_icon", "selected_load_series_from");
                                        update_individual_series.populateForm(chart, all_chart_options);
                                    }

                                    //color template (cycle through)   
                                    else if (e.keyCode === 67) {
                                            //c
                                            e.preventDefault();
                                            keyboard_inputs.clickNext("color_palette_row", "color_palette_selected");
                                        }

                                        //side nav shortcut keys
                                        else if (e.keyCode === 83) {
                                                //s
                                                $("#tab_chart_template").click();
                                            } else if (e.keyCode === 68) {
                                                //d
                                                $("#tab_data").click();
                                            } else if (e.keyCode === 73) {
                                                //i
                                                $("#tab_series_options").click();
                                            } else if (e.keyCode === 76) {
                                                //l
                                                $("#tab_chart_legend").click();
                                            } else if (e.keyCode === 88) {
                                                //x
                                                $("#tab_chart_x_axis").click();
                                            } else if (e.keyCode === 89) {
                                                //y
                                                $("#tab_chart_y_axis").click();
                                            } else if (e.keyCode === 84) {
                                                //t
                                                $("#tab_chart_tooltip").click();
                                            } else if (e.keyCode === 78) {
                                                //n
                                                $("#tab_chart_credits").click();
                                            } else if (e.keyCode === 69) {
                                                //69
                                                $("#tab_chart_extra_options").click();
                                            }
        });
    },

    /** in number entry inputs, pressing up or down will adjust value */
    numberChange: function numberChange(e) {
        if (e.keyCode === 38) {
            //up
            $(this).val(keyboard_inputs.adjValue($(this).val(), "+"));
        } else if (e.keyCode === 40) {
            //down
            $(this).val(keyboard_inputs.adjValue($(this).val(), "-"));
        }
    },

    /** initialize listenters 
    when a number entry input is focused on, attach those event listeners
    when it leaves to main document, attach those
    **/
    initListeners: function initListeners(chart, all_chart_options) {
        $("input, textarea").focus(function () {
            $(document).unbind();
            $(this).off("keydown"); //so it doesnt duplicate when moving from one entry to another
            $(".number_entry").on("keydown", keyboard_inputs.numberChange);
        });
        $("input, textarea").blur(function () {
            $(this).off("keydown");
            //reinit side tab nav shortcuts
            keyboard_inputs.sideNavTabShortcuts(chart, all_chart_options);
        });
    }

};

module.exports = keyboard_inputs;

},{"./form_updates/update_individual_series.js":20}],40:[function(require,module,exports){
"use strict";

var utils_main = require("./utils/utils_main.js");

/** object that contains functions for all the navigation, ie changing between options and chart types 
@namespace
*/
var navigation_setup = {

    /** when tabs on left side nav bar are clicked, options displayed are changed **/
    sideNavTabsChange: function sideNavTabsChange() {

        $("#side_nav_tabs .tab").click(function () {
            //change selected menu tab
            $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
            $(this).addClass("selected_tab");

            //change display div showing
            var selectedID = "#" + $(this).attr("id").replace("tab", "display");
            $("#side_display .selected_display").removeClass("selected_display");
            $(selectedID).addClass("selected_display");
        });
    },

    /** when chart code is entered, update **/
    chartOutputCodeFocus: function chartOutputCodeFocus(all_chart_options) {
        $("#chart_output_code").hover(function () {
            utils_main.writeCode(all_chart_options);
        });
    },

    /** when chart type icon is clicked and changed **/
    chartTypeIconChange: function chartTypeIconChange() {

        $("#chart_type_icons .chart_type_icon").click(function () {
            //change selected icon
            $("#chart_type_icons .chart_type_icon").removeClass("selected_chart_type");
            $(this).addClass("selected_chart_type");
            var chart_type = $(this).divVal();

            //hide stuff unrelated to that chart type (line, bar, column)
            if (["area", "line", "bar", "column", "stacked_column", "stacked_bar"].indexOf(chart_type) > -1) {
                $(".show_line, .show_bar, .show_column").show();
            } else {
                $(".show_line, .show_bar, .show_column").hide();
            }

            if (chart_type === "scatter") {
                $(".show_scatter").show();
            } else {
                $(".show_scatter").hide();
            }
        });
    },

    /** when clear next text area button (X) is clicked, find and clear the text of the next textarea */
    clearNextTextareaClick: function clearNextTextareaClick() {
        $(".clear_next_textarea_button").click(function () {
            $(this).next("textarea").val("");
        });
    },

    /** when #color_palette_reverse_icon is clicked, reverse the orders of each palette */
    colorPaletteReverseIconClick: function colorPaletteReverseIconClick() {
        $("#color_palette_reverse_icon").click(function () {
            $(".color_palette_row").each(function () {
                var this_row = $(this);
                var color_cells = this_row.children('.color_palette_cell');
                this_row.prepend(color_cells.get().reverse());
            });
            $(".color_palette_selected").click();
        });
    },

    /** when .color_palette_row is clicked, change colors */
    colorPaletteRowClick: function colorPaletteRowClick() {
        $(".color_palette_row").click(function () {
            $(".color_palette_row").removeClass("color_palette_selected");
            $(this).addClass("color_palette_selected");
        });
    },

    /** when a help icon is clicked */

    helpIconClick: function helpIconClick() {

        $(".help_icon").click(function () {
            $(this).toggleClass("help_on");
            $(".notes", $(this).parents(".display, #main_result_code_div")).toggle();
        });
    },

    /** when a get code button is clicked, update and show the code area. */

    getCodeButtonClick: function getCodeButtonClick(all_chart_options) {

        $("#get_code_button").click(function (e) {

            var $get_code_span = $("#get_code_text");
            $(this).toggleClass("code_on");
            $("#main_result_code_div").slideToggle(100);
            if ($get_code_span.text() === "Get code") {
                utils_main.writeCode(all_chart_options);
                $get_code_span.text("Hide code");
            } else {
                $get_code_span.text("Get code");
            }
        });
    },

    /** when "Load series names from:" icons are clicked and changed */
    loadSeriesFromIcon: function loadSeriesFromIcon() {

        $("#table_input_load_series_from_icons .load_series_from_icon").click(function () {
            //change selected icon
            $("#table_input_load_series_from_icons .load_series_from_icon").removeClass("selected_load_series_from");
            $(this).addClass("selected_load_series_from");
        });
    },

    /** INIT ALL NAVIGATION, called from app.js when page is loaded **/
    initAllNavigation: function initAllNavigation(all_chart_options) {

        navigation_setup.sideNavTabsChange();
        navigation_setup.chartTypeIconChange();
        navigation_setup.helpIconClick();
        navigation_setup.getCodeButtonClick(all_chart_options);
        navigation_setup.chartOutputCodeFocus(all_chart_options);
        navigation_setup.loadSeriesFromIcon();
        navigation_setup.clearNextTextareaClick();
        navigation_setup.colorPaletteRowClick();
        navigation_setup.colorPaletteReverseIconClick();
    }

};

module.exports = navigation_setup;

},{"./utils/utils_main.js":47}],41:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for bubble charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForBubble = function parseForBubble(input, chart_type, colors) {
    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            color: colors[i],
            _symbolIndex: i
        };

        //get data values from each row's td cells (every third cell for xyz groups)
        $("td:nth-child(3n - 1)", this_row).each(function (i) {
            var x = Number($.trim($(this).text()));
            var y = Number($.trim($(this).next().text()));
            var z = Number($.trim($(this).next().next().text()));
            var xyz_arr = [x, y, z];
            seriesObj.data.push(xyz_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForBubble;

},{}],42:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for scatter charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForScatter = function parseForScatter(input, chart_type, colors) {
    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            color: colors[i],
            _symbolIndex: i
        };

        //get data values from each row's td cells
        $("td:even", this_row).each(function (i) {
            var x = Number($.trim($(this).text()));
            var y = Number($.trim($(this).next().text()));
            var xy_arr = [x, y];
            seriesObj.data.push(xy_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForScatter;

},{}],43:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for typical chart types (line, bar, column) 
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param load_series_from {string} column_heads or column_rows
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */

var parseForTypicalChart = function parseForTypicalChart(input, load_series_from, chart_type, legend_toggle_enabled, colors) {

    var type = chart_type.replace("stacked_", "");

    var output = {};

    /** If loading series names from column heads is selected*/
    if (load_series_from === "column_heads") {
        //load x-axis categories from row heads
        output.x_axis_categories = [];
        $("tbody th", input).each(function () {
            output.x_axis_categories.push($.trim($(this).text()));
        });

        //load series object names from column heads, and data from each column tds
        output.series = [];

        $("thead tr:last th:gt(0)", input).each(function (i) {
            var seriesObj = {
                name: $.trim($.trim($(this).text())),
                data: [],
                type: type,
                color: colors[i],
                _symbolIndex: i,
                stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null,
                visible: i > 0 && legend_toggle_enabled === true ? false : true

            };

            //data from each column's tds
            $("tbody tr", input).each(function () {
                var this_row = $(this);
                $("td:eq(" + i + ")", this_row).each(function () {
                    seriesObj.data.push($(this).getNumber());
                });
            });

            output.series.push(seriesObj);
        });

        /** Else if loading series names from row heads is selected*/
    } else {

            //load x-axis categories from column heads
            output.x_axis_categories = [];
            $("thead th:gt(0)", input).each(function () {
                output.x_axis_categories.push($.trim($(this).text()));
            });

            //load series object names from row heads, and data from row tds
            output.series = [];
            $("tbody tr", input).each(function (i) {

                var this_row = $(this);

                var seriesObj = {
                    name: $.trim($("th:eq(0)", this_row).text()),
                    data: [],
                    type: type,
                    color: colors[i],
                    _symbolIndex: i,
                    stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null,
                    visible: i > 0 && legend_toggle_enabled === true ? false : true
                };

                //get data values from each row's td cells
                $("td", this_row).each(function () {
                    seriesObj.data.push($(this).getNumber());
                });

                output.series.push(seriesObj);
            });
        }

    return output;
};

module.exports = parseForTypicalChart;

},{}],44:[function(require,module,exports){
"use strict";

/* takes the table html from a given textarea and parses it into an object, depending on useer-selected inputs */

/* parsing function for typical chart types (line, bar, column) */
var parseForTypicalChart = require("./parse_for_typical_chart.js");

/* parsing function for scatter charts */
var parseForScatter = require("./parse_for_scatter.js");

/* parsing function for bubble charts */
var parseForBubble = require("./parse_for_bubble.js");

/** parsing function for drilldown charts */
var parseForDrilldown = function parseForDrilldown(input) {};

/** parsing function for map charts */
var parseForMap = function parseForMap(input) {};

/** 
* Function that decides which parse function to run, depending on chart type
* @module
* @param input {element} input jquery table element retrieved from textarea
* @param load_series_from {string} column_heads or column_rows
* @param chart_type {string} type of chart (line, bar etc.)
* @returns {object} Object with chart title, X-axis categories and series array of objects
*/

var parseTableInput = function parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, colors) {

    var output;
    /** Depending on the chart type, start that parsing */
    if (["area", "line", "bar", "stacked_bar", "column", "stacked_column"].indexOf(chart_type) > -1) {
        output = parseForTypicalChart(input, load_series_from, chart_type, legend_toggle_enabled, colors);
    } else if (chart_type == "bubble") {
        output = parseForBubble(input, chart_type, colors);
    } else if (chart_type == "scatter") {
        output = parseForScatter(input, chart_type, colors);
    } else if (chart_type == "drilldown") {
        output = parseForDrilldown(input, chart_type, colors);
    } else if (chart_type == "map") {
        output = parseForMap(input);
    }

    //add chart title (same for all types of charts)
    output.title_text = $("caption", input).text();

    return output;
};

module.exports = parseTableInput;

},{"./parse_for_bubble.js":41,"./parse_for_scatter.js":42,"./parse_for_typical_chart.js":43}],45:[function(require,module,exports){
"use strict";

/** 
* custom jQuery extensions
* @module
*/
var jq_extensions = function () {

    jQuery.fn.extend({

        /** extend so that we can get and set "value" with divs */
        divVal: function divVal(string) {
            if (arguments.length === 0) {
                return $(this).attr("value");
            } else {
                $(this).attr("value", string);
                return $(this);
            }
        },

        /** puts commas in a number */
        addCommas: function addCommas() {
            var val = this[0];
            if (isNaN(val)) {
                return val;
            } else if (val > 999 || val < -999) {
                while (/(\d+)(\d{3})/.test(val.toString())) {
                    val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
                }
            }
            return val;
        },

        /** takes an element's text string and returns a number, trimming spaces and removing non-numbers (good for numbers with commas etc.)*/
        getNumber: function getNumber() {
            var val = Number($.trim($(this).text().replace(/[^0-9\.\-]+/g, '')));
            return isNaN(val) ? null : val;
        }

    });
}();

module.exports = jq_extensions;

},{}],46:[function(require,module,exports){
"use strict";

/**
 * Forms utility object, contains functions that work with form elements
 * @namespace
 */
var utils_forms = {

    /** returns true if checkbox is checked, false if not 
    @param elem {element} checkbox element
    @returns {bool}
    */
    getCheckBoxValue: function getCheckBoxValue(elem) {
        return elem.is(':checked');
    },

    /** gets an array of values from a given class 
    @param class_name {string}
    @returns {array}
    */
    getClassValuesArray: function getClassValuesArray(class_name) {
        var arr = [];
        $("." + class_name).each(function () {
            arr.push(Number($(this).val()));
        });
        return arr;
    }

};

module.exports = utils_forms;

},{}],47:[function(require,module,exports){
"use strict";

/**
 * Main utility object, contains functions that get reused often
 * @namespace
 */
var utils_main = {

    /** check value - if 0 or not a number, return undefined **/
    checkforUndefined: function checkforUndefined(val) {
        return val === 0 || isNaN(val) ? undefined : val;
    },

    /** 
    turns objects into strings, including their methods 
    @returns {string} JSON
    */
    deepStringify: function deepStringify(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (typeof value === 'function') {
                return value.toString();
            } else {
                return value;
            }
        }).replace(/\\n/g, "");
    },

    makeClearFloatDiv: function makeClearFloatDiv() {
        var clear_div = document.createElement("div");
        clear_div.className = "clearfloat";
        return clear_div;
    },

    rgb2arr: function rgb2arr(rgb) {
        return rgb.replace(/[^0-9\,]+/g, '').split(",").map(function (item) {
            return parseInt(item, 10);
        });
    },

    /** stringify tooltip formatter function **/
    stringifyFormatter: function stringifyFormatter(new_tooltip, decimals, multiplier, signs_arr) {
        return new_tooltip.toString().replace(/multiplier/g, multiplier).replace(/decimals/g, decimals).replace(/signs_arr\[0\]/g, '"' + signs_arr[0] + '"').replace(/signs_arr\[1\]/g, '"' + signs_arr[1] + '"');
    },

    /** place code in chart_output_code and reinit highlight */
    writeCode: function writeCode(all_chart_options) {

        var chart_options_js_string = utils_main.deepStringify(all_chart_options);
        $("#chart_output_code").text(chart_options_js_string).each(function (i, block) {
            hljs.highlightBlock(block);
        });
    }

};

module.exports = utils_main;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzY3JpcHRzX3NyYy9hcHAuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL2FsbF9jaGFydF9vcHRpb25zLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9jaGFydC5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvY3JlZGl0cy5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvZXhwb3J0aW5nLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9sZWdlbmQuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL3Bsb3Rfb3B0aW9ucy5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvc2VyaWVzLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9zdWJ0aXRsZS5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvdGl0bGUuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL3Rvb2x0aXAuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL3hfYXhpcy5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMveV9heGlzLmpzIiwic2NyaXB0c19zcmMvZHJhd19jaGFydC5qcyIsInNjcmlwdHNfc3JjL2Zvcm1fdXBkYXRlcy9hbGxfZm9ybV91cGRhdGVzLmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL3VwZGF0ZV9jaGFydF90eXBlLmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL3VwZGF0ZV9jb2xvcnMuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX2NyZWRpdHMuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX2RhdGEuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX2luZGl2aWR1YWxfc2VyaWVzLmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL3VwZGF0ZV9sZWdlbmQuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX3RlbXBsYXRlLmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL3VwZGF0ZV90b29sdGlwLmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL3VwZGF0ZV94X2F4aXMuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX3lfYXhpcy5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9hbGxfY2hhcnRfb3B0aW9uc19pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL2NoYXJ0X2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvY29sb3JzX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvY3JlZGl0c19pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL2V4cG9ydGluZ19pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL2xlZ2VuZF9pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL3Bsb3Rfb3B0aW9uc19pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL3Nlcmllc19pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL3N1YnRpdGxlX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvdGl0bGVfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy90b29sdGlwX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMveF9heGlzX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMveV9heGlzX2luaXQuanMiLCJzY3JpcHRzX3NyYy9rZXlib2FyZF9pbnB1dHMuanMiLCJzY3JpcHRzX3NyYy9uYXZpZ2F0aW9uX3NldHVwLmpzIiwic2NyaXB0c19zcmMvcGFyc2Vycy9wYXJzZV9mb3JfYnViYmxlLmpzIiwic2NyaXB0c19zcmMvcGFyc2Vycy9wYXJzZV9mb3Jfc2NhdHRlci5qcyIsInNjcmlwdHNfc3JjL3BhcnNlcnMvcGFyc2VfZm9yX3R5cGljYWxfY2hhcnQuanMiLCJzY3JpcHRzX3NyYy9wYXJzZXJzL3BhcnNlX3RhYmxlX2lucHV0LmpzIiwic2NyaXB0c19zcmMvdXRpbHMvanFfZXh0ZW5zaW9ucy5qcyIsInNjcmlwdHNfc3JjL3V0aWxzL3V0aWxzX2Zvcm1zLmpzIiwic2NyaXB0c19zcmMvdXRpbHMvdXRpbHNfbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsRUFBRSxRQUFGLEVBQVksS0FBWixDQUFrQixZQUFZOzs7QUFHMUIsUUFBSSxnQkFBZ0IsUUFBUSwwQkFBUixDQUFoQixDQUhzQjtBQUkxQixRQUFJLGFBQWEsUUFBUSxvQkFBUixDQUFiOzs7QUFKc0IsUUFTdEIsc0JBQXNCLFFBQVEsMENBQVIsQ0FBdEIsQ0FUc0I7QUFVMUIsUUFBSSxvQkFBb0IscUJBQXBCOzs7QUFWc0IsUUFhdEIsYUFBYSxRQUFRLGlCQUFSLENBQWIsQ0Fic0I7QUFjMUIsUUFBSSxRQUFRLFdBQVcsSUFBWCxDQUFnQixpQkFBaEIsQ0FBUjs7O0FBZHNCLGNBaUIxQixDQUFXLFNBQVgsQ0FBcUIsaUJBQXJCOzs7QUFqQjBCLFFBb0J0QixtQkFBbUIsUUFBUSx1QkFBUixDQUFuQixDQXBCc0I7QUFxQjFCLHFCQUFpQixpQkFBakIsQ0FBbUMsaUJBQW5DLEVBckIwQjs7QUF1QjFCLFFBQUksa0JBQWtCLFFBQVEsbUJBQVIsQ0FBbEI7O0FBdkJzQixtQkF5QjFCLENBQWdCLG1CQUFoQixDQUFvQyxLQUFwQyxFQUEyQyxpQkFBM0MsRUF6QjBCO0FBMEIxQixvQkFBZ0IsYUFBaEIsQ0FBOEIsS0FBOUIsRUFBcUMsaUJBQXJDOzs7QUExQjBCLFFBOEJ0QixpQkFBaUIsUUFBUSxvQ0FBUixDQUFqQixDQTlCc0I7QUEr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QUh6QixDQUlGLE9BSkUsQ0FJTSxpQkFKTixFQUl5QixNQUFNLFVBQVUsQ0FBVixDQUFOLEdBQXFCLEdBQXJCLENBSmhDLENBRHdFO0tBQXhEOzs7QUFXcEIsZUFBVyxTQUFTLFNBQVQsQ0FBbUIsaUJBQW5CLEVBQXNDOztBQUU3QyxZQUFJLDBCQUEwQixXQUFXLGFBQVgsQ0FBeUIsaUJBQXpCLENBQTFCLENBRnlDO0FBRzdDLFVBQUUsb0JBQUYsRUFBd0IsSUFBeEIsQ0FBNkIsdUJBQTdCLEVBQXNELElBQXRELENBQTJELFVBQVUsQ0FBVixFQUFhLEtBQWIsRUFBb0I7QUFDM0UsaUJBQUssY0FBTCxDQUFvQixLQUFwQixFQUQyRTtTQUFwQixDQUEzRCxDQUg2QztLQUF0Qzs7Q0EvQ1g7O0FBNERKLE9BQU8sT0FBUCxHQUFpQixVQUFqQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAvL3V0aWxzXG4gICAgdmFyIGpxX2V4dGVuc2lvbnMgPSByZXF1aXJlKFwiLi91dGlscy9qcV9leHRlbnNpb25zLmpzXCIpO1xuICAgIHZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4vdXRpbHMvdXRpbHNfbWFpblwiKTtcblxuXG5cbiAgICAvL2luaXRpYWwgYWxsIGNoYXJ0IG9wdGlvbnMgaW5pdFxuICAgIHZhciBhbGxDaGFydE9wdGlvbnNJbml0ID0gcmVxdWlyZShcIi4vaW5pdGlhbGl6ZXJzL2FsbF9jaGFydF9vcHRpb25zX2luaXQuanNcIik7XG4gICAgdmFyIGFsbF9jaGFydF9vcHRpb25zID0gYWxsQ2hhcnRPcHRpb25zSW5pdCgpO1xuXG4gICAgLy9kcmF3IGNoYXJ0XG4gICAgdmFyIGRyYXdfY2hhcnQgPSByZXF1aXJlKFwiLi9kcmF3X2NoYXJ0LmpzXCIpO1xuICAgIHZhciBjaGFydCA9IGRyYXdfY2hhcnQuaW5pdChhbGxfY2hhcnRfb3B0aW9ucyk7XG5cbiAgICAvL3dyaXRlIGNvZGUgdG8gXCIjY2hhcnRfb3V0cHV0X2NvZGVcIiBmdW5jdGlvblxuICAgIHV0aWxzX21haW4ud3JpdGVDb2RlKGFsbF9jaGFydF9vcHRpb25zKTtcblxuICAgIC8vcGFnZSBpbml0IChuYXZpZ2F0aW9uIGFuZCBrZXlib2FyZCBlbnRyaWVzKVxuICAgIHZhciBuYXZpZ2F0aW9uX3NldHVwID0gcmVxdWlyZShcIi4vbmF2aWdhdGlvbl9zZXR1cC5qc1wiKTtcbiAgICBuYXZpZ2F0aW9uX3NldHVwLmluaXRBbGxOYXZpZ2F0aW9uKGFsbF9jaGFydF9vcHRpb25zKTtcblxuICAgIHZhciBrZXlib2FyZF9pbnB1dHMgPSByZXF1aXJlKFwiLi9rZXlib2FyZF9pbnB1dHNcIik7XG4gICAgLy9maXJzdCBpbml0XG4gICAga2V5Ym9hcmRfaW5wdXRzLnNpZGVOYXZUYWJTaG9ydGN1dHMoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICBrZXlib2FyZF9pbnB1dHMuaW5pdExpc3RlbmVycyhjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG5cbiAgICAvL2FsbCBmb3JtIHVwZGF0ZXMgLSB3aGVuIHVwZGF0ZXMgYXJlIG1hZGUsIHVwZGF0ZSB0aGUgY2hhcnRcbiAgICB2YXIgYWxsRm9ybVVwZGF0ZXMgPSByZXF1aXJlKFwiLi9mb3JtX3VwZGF0ZXMvYWxsX2Zvcm1fdXBkYXRlcy5qc1wiKTtcbiAgICBhbGxGb3JtVXBkYXRlcyhjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG59KTsiLCIvKiogXG4qIEFsbCBDaGFydCBvcHRpb25zIGNvbnN0cnVjdG9yLiBDb21iaW5lcyBhbGwgb3RoZXIgb3B0aW9ucyBpbnRvIG1haW4gb3B0aW9ucyBvYmplY3QuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzIFxuQGNvbnN0cnVjdG9yIEFsbENoYXJ0T3B0aW9uc1xuQHBhcmFtIG8ge29iamVjdH0gY2hhcnQgb3B0aW9ucyBvYmplY3RcbiovXG52YXIgQWxsQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKG8pIHtcbiAgICB0aGlzLmNoYXJ0ID0gby5jaGFydDtcbiAgICB0aGlzLmNvbG9ycyA9IG8uY29sb3JzO1xuICAgIHRoaXMuY3JlZGl0cyA9IG8uY3JlZGl0cztcbiAgICB0aGlzLmV4cG9ydGluZyA9IG8uZXhwb3J0aW5nO1xuICAgIHRoaXMubGVnZW5kID0gby5sZWdlbmQ7XG4gICAgdGhpcy5wbG90T3B0aW9ucyA9IG8ucGxvdE9wdGlvbnM7XG4gICAgdGhpcy5zZXJpZXMgPSBvLnNlcmllcztcbiAgICB0aGlzLnN1YnRpdGxlID0gby5zdWJ0aXRsZTtcbiAgICB0aGlzLnRpdGxlID0gby50aXRsZTtcbiAgICB0aGlzLnRvb2x0aXAgPSBvLnRvb2x0aXA7XG4gICAgdGhpcy54QXhpcyA9IG8ueEF4aXM7XG4gICAgdGhpcy55QXhpcyA9IG8ueUF4aXM7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBbGxDaGFydE9wdGlvbnM7IiwiLyoqIENoYXJ0IG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI2NoYXJ0XG4qIEBjb25zdHJ1Y3RvciBDaGFydE9wdGlvbnMgXG4qICBAcGFyYW0gbyB7b2JqZWN0fSBjaGFydCBvcHRpb25zIG9iamVjdFxuKi9cbnZhciBDaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5yZW5kZXJUbyA9IG8ucmVuZGVyVG8gfHwgXCJjaGFydF9kaXNwbGF5X2FyZWFcIjtcbiAgICB0aGlzLm1hcmdpbiA9IFtvLm1hcmdpblswXSB8fCA5MCwgby5tYXJnaW5bMV0gfHwgNDAsIG8ubWFyZ2luWzJdIHx8IDgwLCBvLm1hcmdpblszXSB8fCA3NV07IC8vW3RvcCxyaWdodCxib3R0b20sbGVmdF1cbiAgICB0aGlzLmJvcmRlcldpZHRoID0gby5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIHRoaXMucGxvdEJvcmRlckNvbG9yID0gby5wbG90Qm9yZGVyQ29sb3IgfHwgJyNmZmYnO1xuICAgIHRoaXMucGxvdEJvcmRlcldpZHRoID0gby5wbG90Qm9yZGVyV2lkdGggfHwgMDtcbiAgICB0aGlzLnR5cGUgPSBvLnR5cGUgfHwgJ2xpbmUnO1xuICAgIHRoaXMuem9vbVR5cGUgPSBvLnpvb21UeXBlIHx8IG51bGw7XG4gICAgdGhpcy5hbGlnblRpY2tzID0gby5hbGlnblRpY2tzIHx8IGZhbHNlO1xuICAgIHRoaXMuaW52ZXJ0ZWQgPSBvLmludmVydGVkIHx8IGZhbHNlO1xuICAgIHRoaXMuaWdub3JlSGlkZGVuU2VyaWVzID0gby5pZ25vcmVIaWRkZW5TZXJpZXMgfHwgdHJ1ZTsgLy9mYWxzZSBmb3IgYnViYmxlIGNoYXJ0cyBzbyBidWJibGVzIHdvbid0IHJlc2l6ZVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhcnRPcHRpb25zOyIsIi8qKiBDcmVkaXRzIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI2NyZWRpdHNcbiogQGNvbnN0cnVjdG9yIENyZWRpdHMgXG4qICBAcGFyYW0gbyB7b2JqZWN0fSBjcmVkaXRzIG9wdGlvbnMgb2JqZWN0XG4qL1xudmFyIENyZWRpdHMgPSBmdW5jdGlvbiAobykge1xuICAgIHRoaXMuaHJlZiA9IFwiaHR0cDovL3d3dy5ibHMuZ292XCI7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0ge1xuICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICB4OiAxMCxcbiAgICAgICAgeTogby5wb3NpdGlvbiA/IG8ucG9zaXRpb24ueSB8fCAtMjAgOiAtMjBcbiAgICB9O1xuXG4gICAgdGhpcy5zdHlsZSA9IHtcbiAgICAgICAgY3Vyc29yOiBcImRlZmF1bHRcIixcbiAgICAgICAgY29sb3I6IFwiIzJDMkMyQ1wiXG4gICAgfTtcblxuICAgIHRoaXMudGV4dCA9IG8udGV4dCB8fCBcIlwiO1xuICAgIHRoaXMudXNlSFRNTCA9IHRydWU7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBDcmVkaXRzOyIsIi8qKiBFeHBvcnRpbmcgb3B0aW9ucyBjb25zdHJ1Y3Rvci4gSW5mbyBhdCBodHRwOi8vYXBpLmhpZ2hjaGFydHMuY29tL2hpZ2hjaGFydHMjZXhwb3J0aW5nXG4qIEBjb25zdHJ1Y3RvciBFeHBvcnRpbmcgXG4qIEBwYXJhbSBvIHtvYmplY3R9IGV4cG9ydGluZyBvcHRpb25zIG9iamVjdFxuKi9cbnZhciBFeHBvcnRpbmcgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5idXR0b25zID0ge1xuICAgICAgICBjb250ZXh0QnV0dG9uOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ2JvdHRvbScsXG4gICAgICAgICAgICB4OiAtMTBcbiAgICAgICAgfVxuICAgIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBFeHBvcnRpbmc7IiwiLyoqIExlZ2VuZCBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNsZWdlbmQgXG4qIEBjb25zdHJ1Y3RvciBMZWdlbmQgXG4qIEBwYXJhbSBvIHtvYmplY3R9IGxlZ2VuZCBvcHRpb25zIG9iamVjdFxuKi9cbnZhciBMZWdlbmQgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5hbGlnbiA9IG8uYWxpZ24gfHwgJ2xlZnQnO1xuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gby5iYWNrZ3JvdW5kQ29sb3IgfHwgJ25vbmUnO1xuICAgIHRoaXMuYm9yZGVyQ29sb3IgPSBvLmJvcmRlckNvbG9yIHx8ICdub25lJztcbiAgICB0aGlzLmJvcmRlcldpZHRoID0gby5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIHRoaXMuZW5hYmxlZCA9IG8uZW5hYmxlZCB8fCB0cnVlO1xuICAgIHRoaXMuZmxvYXRpbmcgPSBvLmZsb2F0aW5nIHx8IGZhbHNlO1xuICAgIHRoaXMuaXRlbURpc3RhbmNlID0gby5pdGVtRGlzdGFuY2UgfHwgMzA7XG4gICAgdGhpcy5sYXlvdXQgPSBvLmxheW91dCB8fCAnaG9yaXpvbnRhbCc7XG4gICAgdGhpcy5yZXZlcnNlZCA9IG8ucmV2ZXJzZWQgfHwgZmFsc2U7XG4gICAgdGhpcy5zaGFkb3cgPSBvLnNoYWRvdyB8fCBmYWxzZTtcbiAgICB0aGlzLnVzZUhUTUwgPSBvLnVzZUhUTUwgfHwgZmFsc2U7XG4gICAgdGhpcy52ZXJ0aWNhbEFsaWduID0gby52ZXJ0aWNhbEFsaWduIHx8ICd0b3AnO1xuICAgIHRoaXMud2lkdGggPSBvLndpZHRoO1xuICAgIHRoaXMueCA9IG8ueCB8fCAwO1xuICAgIHRoaXMueSA9IG8ueSB8fCAzMDtcblxuICAgIHRoaXMuaXRlbVN0eWxlID0ge1xuICAgICAgICBmb250RmFtaWx5OiAnQ2FsaWJyaSwgVmVyZGFuYSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZicsXG4gICAgICAgIGNvbG9yOiAnIzAwMCdcbiAgICB9O1xuICAgIHRoaXMuaXRlbUhpZGRlblN0eWxlID0ge1xuICAgICAgICBjb2xvcjogJ2dyYXknXG4gICAgfTtcbiAgICB0aGlzLml0ZW1Ib3ZlclN0eWxlID0ge1xuICAgICAgICBjdXJzb3I6IG8uaXRlbUhvdmVyU3R5bGUgPyBvLml0ZW1Ib3ZlclN0eWxlLmN1cnNvciB8fCBcInBvaW50ZXJcIiA6IFwicG9pbnRlclwiXG4gICAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGVnZW5kOyIsIi8qKiBQbG90T3B0aW9ucyBjb25zdHJ1Y3Rvci4gSW5mbyBhdCBodHRwOi8vYXBpLmhpZ2hjaGFydHMuY29tL2hpZ2hjaGFydHMjcGxvdE9wdGlvbnNcbiogQGNvbnN0cnVjdG9yIFBsb3RPcHRpb25zIFxuKiBAcGFyYW0gbyB7b2JqZWN0fSBQbG90T3B0aW9ucyBvcHRpb25zIG9iamVjdFxuKi9cbnZhciBQbG90T3B0aW9ucyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICAvL2ZvciBhbGwgY2hhcnQgdHlwZXMuIHZhbHVlcyBhcmUgdW5kZWZpbmVkIGlmIG5vdCBpbiBvLlxuICAgIHRoaXMuc2VyaWVzID0ge1xuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1DbGljazogby5zZXJpZXMuZXZlbnRzLmxlZ2VuZEl0ZW1DbGlja1xuICAgICAgICB9LFxuICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBvLnNlcmllcy5kYXRhTGFiZWxzLmVuYWJsZWQgfHwgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRQbGFjZW1lbnQ6IG8uc2VyaWVzLnBvaW50UGxhY2VtZW50LFxuICAgICAgICBzdGFja2luZzogby5zZXJpZXMuc3RhY2tpbmcsXG4gICAgICAgIHBvaW50UGFkZGluZzogby5zZXJpZXMucG9pbnRQYWRkaW5nLCBcbiAgICAgICAgZ3JvdXBQYWRkaW5nOiBvLnNlcmllcy5ncm91cFBhZGRpbmcsXG4gICAgICAgIG1pblBvaW50TGVuZ3RoOiBvLnNlcmllcy5taW5Qb2ludExlbmd0aCxcbiAgICAgICAgbWF4U2l6ZTogby5zZXJpZXMubWF4U2l6ZSxcbiAgICAgICAgc2l6ZUJ5OiBvLnNlcmllcy5zaXplQnksIFxuICAgICAgICBsaW5lV2lkdGg6IG8uc2VyaWVzLmxpbmVXaWR0aCxcbiAgICAgICAgc3RhdGVzOiBvLnNlcmllcy5zdGF0ZXMsXG4gICAgICAgIG1hcmtlcjogby5zZXJpZXMubWFya2VyXG5cbiAgICB9O1xuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQbG90T3B0aW9uczsiLCIvKiogc2VyaWVzIChhbiBhcnJheSBvZiBvYmpzKSBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNzZXJpZXMgXG4qIEBjb25zdHJ1Y3RvciBTZXJpZXMgXG4qIEBwYXJhbSBvIHtvYmplY3R9IFNlcmllcyBvcHRpb25zIG9iamVjdFxuKi9cbnZhciBTZXJpZXMgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5zZXJpZXMgPSBvIHx8IFt7XG4gICAgICAgICAgXG4gICAgfV07XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcmllczsiLCIvKiogc3VidGl0bGUgb3B0aW9ucyBjb25zdHJ1Y3Rvci4gSW5mbyBhdCBodHRwOi8vYXBpLmhpZ2hjaGFydHMuY29tL2hpZ2hjaGFydHMjc3VidGl0bGVcbiogQGNvbnN0cnVjdG9yIFN1YnRpdGxlIFxuKiBAcGFyYW0gbyB7b2JqZWN0fSBTdWJ0aXRsZSBvcHRpb25zIG9iamVjdFxuKi9cbnZhciBTdWJ0aXRsZSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgXG4gICAgdGhpcy50ZXh0ID0gby50ZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5hbGlnbiA9IG8uYWxpZ24gfHwgXCJsZWZ0XCI7XG4gICAgXG4gICAgdGhpcy5zdHlsZSA9IHtcbiAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgZm9udEZhbWlseTogJ3NhbnMtc2VyaWYnLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgIH07XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1YnRpdGxlOyIsIi8qKiBUaXRsZSBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyN0aXRsZVxuKiBAY29uc3RydWN0b3IgVGl0bGUgXG4qIEBwYXJhbSBvIHtvYmplY3R9IFRpdGxlIG9wdGlvbnMgb2JqZWN0XG4qL1xudmFyIFRpdGxlID0gZnVuY3Rpb24gKG8pIHtcbiAgICBcbiAgICB0aGlzLnRleHQgPSBvLnRleHQgfHwgXCJcIjtcbiAgICB0aGlzLmFsaWduID0gby5hbGlnbiB8fCBcImxlZnRcIjtcbiAgICBcbiAgICB0aGlzLnN0eWxlID0ge1xuICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICBmb250RmFtaWx5OiAnc2Fucy1zZXJpZicsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgZm9udFNpemU6ICcxNHB4J1xuICAgIH07XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRpdGxlO1xuXG4iLCIvKiogVG9vbHRpcCBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyN0b29sdGlwXG4qIEBjb25zdHJ1Y3RvciBUb29sdGlwIFxuKiBAcGFyYW0gbyB7b2JqZWN0fSBUb29sdGlwIG9wdGlvbnMgb2JqZWN0XG4qL1xuXG52YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChvKSB7XG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSAnI0ZFRkZFRic7XG4gICAgdGhpcy5jcm9zc2hhaXJzID0gby5jcm9zc2hhaXJzIHx8IFtmYWxzZSwgZmFsc2VdO1xuICAgIHRoaXMuZm9ybWF0dGVyID0gby5mb3JtYXR0ZXI7XG4gICAgXG4gICAgdGhpcy5zdHlsZSA9IHtcbiAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgZm9udEZhbWlseTogJ0NhbGlicmksIFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnXG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnVzZUhUTUwgPSB0cnVlO1xuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBUb29sdGlwOyIsIi8qKiB4QXhpcyBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyN4QXhpc1xuICogQGNvbnN0cnVjdG9yIFhBeGlzIFxuICogQHBhcmFtIG8ge29iamVjdH0gWEF4aXMgb3B0aW9ucyBvYmplY3RcbiAqL1xudmFyIFhBeGlzID0gZnVuY3Rpb24gKG8pIHtcblxuICAgIHRoaXMuY2F0ZWdvcmllcyA9IG8uY2F0ZWdvcmllcztcbiAgICB0aGlzLmdyaWRMaW5lQ29sb3IgPSBvLmdyaWRMaW5lQ29sb3IgfHwgJyNjMGMwYzAnO1xuICAgIHRoaXMuZ3JpZExpbmVXaWR0aCA9IG8uZ3JpZExpbmVXaWR0aCB8fCAwO1xuICAgIHRoaXMuZ3JpZExpbmVEYXNoU3R5bGUgPSBvLmdyaWRMaW5lRGFzaFN0eWxlIHx8ICdEb3QnO1xuXG4gICAgdGhpcy5sYWJlbHMgPSB7XG4gICAgICAgIGZvcm1hdHRlcjogby5sYWJlbHMgPyBvLmxhYmVscy5mb3JtYXR0ZXIgfHwgdW5kZWZpbmVkIDogdW5kZWZpbmVkLFxuICAgICAgICByb3RhdGlvbjogby5sYWJlbHMgPyBvLmxhYmVscy5yb3RhdGlvbiB8fCAwIDogMCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgICAgICBmb250RmFtaWx5OiAnQ2FsaWJyaSwgVmVyZGFuYSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdGhpcy5saW5lV2lkdGggPSBvLmxpbmVXaWR0aCB8fCAxLjI7XG4gICAgdGhpcy5saW5lQ29sb3IgPSBvLmxpbmVDb2xvciB8fCAnZ3JheSc7XG4gICAgdGhpcy5wbG90QmFuZHMgPSBvLnBsb3RCYW5kcyB8fCBbXTtcbiAgICB0aGlzLnBsb3RMaW5lcyA9IG8ucGxvdExpbmVzIHx8IFt7XG4gICAgICAgIFwidmFsdWVcIjogMCxcbiAgICAgICAgXCJjb2xvclwiOiBcIiNjMGMwYzBcIixcbiAgICAgICAgXCJkYXNoU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgICBcIndpZHRoXCI6IDBcbiAgICB9XTtcblxuICAgIHRoaXMudGlja0ludGVydmFsID0gby50aWNrSW50ZXJ2YWwgfHwgbnVsbDtcbiAgICB0aGlzLnRpY2ttYXJrUGxhY2VtZW50ID0gby50aWNrbWFya1BsYWNlbWVudCB8fCAnb24nO1xuICAgIHRoaXMudGlja1Bvc2l0aW9uID0gby50aWNrUG9zaXRpb24gfHwgJ291dHNpZGUnO1xuICAgIHRoaXMudGlja0NvbG9yID0gby50aWNrQ29sb3IgfHwgJyNDMEQwRTAnO1xuXG4gICAgdGhpcy50aXRsZSA9IHtcbiAgICAgICAgYWxpZ246IG8udGl0bGUuYWxpZ24sXG4gICAgICAgIHVzZUhUTUw6IHRydWUsXG4gICAgICAgIHRleHQ6IG8udGl0bGUgPyBvLnRpdGxlLnRleHQgfHwgJycgOiAnJyxcbiAgICAgICAgbWFyZ2luOiBvLnRpdGxlID8gby50aXRsZS5tYXJnaW4gfHwgNiA6ICcnLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgICAgICBmb250RmFtaWx5OiAnQ2FsaWJyaSwgVmVyZGFuYSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxM3B4J1xuICAgICAgICB9LFxuICAgICAgICB4OiBvLnRpdGxlLnhcbiAgICB9O1xuXG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFhBeGlzOyIsIi8qKiB5QXhpcyBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyN5QXhpc1xuKiBAY29uc3RydWN0b3IgeUF4aXMgXG4qIEBwYXJhbSBvIHtvYmplY3R9IHlBeGlzIG9wdGlvbnMgb2JqZWN0XG4qL1xuXG52YXIgeUF4aXMgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5ncmlkTGluZUNvbG9yID0gby5ncmlkTGluZUNvbG9yIHx8ICcjYzBjMGMwJztcbiAgICB0aGlzLmdyaWRMaW5lV2lkdGggPSBvLmdyaWRMaW5lV2lkdGggfHwgMTtcbiAgICB0aGlzLmdyaWRMaW5lRGFzaFN0eWxlID0gby5ncmlkTGluZURhc2hTdHlsZSB8fCAnRG90JztcblxuICAgIHRoaXMubGFiZWxzID0ge1xuICAgICAgICBcbiAgICAgICAgZm9ybWF0OiBvLmxhYmVscyA/IG8ubGFiZWxzLmZvcm1hdCA6IHt2YWx1ZX0sXG4gICAgICAgIGZvcm1hdHRlcjogby5sYWJlbHMgPyBvLmxhYmVscy5mb3JtYXR0ZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIHJvdGF0aW9uOiBvLmxhYmVscyA/IG8ubGFiZWxzLnJvdGF0aW9uIHx8IDAgOiAwLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICB0aGlzLmxpbmVDb2xvciA9IG8ubGluZUNvbG9yIHx8ICdncmF5JztcbiAgICB0aGlzLmxpbmVXaWR0aCA9IG8ubGluZVdpZHRoIHx8IDE7XG4gICAgdGhpcy5tYXggPSBvLm1heCB8fCBudWxsO1xuICAgIHRoaXMubWluID0gby5taW4gfHwgbnVsbDtcbiAgICB0aGlzLm9wcG9zaXRlID0gby5vcHBvc2l0ZSB8fCBmYWxzZTtcbiAgICB0aGlzLnBsb3RCYW5kcyA9IG8ucGxvdEJhbmRzIHx8IFtdO1xuXG4gICAgdGhpcy5wbG90TGluZXMgPSBvLnBsb3RMaW5lcyB8fCBbe1xuICAgICAgICBcInZhbHVlXCI6IDAsXG4gICAgICAgIFwiY29sb3JcIjogXCIjYzBjMGMwXCIsXG4gICAgICAgIFwiZGFzaFN0eWxlXCI6IFwic29saWRcIixcbiAgICAgICAgXCJ3aWR0aFwiOiAxXG4gICAgfV07XG5cbiAgICB0aGlzLnRpY2tJbnRlcnZhbCA9IG8udGlja0ludGVydmFsIHx8IG51bGw7XG4gICAgdGhpcy50aWNrbWFya1BsYWNlbWVudCA9IG8udGlja21hcmtQbGFjZW1lbnQgfHwgJ29uJztcbiAgICB0aGlzLnRpY2tQb3NpdGlvbiA9IG8udGlja1Bvc2l0aW9uIHx8ICdvdXRzaWRlJztcbiAgICB0aGlzLnRpY2tDb2xvciA9IG8udGlja0NvbG9yIHx8ICcjQzBEMEUwJztcbiAgICB0aGlzLnRpY2tXaWR0aCA9IG8udGlja1dpZHRoIHx8IDE7XG5cbiAgICB0aGlzLnRpdGxlID0ge1xuICAgICAgICB1c2VIVE1MOiB0cnVlLFxuICAgICAgICB0ZXh0OiBvLnRpdGxlID8gby50aXRsZS50ZXh0IHx8ICcnIDogJycsXG4gICAgICAgIG1hcmdpbjogby50aXRsZSA/IG8udGl0bGUubWFyZ2luIHx8IDYgOiA2LFxuICAgICAgICBhbGlnbjogby50aXRsZSA/IG8udGl0bGUuYWxpZ24gfHwgJ21pZGRsZScgOiAnbWlkZGxlJyxcbiAgICAgICAgb2Zmc2V0OiAyMCxcbiAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgIHg6IG8udGl0bGUgPyBvLnRpdGxlLnggfHwgMzUgOiAzNSxcbiAgICAgICAgeTogby50aXRsZSA/IG8udGl0bGUueSB8fCAtMTUgOiAtMTUsXG4gICAgICAgIFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgICAgICAgICBmb250U2l6ZTogJzEzcHgnXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy50eXBlID0gby50eXBlIHx8ICdsaW5lYXInO1xuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB5QXhpczsiLCIvKiogdGFrZXMgYWxsX2NoYXJ0X29wdGlvbnMgYW5kIHByaW50cyBhIGNoYXJ0IHRvIHRoZSBzY3JlZW4gXG5AbmFtZXNwYWNlXG4qL1xuXG52YXIgZHJhd19jaGFydCA9IHtcbiAgICBcbiAgICAvKiogaW5pdGlhbGl6ZSBmdW5jdGlvbiAqKi9cbiAgICBpbml0OiBmdW5jdGlvbiAoYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEhpZ2hjaGFydHMuQ2hhcnQoYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIGNoYXJ0O1xuICAgIH0sXG4gICAgXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZHJhd19jaGFydDsiLCJ2YXIgdXBkYXRlX3RlbXBsYXRlID0gcmVxdWlyZShcIi4vdXBkYXRlX3RlbXBsYXRlLmpzXCIpO1xudmFyIHVwZGF0ZUNoYXJ0VHlwZSA9IHJlcXVpcmUoXCIuL3VwZGF0ZV9jaGFydF90eXBlLmpzXCIpO1xudmFyIHVwZGF0ZUNvbG9ycyA9IHJlcXVpcmUoXCIuL3VwZGF0ZV9jb2xvcnMuanNcIik7XG52YXIgdXRpbHNfZm9ybXMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNfZm9ybXNcIik7XG52YXIgdXBkYXRlX2xlZ2VuZCA9IHJlcXVpcmUoXCIuL3VwZGF0ZV9sZWdlbmQuanNcIik7XG52YXIgdXBkYXRlX3hfYXhpcyA9IHJlcXVpcmUoXCIuL3VwZGF0ZV94X2F4aXMuanNcIik7XG52YXIgdXBkYXRlX3lfYXhpcyA9IHJlcXVpcmUoXCIuL3VwZGF0ZV95X2F4aXMuanNcIik7XG52YXIgdXBkYXRlX3Rvb2x0aXAgPSByZXF1aXJlKFwiLi91cGRhdGVfdG9vbHRpcC5qc1wiKTtcbnZhciB1cGRhdGVfZGF0YSA9IHJlcXVpcmUoXCIuL3VwZGF0ZV9kYXRhLmpzXCIpO1xudmFyIHVwZGF0ZV9jcmVkaXRzID0gcmVxdWlyZShcIi4vdXBkYXRlX2NyZWRpdHMuanNcIik7XG52YXIgdXBkYXRlX2luZGl2aWR1YWxfc2VyaWVzID0gcmVxdWlyZShcIi4vdXBkYXRlX2luZGl2aWR1YWxfc2VyaWVzLmpzXCIpO1xuXG4vKiogbGlzdGVucyBmb3IgYW55IGZvcm0gdXBkYXRlcyBhbmQgY2FsbHMgYXBwcm9wcmlhdGUgZnVuY3Rpb24gXG5AbW9kdWxlXG4qL1xudmFyIGFsbEZvcm1VcGRhdGVzID0gZnVuY3Rpb24gKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgIFxuICAgIC8qIENIQVJUIFRZUEUgQ0hBTkdFUyAqL1xuXG4gICAgLy9jaGFydCB0eXBlIGNoYW5nZWRcbiAgICAkLmVhY2goWydhcmVhJywgJ2xpbmUnLCAnYmFyJywgJ3N0YWNrZWRfYmFyJywgJ2NvbHVtbicsICdzdGFja2VkX2NvbHVtbicsICdidWJibGUnLCAnc2NhdHRlcicsIFwiZHJpbGxkb3duXCJdLCBmdW5jdGlvbiAoaSwgdHlwZSkge1xuICAgICAgICAkKCcjY2hhcnRfdHlwZV8nICsgdHlwZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdXBkYXRlQ2hhcnRUeXBlKGksIHR5cGUsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuICAgIC8qIFRFTVBMQVRFIENIQU5HRVMgKi9cblxuICAgIC8vY2hhcnQgd2lkdGhcbiAgICAkKFwiI2NoYXJ0X3dpZHRoX3RleHRpbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV90ZW1wbGF0ZS5yZXNpemUoJCh0aGlzKS52YWwoKSwgXCJ3aWR0aFwiLCBjaGFydCk7XG4gICAgfSk7XG5cbiAgICAvL2NoYXJ0IGhlaWdodFxuICAgICQoXCIjY2hhcnRfaGVpZ2h0X3RleHRpbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV90ZW1wbGF0ZS5yZXNpemUoJCh0aGlzKS52YWwoKSwgXCJoZWlnaHRcIiwgY2hhcnQpO1xuICAgIH0pO1xuXG4gICAgLy9pbm5lciBjaGFydCBtYXJnaW5zXG4gICAgJChcIi5tYXJnaW5faW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWFyZ2luc19hcnIgPSB1dGlsc19mb3Jtcy5nZXRDbGFzc1ZhbHVlc0FycmF5KFwibWFyZ2luX2lucHV0XCIpO1xuICAgICAgICB1cGRhdGVfdGVtcGxhdGUubWFyZ2luKG1hcmdpbnNfYXJyLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG5cbiAgICAvKiBDSEFSVCBEQVRBIENIQU5HRVMgLSAoeC1heGlzIGNhdGVnb3JpZXMgYW5kIHNlcmllcyBhcnJheSkqL1xuICAgIC8vXCJzZXJpZXMgbmFtZXMgbG9hZGVkIGZyb21cIiBpY29uIGNsaWNrZWRcbiAgICAkKFwiLmxvYWRfc2VyaWVzX2Zyb21faWNvblwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV9kYXRhLnVwZGF0ZURhdGEoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgICQoXCIjdGFibGVfaW5wdXRfdGV4dGFyZWFcIikuYmluZCgnaW5wdXQgcHJvcGVydHljaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV9kYXRhLnVwZGF0ZURhdGEoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuXG4gICAgXG4gICAgXG4gICAgLyogSU5ESVZJRFVBTCBTRVJJRVMgVVBEQVRFUyAqL1xuXG4gICAgLy91cGRhdGUgaW5kaXZpZHVhbCBzZXJpZXMgb3B0aW9ucyBzZWN0aW9uIChjYWxsIG9uIGxvYWQgYW5kIHdoZW4gZGF0YSBpcyBjaGFuZ2VkKVxuICAgICQoXCIjdGFiX3Nlcmllc19vcHRpb25zXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlX2luZGl2aWR1YWxfc2VyaWVzLnBvcHVsYXRlRm9ybShjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG4gICAgfSk7XG4gICAgXG4gICAgXG5cbiAgICAvKiBDT0xPUiBQQUxFVFRFIENIQU5HRVMgKi9cbiAgICAkKFwiLmNvbG9yX3BhbGV0dGVfcm93XCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICB1cGRhdGVDb2xvcnMoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcbiAgICAgICBcbiAgICBcbiAgICBcbiAgICAvKiBMRUdFTkQgQ0hBTkdFUyAqL1xuXG4gICAgLy9sZWdlbmQgbGF5b3V0IGNoYW5nZWRcbiAgICAkKFwiI2xlZ2VuZF9sYXlvdXRfc2VsZWN0XCIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV9sZWdlbmQudXBkYXRlTGF5b3V0KCQodGhpcykudmFsKCksIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cblxuICAgIC8vbGVnZW5kIHJldmVyc2UgY2Vja2JveCBjaGFuZ2VkXG4gICAgJChcIiNsZWdlbmRfcmV2ZXJzZV9sYXlvdXRfY2hlY2tib3hcIikuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbCA9IHV0aWxzX2Zvcm1zLmdldENoZWNrQm94VmFsdWUoJCh0aGlzKSk7XG4gICAgICAgIHVwZGF0ZV9sZWdlbmQudXBkYXRlSXNSZXZlcnNlZCh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cblxuICAgIC8vbGVnZW5kIHRvZ2dsZSAoaGlkZSBvdGhlcnMpIGNoZWNrYm94IGNoYW5nZWRcbiAgICAkKFwiI2xlZ2VuZF9tYWtlX3RvZ2dsZV9jaGVja2JveFwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9nZ2xlX2VuYWJsZWQgPSB1dGlsc19mb3Jtcy5nZXRDaGVja0JveFZhbHVlKCQodGhpcykpO1xuICAgICAgICB1cGRhdGVfbGVnZW5kLnVwZGF0ZVRvZ2dsZSh0b2dnbGVfZW5hYmxlZCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8vbGVnZW5kIFggb3IgWSBwbGFjZW1lbnQgdmFsdWVzIGNoYW5nZWRcbiAgICAkKFwiI2xlZ2VuZF9wbGFjZW1lbnRfeCwgI2xlZ2VuZF9wbGFjZW1lbnRfeVwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdYID0gTnVtYmVyKCQoXCIjbGVnZW5kX3BsYWNlbWVudF94XCIpLnZhbCgpKTtcbiAgICAgICAgdmFyIG5ld1kgPSBOdW1iZXIoJChcIiNsZWdlbmRfcGxhY2VtZW50X3lcIikudmFsKCkpO1xuXG4gICAgICAgIHVwZGF0ZV9sZWdlbmQudXBkYXRlWFlwb3NpdGlvbnMobmV3WCwgbmV3WSwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuXG5cbiAgICAvKiBYLUFYSVMgQ0hBTkdFUyAqL1xuXG4gICAgLy94LWF4aXMgdGl0bGUgdGV4dGFyZWEgY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeF9heGlzX3RpdGxlX3RleHRhcmVhXCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld1RpdGxlID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgdXBkYXRlX3hfYXhpcy51cGRhdGVUaXRsZShuZXdUaXRsZSwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8veC1heGlzIHRpY2ttYXJrIGludGVydmFsIGlucHV0IGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3hfYXhpc190aWNrbWFya19pbnRlcnZhbF9pbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdJbnRlcnZhbCA9IE51bWJlcigkKHRoaXMpLnZhbCgpKTtcbiAgICAgICAgdXBkYXRlX3hfYXhpcy51cGRhdGVUaWNrbWFya0ludGVydmFsKG5ld0ludGVydmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG5cblxuXG4gICAgLyogWS1BWElTIENIQU5HRVMgKi9cblxuICAgIC8veS1heGlzIHRpdGxlIHRleHRhcmVhIGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3lfYXhpc190aXRsZV90ZXh0YXJlYVwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdUaXRsZSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgIHVwZGF0ZV95X2F4aXMudXBkYXRlVGl0bGUobmV3VGl0bGUsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL3ktYXhpcyB0aXRsZSBpbmRlbnQgY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeV9heGlzX3hfcG9zaXRpb25faW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3WFBvc2l0aW9uID0gTnVtYmVyKCQodGhpcykudmFsKCkpO1xuICAgICAgICB1cGRhdGVfeV9heGlzLnVwZGF0ZVhQb3NpdGlvbihuZXdYUG9zaXRpb24sIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL3ktYXhpcyB0aWNrbWFyayBpbnRlcnZhbCBpbnB1dCBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF95X2F4aXNfdGlja21hcmtfaW50ZXJ2YWxfaW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3SW50ZXJ2YWwgPSBOdW1iZXIoJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIHVwZGF0ZV95X2F4aXMudXBkYXRlVGlja21hcmtJbnRlcnZhbChuZXdJbnRlcnZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8veS1heGlzIG1heCBpbnB1dCBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF95X2F4aXNfbWF4X2lucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld01heCA9IE51bWJlcigkKHRoaXMpLnZhbCgpKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVNYXgobmV3TWF4LCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy95LWF4aXMgbWluIGlucHV0IGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3lfYXhpc19taW5faW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3TWluID0gTnVtYmVyKCQodGhpcykudmFsKCkpO1xuICAgICAgICB1cGRhdGVfeV9heGlzLnVwZGF0ZU1pbihuZXdNaW4sIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL3ktYXhpcyBvcHBvc2l0ZSBzaWRlIGNlY2tib3ggY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeV9heGlzX29wcG9zaXRlX2NoZWNrYm94XCIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWwgPSB1dGlsc19mb3Jtcy5nZXRDaGVja0JveFZhbHVlKCQodGhpcykpO1xuICAgICAgICB1cGRhdGVfeV9heGlzLnVwZGF0ZUlzT3Bwb3NpdGUodmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy95LWF4aXMgbG9nIGNlY2tib3ggY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeV9heGlzX2xvZ19jaGVja2JveFwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsID0gdXRpbHNfZm9ybXMuZ2V0Q2hlY2tCb3hWYWx1ZSgkKHRoaXMpKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVJc0xvZyh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL3ktYXhpcyBkb2xsYXIgLyBwZXJjZW50IG9yIGRlY2ltYWwgc2VsZWN0cyBjaGFuZ2VkIChmb3JtYXQpXG4gICAgJChcIiNjaGFydF95X2F4aXNfc2lnbnNfc2VsZWN0LCAjY2hhcnRfeV9heGlzX2RlY2ltYWxzX3NlbGVjdFwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2lnbiA9ICQoXCIjY2hhcnRfeV9heGlzX3NpZ25zX3NlbGVjdFwiKS52YWwoKTtcbiAgICAgICAgdmFyIGRlY2ltYWxzID0gJChcIiNjaGFydF95X2F4aXNfZGVjaW1hbHNfc2VsZWN0XCIpLnZhbCgpO1xuICAgICAgICB1cGRhdGVfeV9heGlzLnVwZGF0ZUZvcm1hdChzaWduLCBkZWNpbWFscywgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKVxuICAgIH0pO1xuXG5cblxuICAgIC8qIFRPT0xUSVAgQ0hBTkdFUyAqL1xuXG4gICAgLy9jaGFuZ2Ugc2hhcmVkIHRvb2x0aXAgY2hlY2tib3gsIGRlY2ltYWxzLCBzaWducywgb3IgbXVsaXRwbGllciBzZWxlY3RzXG4gICAgJChcIiNjaGFydF90b29sdGlwX3NoYXJlZF9jaGVja2JveCwgI2NoYXJ0X3Rvb2x0aXBfZm9yY2VfZGVjaW1hbHNfc2VsZWN0LCAjY2hhcnRfdG9vbHRpcF9zaWduc19zZWxlY3QsICNjaGFydF90b29sdGlwX3lfbXVsdGlwbGVfc2VsZWN0XCIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZV90b29sdGlwLnVwZGF0ZVRvb2xUaXAoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcbiAgICAvL2NhbGwgdXBkYXRlIHRvb2x0aXAgYWZ0ZXIgcGFnZSBhbmQgY2hhcnQgaXMgbG9hZGVkIChoYXMgdG8gYmUgb24gYSBjYWxsYmFjayB3aXRoIHRoZSAnY2hhcnQnIG9iamVjdClcbiAgICB1cGRhdGVfdG9vbHRpcC51cGRhdGVUb29sVGlwKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG5cblxuXG5cbiAgICAvKiBDUkVESVRTIENIQU5HRVMgKi9cblxuICAgICQoXCIjY2hhcnRfY3JlZGl0c190ZXh0X3RleHRhcmVhXCIpLmJpbmQoJ2lucHV0IHByb3BlcnR5Y2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVfY3JlZGl0cy51cGRhdGVDcmVkaXRUZXh0KGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cblxuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYWxsRm9ybVVwZGF0ZXM7IiwidmFyIHBsb3RPcHRpb25zSW5pdCA9IHJlcXVpcmUoXCIuLi9pbml0aWFsaXplcnMvcGxvdF9vcHRpb25zX2luaXQuanNcIik7XG52YXIgdXBkYXRlX2RhdGEgPSByZXF1aXJlKFwiLi91cGRhdGVfZGF0YS5qc1wiKTtcbnZhciB1cGRhdGVfdG9vbHRpcCA9IHJlcXVpcmUoXCIuL3VwZGF0ZV90b29sdGlwLmpzXCIpO1xuXG5cbi8qKiB3aGVuIGEgY2hhcnQgaWNvbiBpcyBjbGlja2VkLCB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCAtIGNoYW5nZXMgdGhlIGNoYXJ0IHR5cGUgc2hvd24gXG5AbW9kdWxlXG4qL1xudmFyIHVwZGF0ZUNoYXJ0VHlwZSA9IGZ1bmN0aW9uIChpLCB0eXBlLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgIHR5cGUgPSB0eXBlLnJlcGxhY2UoXCJzdGFja2VkX1wiLCBcIlwiKTtcblxuICAgIGlmICh0eXBlID09PSBcImJhclwiKSB7XG4gICAgICAgIC8vZml4IHkgYXhpcyBwb3NpdGlvblxuICAgICAgICBjaGFydC5pbnZlcnRlZCA9IHRydWU7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLmFsaWduID0gXCJtaWRkbGVcIjtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUuYWxpZ24gPSBcImhpZ2hcIjtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueCA9IDA7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLnkgPSA4O1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aXRsZS55ID0gLTIwO1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aXRsZS54ID0gNDA7XG5cbiAgICAgICAgLy9oaWRlIG5vbi1yZWxldmFudCBlbGVtZW50c1xuICAgICAgICAkKFwiLm5vdF9iYXJcIikuaGlkZSgpO1xuXG4gICAgfSBlbHNlIHsgLy9jaGFydCBub3QgYmFyXG4gICAgICAgIGNoYXJ0LmludmVydGVkID0gZmFsc2U7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLmFsaWduID0gXCJoaWdoXCI7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnhBeGlzLnRpdGxlLmFsaWduID0gXCJtaWRkbGVcIjtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueCA9IE51bWJlcigkKFwiI2NoYXJ0X3lfYXhpc194X3Bvc2l0aW9uX2lucHV0XCIpLnZhbCgpKTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueSA9IC0yMDtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUueSA9IDA7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnhBeGlzLnRpdGxlLnggPSAwO1xuICAgICAgICBcbiAgICAgICAgJChcIi5ub3RfYmFyXCIpLnNob3coKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gXCJkcmlsbGRvd25cIikge1xuICAgICAgICB0eXBlID0gXCJjb2x1bW5cIjtcbiAgICB9XG5cbiAgICBjaGFydC54QXhpc1swXS51cGRhdGUoe1xuICAgICAgICBwbG90TGluZXM6IFt7XG4gICAgICAgICAgICBcInZhbHVlXCI6IDAsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiI2MwYzBjMFwiLFxuICAgICAgICAgICAgXCJkYXNoU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgICAgICAgXCJ3aWR0aFwiOiB0eXBlID09PSBcInNjYXR0ZXJcIiB8fCB0eXBlID09PSBcImJ1YmJsZVwiID8gMSA6IDBcbiAgICAgICAgfV1cbiAgICB9LCBmYWxzZSk7XG5cbiAgICBcbiAgICBjaGFydC54QXhpc1swXS5zZXRUaXRsZSh7XG4gICAgICAgIGFsaWduOiBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aXRsZS5hbGlnbixcbiAgICAgICAgeTogYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUueSxcbiAgICAgICAgeDogYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUueFxuICAgIH0sIGZhbHNlKTtcbiAgICBcbiAgICBjaGFydC55QXhpc1swXS5zZXRUaXRsZSh7XG4gICAgICAgIGFsaWduOiBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy50aXRsZS5hbGlnbixcbiAgICAgICAgeDogYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueCxcbiAgICAgICAgeTogYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueVxuICAgIH0sIGZhbHNlKTtcblxuICAgIC8vcmUgcGFyc2UgZGF0YVxuICAgIHVwZGF0ZV9kYXRhLnVwZGF0ZURhdGEoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcblxuXG4gICAgYWxsX2NoYXJ0X29wdGlvbnMuY2hhcnQudHlwZSA9IHR5cGU7XG5cbiAgICAvL3VwZGF0ZSB0b29sdGlwXG4gICAgdXBkYXRlX3Rvb2x0aXAudXBkYXRlVG9vbFRpcChjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVDaGFydFR5cGU7IiwidmFyIGNvbG9yc0luaXQgPSByZXF1aXJlKFwiLi4vaW5pdGlhbGl6ZXJzL2NvbG9yc19pbml0LmpzXCIpO1xuXG4vKiogdXBkYXRlcyB0aGUgY2hhcnQncyBjb2xvcnMgLSBjYWxsZWQgd2hlbiBwYWxldHRlIGlzIGNoYW5nZWQuIENhbGxzIGNvbG9yc0luaXQgXG5AbW9kdWxlXG5AcGFyYW0gY2hhcnQge29iamVjdH0gdGhlIG1haW4gY2hhcnQgb2JqZWN0LCBidWlsdCB3aGVuIGNoYXJ0IGlzIGxvYWRlZFxuQHBhcmFtIGFsbF9jaGFydF9vcHRpb25zIHtvYmplY3R9IHRoZSBtYWluIGNoYXJ0IG9wdGlvbnMgdGhhdCBsb2FkIGludG8gYnVpbGRpbmcgb2YgdGhlIGNoYXJ0IGFuZCBhcmUgdHVybmVkIHRvIHN0cmluZyBmb3IgdGhlIG91dHB1dFxuKiovXG52YXIgdXBkYXRlQ29sb3JzID0gZnVuY3Rpb24gKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgIGFsbF9jaGFydF9vcHRpb25zLmNvbG9ycyA9IGNvbG9yc0luaXQoKTtcblxuICAgICQoY2hhcnQuc2VyaWVzKS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIFxuICAgICAgICAvL3VwZGF0ZSBjaGFydFxuICAgICAgICB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgICBjb2xvcjogYWxsX2NoYXJ0X29wdGlvbnMuY29sb3JzW2ldXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIC8vdXBkYXRlIGFsbF9jaGFydF9vcHRpb25zLnNlcmllcyBjb2xvcnNcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMuc2VyaWVzW2ldLmNvbG9yID0gYWxsX2NoYXJ0X29wdGlvbnMuY29sb3JzW2ldO1xuICAgICAgICBcbiAgICB9KTtcbiAgICBcbiAgICBjaGFydC5yZWRyYXcoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVDb2xvcnM7IiwidmFyIGNyZWRpdHNJbml0ID0gcmVxdWlyZShcIi4uL2luaXRpYWxpemVycy9jcmVkaXRzX2luaXQuanNcIik7XG5cbi8qKiB3aGVuIGNyZWRpdCBvcHRpb25zIGFyZSBjaGFuZ2VkIGluIHRoZSBzaWRlIGFyZWEgXG5AbmFtZXNwYWNlXG4qL1xuXG52YXIgdXBkYXRlX2NyZWRpdHMgPSB7XG5cbiAgICAvKiogZ2V0IGFuZCBzZXQgdGhlIGNyZWRpdHMgdGV4dCAqKi9cbiAgICB1cGRhdGVDcmVkaXRUZXh0OiBmdW5jdGlvbiAoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMuY3JlZGl0cyA9IGNyZWRpdHNJbml0KCk7XG5cbiAgICAgICAgdmFyIG5ld195ID0gTnVtYmVyKCQoXCIjY2hhcnRfaGVpZ2h0X3RleHRpbnB1dFwiKS52YWwoKSkgKyBhbGxfY2hhcnRfb3B0aW9ucy5jcmVkaXRzLnBvc2l0aW9uLnkgLSAyNjtcbiAgICAgICAgY2hhcnQuY3JlZGl0cy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInlcIiwgbmV3X3kpO1xuXG4gICAgICAgIC8vc3ZnIHRleHQgZWxlbWVudHMgZG9uJ3QgdXNlIGJyZWFrOyBlYWNoIG5ldyBsaW5lIG11c3QgYmUgd3JhcHBlZCBpbiBhIG5ldyB0c3BhblxuICAgICAgICB2YXIgY3JlZGl0c190ZXh0ID0gYWxsX2NoYXJ0X29wdGlvbnMuY3JlZGl0cy50ZXh0LnNwbGl0KFwiPGJyPlwiKS5tYXAoZnVuY3Rpb24gKGxpbmUsIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzx0c3BhbiB4PVwiMTBcIiBkeT1cIjEyXCI+JyArIGxpbmUgKyBcIjwvdHNwYW4+XCI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oXCJcIik7XG5cbiAgICAgICAgJChjaGFydC5jcmVkaXRzLmVsZW1lbnQpLmh0bWwoY3JlZGl0c190ZXh0KTtcblxuICAgIH1cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX2NyZWRpdHM7IiwidmFyIHBhcnNlVGFibGVJbnB1dCA9IHJlcXVpcmUoXCIuLi9wYXJzZXJzL3BhcnNlX3RhYmxlX2lucHV0LmpzXCIpO1xudmFyIHV0aWxzX2Zvcm1zID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzX2Zvcm1zLmpzXCIpO1xuXG4vKiogY2FsbGVkIHdoZW4gLnNlbGVjdGVkX2NoYXJ0X3R5cGUgb3IgI3RhYmxlX2lucHV0X3RleHRhcmVhIGlzIGNoYW5nZWQgLSBjYWxscyBmdW5jdGlvbnMgdG8gcmVwYXJzZSBkYXRhXG5AbmFtZXNwYWNlXG4qL1xuXG52YXIgdXBkYXRlX2RhdGEgPSB7XG5cbiAgICAvKiogY2FsbGVkIHdoZW4gLnNlbGVjdGVkX2NoYXJ0X3R5cGUgb3IgI3RhYmxlX2lucHV0X3RleHRhcmVhIGlzIGNoYW5nZWQgLSBjYWxscyBmdW5jdGlvbnMgdG8gcmVwYXJzZSBkYXRhICovXG4gICAgdXBkYXRlRGF0YTogZnVuY3Rpb24gKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICB2YXIgY2hhcnRfdHlwZSA9ICQoXCIuc2VsZWN0ZWRfY2hhcnRfdHlwZVwiKS5kaXZWYWwoKTtcbiAgICAgICAgdmFyIGlucHV0ID0gJChcIiN0YWJsZV9pbnB1dF90ZXh0YXJlYVwiKS52YWwoKTtcbiAgICAgICAgdmFyIGxlZ2VuZF90b2dnbGVfZW5hYmxlZCA9IHV0aWxzX2Zvcm1zLmdldENoZWNrQm94VmFsdWUoJChcIiNsZWdlbmRfbWFrZV90b2dnbGVfY2hlY2tib3hcIikpO1xuICAgICAgICB2YXIgbG9hZF9zZXJpZXNfZnJvbSA9ICQoXCIuc2VsZWN0ZWRfbG9hZF9zZXJpZXNfZnJvbVwiKS5kaXZWYWwoKTtcbiAgICAgICAgdmFyIHBhcnNlZF90YWJsZV9vdXRwdXQgPSBwYXJzZVRhYmxlSW5wdXQoaW5wdXQsIGxvYWRfc2VyaWVzX2Zyb20sIGNoYXJ0X3R5cGUsIGxlZ2VuZF90b2dnbGVfZW5hYmxlZCwgYWxsX2NoYXJ0X29wdGlvbnMuY29sb3JzKTsgXG5cbiAgICAgICAgLy91cGRhdGUgeC1heGlzIGNhdGVnb3JpZXNcbiAgICAgICAgY2hhcnQueEF4aXNbMF0udXBkYXRlKHtcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IHBhcnNlZF90YWJsZV9vdXRwdXQueF9heGlzX2NhdGVnb3JpZXNcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIC8vcmVtb3ZlIGV4aXN0aW5nIHNlcmllcyBhcnJheVxuICAgICAgICAkKGNoYXJ0LnNlcmllcykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShmYWxzZSk7IC8vZmFsc2UgdG8gbm90IHJlZHJhdyB5ZXRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9hZGQgbmV3IHNlcmllc1xuICAgICAgICAkKHBhcnNlZF90YWJsZV9vdXRwdXQuc2VyaWVzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNoYXJ0LmFkZFNlcmllcyh0aGlzLCBmYWxzZSk7IC8vZmFsc2UgdG8gbm90IHJlZHJhdyB5ZXRcbiAgICAgICAgfSk7XG4gICAgICAgIGNoYXJ0LnJlZHJhdyh0cnVlKTtcblxuXG4gICAgICAgIC8vdXBkYXRlIGNoYXJ0IG9wdGlvbnMgZm9yIGNvZGUgb3V0cHV0XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnNlcmllcyA9IHBhcnNlZF90YWJsZV9vdXRwdXQuc2VyaWVzO1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy5jYXRlZ29yaWVzID0gcGFyc2VkX3RhYmxlX291dHB1dC54X2F4aXNfY2F0ZWdvcmllcztcbiAgICAgICAgXG4gICAgICAgIC8vdXBkYXRlIHdoZXRoZXIgbGVnZW5kIHRvZ2dsZSBpcyBlbmFibGVkIFxuICAgICAgICAkKFwiI2xlZ2VuZF9tYWtlX3RvZ2dsZV9jaGVja2JveFwiKS5jaGFuZ2UoKTtcbiAgICAgICAgXG5cbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVfZGF0YTtcblxuXG4iLCJ2YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG4vKiogbWV0aG9kcyBmb3IgdXBkYXRpbmcgaW5kaXZpZHVhbCBzZXJpZXMgb3B0aW9ucyBpbiAgI2Rpc3BsYXlfc2VyaWVzX29wdGlvbnMgLSBjYWxsZWQgd2hlbiBpdHMgc2lkZSBuYXYgdGFiIGlzIHNlbGVjdGVkLlxuQG1vZHVsZVxuQHBhcmFtIGNoYXJ0IHtvYmplY3R9IHRoZSBtYWluIGNoYXJ0IG9iamVjdCwgYnVpbHQgd2hlbiBjaGFydCBpcyBsb2FkZWRcbkBwYXJhbSBhbGxfY2hhcnRfb3B0aW9ucyB7b2JqZWN0fSB0aGUgbWFpbiBjaGFydCBvcHRpb25zIHRoYXQgbG9hZCBpbnRvIGJ1aWxkaW5nIG9mIHRoZSBjaGFydCBhbmQgYXJlIHR1cm5lZCB0byBzdHJpbmcgZm9yIHRoZSBvdXRwdXRcbioqL1xuXG5cblxudmFyIHVwZGF0ZV9pbmRpdmlkdWFsX3NlcmllcyA9IHtcblxuICAgIFxuICAgIC8qKiBjYWxsZWQgd2hlbiB0aGUgc2VyaWVzIHR5cGUgaWNvbnMgYXJlIGNsaWNrZWQuIEJpbmRlZCBhdCB0aGUgZW5kIG9mIHBvcHVsYXRlRm9ybSAqKi9cbiAgICBzZXJpZXNUeXBlSWNvbkNoYW5nZTogZnVuY3Rpb24gKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICAkKFwiLnNlcmllc190eXBlX2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy91cGRhdGUgc2VyaWVzIHR5cGVcbiAgICAgICAgICAgIHZhciB0eXBlID0gJCh0aGlzKS5hdHRyKFwidHlwZVwiKTtcbiAgICAgICAgICAgIHZhciBpID0gJCh0aGlzKS5wYXJlbnRzKFwiLnNlcmllc19zbmlwcGV0XCIpLmluZGV4KCk7XG4gICAgICAgICAgICBjaGFydC5zZXJpZXNbaV0udXBkYXRlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9oaWdobGlnaHQgY2xpY2tlZCBpY29uXG4gICAgICAgICAgICAkKFwiLnNlcmllc190eXBlX3NlbGVjdGVkXCIsICQodGhpcykucGFyZW50KCkpLnJlbW92ZUNsYXNzKFwic2VyaWVzX3R5cGVfc2VsZWN0ZWRcIik7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwic2VyaWVzX3R5cGVfc2VsZWN0ZWRcIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vdXBkYXRlIGFsbF9jaGFydF9vcHRpb25zXG4gICAgICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5zZXJpZXNbaV0udHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiBjYWxsZWQgd2hlbiB0aGUganNjb2xvciBzZWxlY3RvciBpcyBjaGFuZ2VkIChtb3VzZSBzdGlsbCBkb3duKS4gVXBkYXRlcyB0aGUgYWN0dWFsIGNoYXJ0IG9iamVjdCBhbmQgYWxsX2NoYXJ0X29wdGlvbnMgY29kZSBvdXRwdXQgb2JqZWN0KioqL1xuICAgIHVwZGF0ZVNlcmllc0NvbG9yOiBmdW5jdGlvbiAoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zLCBpLCBqc2NvbG9yKSB7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmNvbG9yc1tpXSA9IGpzY29sb3IudG9SR0JTdHJpbmcoKTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMuc2VyaWVzW2ldLmNvbG9yID0gYWxsX2NoYXJ0X29wdGlvbnMuY29sb3JzW2ldO1xuICAgICAgICBjaGFydC5zZXJpZXNbaV0udXBkYXRlKHtcbiAgICAgICAgICAgIGNvbG9yOiBhbGxfY2hhcnRfb3B0aW9ucy5zZXJpZXNbaV0uY29sb3JcbiAgICAgICAgfSlcbiAgICB9LFxuXG5cbiAgICAvKiogbWFrZXMgYSBjb2xvciBib3gsIGNhbGxlZCBmcm9tIHBvcHVsYXRlRm9ybSAqKi9cbiAgICBtYWtlU2VyaWVzQ29sb3JEaXY6IGZ1bmN0aW9uIChjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMsIGkpIHtcbiAgICAgICAgdmFyIHNlcmllc19jb2xvcl9kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzZXJpZXNfY29sb3JfZGl2LmNsYXNzTmFtZSA9IFwic2VyaWVzX2NvbG9yX2RpdlwiO1xuXG4gICAgICAgIC8vIG1ha2UgYSBjb2xvciBsYWJlbFxuICAgICAgICB2YXIgc2VyaWVzX2NvbG9yX2xhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBzZXJpZXNfY29sb3JfbGFiZWwuY2xhc3NOYW1lID0gXCJzZXJpZXNfY29sb3JfbGFiZWxcIjtcbiAgICAgICAgc2VyaWVzX2NvbG9yX2xhYmVsLnRleHRDb250ZW50ID0gXCJDb2xvcjogXCI7XG5cbiAgICAgICAgLy9tYWtlIGNvbG9yIGlucHV0IGJveFxuICAgICAgICB2YXIgc2VyaWVzX2NvbG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgJChzZXJpZXNfY29sb3IpLmFkZENsYXNzKFwianNjb2xvciB7dmFsdWVFbGVtZW50Om51bGx9XCIpO1xuXG4gICAgICAgIC8vaW5pdCB3aXRoIGNvbG9yLCB1c2luZyBqc2NvbG9yLmpzXG4gICAgICAgIHZhciBwaWNrZXIgPSBuZXcganNjb2xvcihzZXJpZXNfY29sb3IsIHtcbiAgICAgICAgICAgIG9uRmluZUNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZV9pbmRpdmlkdWFsX3Nlcmllcy51cGRhdGVTZXJpZXNDb2xvcihjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMsIGksIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvL2NvbnZlcnQgcmdiIHN0cmluZyBpbnRvIGFycnJheVxuICAgICAgICB2YXIgcmdiID0gdXRpbHNfbWFpbi5yZ2IyYXJyKGFsbF9jaGFydF9vcHRpb25zLmNvbG9yc1tpXSk7XG4gICAgICAgIC8vY3JlYXRlIHBpY2tlclxuICAgICAgICBwaWNrZXIuZnJvbVJHQihyZ2JbMF0sIHJnYlsxXSwgcmdiWzJdKTtcblxuICAgICAgICAvL21ha2UgY2xlYXIgZmxvYXQgZGl2XG4gICAgICAgIHZhciBjbGVhcl9kaXYgPSB1dGlsc19tYWluLm1ha2VDbGVhckZsb2F0RGl2KCk7XG5cblxuICAgICAgICBzZXJpZXNfY29sb3JfZGl2LmFwcGVuZENoaWxkKHNlcmllc19jb2xvcl9sYWJlbCk7XG4gICAgICAgIHNlcmllc19jb2xvcl9kaXYuYXBwZW5kQ2hpbGQoc2VyaWVzX2NvbG9yKTtcbiAgICAgICAgc2VyaWVzX2NvbG9yX2Rpdi5hcHBlbmRDaGlsZChjbGVhcl9kaXYpO1xuXG4gICAgICAgIHJldHVybiBzZXJpZXNfY29sb3JfZGl2O1xuICAgIH0sXG5cblxuICAgIG1ha2VTZXJpZXNUeXBlRGl2OiBmdW5jdGlvbiAoY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zLCBpKSB7XG4gICAgICAgIHZhciBzZXJpZXNfdHlwZV9kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBzZXJpZXNfdHlwZV9kaXYuY2xhc3NOYW1lID0gXCJzZXJpZXNfdHlwZV9kaXZcIjtcblxuICAgICAgICB2YXIgc2VyaWVzX3R5cGVfbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIHNlcmllc190eXBlX2xhYmVsLmNsYXNzTmFtZSA9IFwic2VyaWVzX3R5cGVfbGFiZWxcIjtcbiAgICAgICAgc2VyaWVzX3R5cGVfbGFiZWwudGV4dENvbnRlbnQgPSBcIlR5cGU6IFwiO1xuXG5cbiAgICAgICAgdmFyIHNlcmllc190eXBlX2NvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICQoc2VyaWVzX3R5cGVfY29sdW1uKS5hZGRDbGFzcyhcInNlcmllc190eXBlX2ljb24gc2VyaWVzX3R5cGVfY29sdW1uXCIpXG4gICAgICAgICAgICAuYXR0cihcInR5cGVcIiwgXCJjb2x1bW5cIik7XG4gICAgICAgIGlmIChjaGFydC5zZXJpZXNbaV0udHlwZSA9PT0gXCJjb2x1bW5cIikge1xuICAgICAgICAgICAgJChzZXJpZXNfdHlwZV9jb2x1bW4pLmFkZENsYXNzKFwic2VyaWVzX3R5cGVfc2VsZWN0ZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VyaWVzX3R5cGVfbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICQoc2VyaWVzX3R5cGVfbGluZSkuYWRkQ2xhc3MoXCJzZXJpZXNfdHlwZV9pY29uIHNlcmllc190eXBlX2xpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHlwZVwiLCBcImxpbmVcIik7XG4gICAgICAgIGlmIChjaGFydC5zZXJpZXNbaV0udHlwZSA9PT0gXCJsaW5lXCIpIHtcbiAgICAgICAgICAgICQoc2VyaWVzX3R5cGVfbGluZSkuYWRkQ2xhc3MoXCJzZXJpZXNfdHlwZV9zZWxlY3RlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjbGVhcl9kaXYgPSB1dGlsc19tYWluLm1ha2VDbGVhckZsb2F0RGl2KCk7XG5cbiAgICAgICAgc2VyaWVzX3R5cGVfZGl2LmFwcGVuZENoaWxkKHNlcmllc190eXBlX2xhYmVsKTtcbiAgICAgICAgc2VyaWVzX3R5cGVfZGl2LmFwcGVuZENoaWxkKHNlcmllc190eXBlX2xpbmUpO1xuICAgICAgICBzZXJpZXNfdHlwZV9kaXYuYXBwZW5kQ2hpbGQoc2VyaWVzX3R5cGVfY29sdW1uKTtcbiAgICAgICAgc2VyaWVzX3R5cGVfZGl2LmFwcGVuZENoaWxkKGNsZWFyX2Rpdik7XG5cbiAgICAgICAgcmV0dXJuIHNlcmllc190eXBlX2RpdjtcblxuXG4gICAgfSxcblxuXG4gICAgLyoqIHBvcHVsYXRlcyAjZGlzcGxheV9zZXJpZXNfb3B0aW9ucyB3aXRoIG9wdGlvbnMgZm9yIGVhY2ggc2VyaWVzLiBDYWxsZWQgd2hlbiBpdHMgc2lkZSBuYXYgdGFiIGlzIHNlbGVjdGVkLiAqKi9cbiAgICBwb3B1bGF0ZUZvcm06IGZ1bmN0aW9uIChjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgICAgICB2YXIgZGlzcGxheV9zZXJpZXNfb3B0aW9uc19pbm5lcl9kaXYgPSAkKFwiI2Rpc3BsYXlfc2VyaWVzX29wdGlvbnNfaW5uZXJfZGl2XCIpO1xuICAgICAgICBkaXNwbGF5X3Nlcmllc19vcHRpb25zX2lubmVyX2Rpdi5lbXB0eSgpO1xuXG4gICAgICAgICQoY2hhcnQuc2VyaWVzKS5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cbiAgICAgICAgICAgIC8vbWFrZSBzZXJpZXMgbmFtZSBoZWFkZXJcbiAgICAgICAgICAgIHZhciBzZXJpZXNfbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g1Jyk7XG4gICAgICAgICAgICBzZXJpZXNfbmFtZS50ZXh0Q29udGVudCA9IHRoaXMubmFtZTtcblxuICAgICAgICAgICAgLy9tYWtlIHNlcmllcyBjb2xvciBpbnB1dFxuICAgICAgICAgICAgdmFyIHNlcmllc19jb2xvcl9kaXYgPSB1cGRhdGVfaW5kaXZpZHVhbF9zZXJpZXMubWFrZVNlcmllc0NvbG9yRGl2KGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucywgaSk7XG5cblxuXG4gICAgICAgICAgICAvL21ha2Ugb3V0ZXIgc25pcHBldCBwIHRhZ1xuICAgICAgICAgICAgdmFyIHNlcmllc19zbmlwcGV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgc2VyaWVzX3NuaXBwZXQuY2xhc3NOYW1lID0gXCJzZXJpZXNfc25pcHBldFwiO1xuXG4gICAgICAgICAgICBzZXJpZXNfc25pcHBldC5hcHBlbmRDaGlsZChzZXJpZXNfbmFtZSk7XG4gICAgICAgICAgICBzZXJpZXNfc25pcHBldC5hcHBlbmRDaGlsZChzZXJpZXNfY29sb3JfZGl2KTtcblxuICAgICAgICAgICAgLy9tYWtlIHNlcmllcyB0eXBlIGRpdiBpZiBhcHBsaWNhYmxlXG4gICAgICAgICAgICBpZiAoW1wibGluZVwiLCBcImNvbHVtblwiXS5pbmRleE9mKGFsbF9jaGFydF9vcHRpb25zLmNoYXJ0LnR5cGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VyaWVzX3R5cGVfZGl2ID0gdXBkYXRlX2luZGl2aWR1YWxfc2VyaWVzLm1ha2VTZXJpZXNUeXBlRGl2KGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucywgaSk7XG4gICAgICAgICAgICAgICAgc2VyaWVzX3NuaXBwZXQuYXBwZW5kQ2hpbGQoc2VyaWVzX3R5cGVfZGl2KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAkKGRpc3BsYXlfc2VyaWVzX29wdGlvbnNfaW5uZXJfZGl2KS5hcHBlbmQoc2VyaWVzX3NuaXBwZXQpO1xuXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy9iaW5kIHNlcmllcyB0eXBlIGNoYW5nZXNcbiAgICAgICAgdXBkYXRlX2luZGl2aWR1YWxfc2VyaWVzLnNlcmllc1R5cGVJY29uQ2hhbmdlKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfVxuXG59XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHVwZGF0ZV9pbmRpdmlkdWFsX3NlcmllczsiLCIvKiogd2hlbiBsZWdlbmQgb3B0aW9ucyBhcmUgY2hhbmdlZCBpbiB0aGUgc2lkZSBhcmVhIFxuQG5hbWVzcGFjZVxuKi9cblxudmFyIHVwZGF0ZV9sZWdlbmQgPSB7XG5cbiAgICAvKiogZGVjaWRlIGlmIHRoZSBsZWdlbmQgc2hvdWxkIGJlIHJldmVyc2Ugb3JkZXIgKiovXG4gICAgdXBkYXRlSXNSZXZlcnNlZDogZnVuY3Rpb24gdXBkYXRlSXNSZXZlcnNlZCh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgIHZhciBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgICAgIGxlZ2VuZC5vcHRpb25zLnJldmVyc2VkID0gdmFsO1xuICAgICAgICBsZWdlbmQucmVuZGVyKCk7XG5cblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5sZWdlbmQucmV2ZXJzZWQgPSB2YWw7XG4gICAgfSxcblxuXG4gICAgLyoqIGlmICdubyBsZWdlbmQnIGlzIHNlbGVjdGVkLCBoaWRlIHRoZSBsZWdlbmQsIGFuZCBzZXQgb3B0aW9ucywgZWxzZSwgc2hvdyBpdCB3aXRoIHRoZSBjb3JyZWN0IGxheW91dCAqL1xuICAgIHVwZGF0ZUxheW91dDogZnVuY3Rpb24gKHZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgaWYgKHZhbCA9PT0gXCJub19sZWdlbmRcIikge1xuICAgICAgICAgICAgbGVnZW5kLmdyb3VwLmhpZGUoKTtcbiAgICAgICAgICAgIGxlZ2VuZC5ib3guaGlkZSgpO1xuICAgICAgICAgICAgbGVnZW5kLmRpc3BsYXkgPSBmYWxzZTtcbiAgICAgICAgICAgIGxlZ2VuZC5vcHRpb25zLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxlZ2VuZC5yZW5kZXIoZmFsc2UpO1xuXG4gICAgICAgICAgICB2YWwgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgbGVnZW5kLm9wdGlvbnMubGF5b3V0ID0gdmFsO1xuICAgICAgICAgICAgbGVnZW5kLnJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICBsZWdlbmQuZ3JvdXAuc2hvdygpO1xuICAgICAgICAgICAgbGVnZW5kLmJveC5zaG93KCk7XG4gICAgICAgICAgICBsZWdlbmQuZGlzcGxheSA9IHRydWU7XG4gICAgICAgICAgICBsZWdlbmQub3B0aW9ucy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC5sYXlvdXQgPSB2YWw7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC5lbmFibGVkID0gbGVnZW5kLm9wdGlvbnMuZW5hYmxlZDtcblxuICAgIH0sXG5cblxuXG4gICAgLyoqIHNldCBpZiB3aGVuIG9uZSBsZWdlbmQgaXRlbSBpcyBjbGlja2VkLCB0aGUgb3RoZXJzIGhpZGUgKi9cbiAgICB1cGRhdGVUb2dnbGU6IGZ1bmN0aW9uICh0b2dnbGVfZW5hYmxlZCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgLy91cGRhdGUgYWxsX2NoYXJ0X29wdGlvbnNcbiAgICAgICAgaWYgKHRvZ2dsZV9lbmFibGVkKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBsZWdlbmRJdGVtQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIHZhciBhbGxTZXJpZXMgPSB0aGlzLmNoYXJ0LnNlcmllcztcbiAgICAgICAgICAgICAgICAkLmVhY2goYWxsU2VyaWVzLCBmdW5jdGlvbiAoaW5kZXgsIHNlcmllcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9PSBpbmRleCA/IHNlcmllcy5zaG93KCkgOiBzZXJpZXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxlZ2VuZEl0ZW1DbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZighY2hhcnQpe1xuICAgICAgICAgICAgcmV0dXJuIGxlZ2VuZEl0ZW1DbGljaztcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5wbG90T3B0aW9ucy5zZXJpZXMuZXZlbnRzLmxlZ2VuZEl0ZW1DbGljayA9IGxlZ2VuZEl0ZW1DbGljaztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy91cGRhdGUgaW4gY3VycmVudCBjaGFydFxuICAgICAgICAkKGNoYXJ0LnNlcmllcykuZWFjaChmdW5jdGlvbihpKXtcbiAgICAgICAgICAgdGhpcy51cGRhdGUoe1xuICAgICAgICAgICAgICAgdmlzaWJsZTogaSA+IDAgJiYgdG9nZ2xlX2VuYWJsZWQgPT09IHRydWUgPyBmYWxzZSA6IHRydWUsXG4gICAgICAgICAgICAgICBldmVudHM6e1xuICAgICAgICAgICAgICAgICAgIGxlZ2VuZEl0ZW1DbGljazogYWxsX2NoYXJ0X29wdGlvbnMucGxvdE9wdGlvbnMuc2VyaWVzLmV2ZW50cy5sZWdlbmRJdGVtQ2xpY2tcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfSkgXG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKiB1cGRhdGUgWCBhbmQgWSBwb3NpdGlvbnMgb24gbGVnZW5kICovXG5cbiAgICB1cGRhdGVYWXBvc2l0aW9uczogZnVuY3Rpb24gKG5ld1gsIG5ld1ksIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICB2YXIgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgICAgICBsZWdlbmQub3B0aW9ucy54ID0gbmV3WDtcbiAgICAgICAgbGVnZW5kLm9wdGlvbnMueSA9IG5ld1k7XG4gICAgICAgIGxlZ2VuZC5yZW5kZXIoZmFsc2UpO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC54ID0gbmV3WDtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMubGVnZW5kLnkgPSBuZXdZO1xuXG4gICAgfVxuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVfbGVnZW5kOyIsIi8qKiB3aGVuIHRlbXBsYXRlIGFyZSBjaGFuZ2VkIGluIHRoZSBzaWRlIGFyZWEsIHRoZXNlIG1ldGhvZHMgYXJlIGNhbGxlZCBcbkBuYW1lc3BhY2VcbiovXG52YXIgdXBkYXRlX3RlbXBsYXRlID0ge1xuICAgIHJlc2l6ZTogZnVuY3Rpb24gKHZhbCwgZGltZW5zaW9uLCBjaGFydCkge1xuICAgICAgICB2YWwgPSBOdW1iZXIodmFsKTtcbiAgICAgICAgaWYgKCFpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAkKFwiLmNoYXJ0X2Rpc3BsYXlfYXJlYVwiKS5jc3MoZGltZW5zaW9uLCB2YWwgKyBcInB4XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNoYXJ0LnJlZmxvdygpO1xuICAgIH0sXG5cbiAgICBtYXJnaW46IGZ1bmN0aW9uIChtYXJnaW5zX2FyciwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgJC5lYWNoKGNoYXJ0LmF4ZXMsIGZ1bmN0aW9uIChpLCBlKSB7XG4gICAgICAgICAgICBlLmlzRGlydHkgPSB0cnVlOyAvL3RvIHRlbGwgYXhlcyB0byByZWZyZXNoXG4gICAgICAgIH0pO1xuICAgICAgICBjaGFydC5tYXJnaW4gPSBtYXJnaW5zX2FycjtcbiAgICAgICAgY2hhcnQucmVkcmF3KGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmNoYXJ0Lm1hcmdpbiA9IG1hcmdpbnNfYXJyO1xuXG4gICAgfVxufVxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVfdGVtcGxhdGU7IiwidmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNfbWFpbi5qc1wiKTtcbnZhciB1dGlsc19mb3JtcyA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc19mb3Jtc1wiKTtcblxuXG4vKiogd2hlbiB0b29sdGlwIG9wdGlvbnMgYXJlIGNoYW5nZWQgaW4gdGhlIHNpZGUgYXJlYSwgdGhlc2UgbWV0aG9kcyBhcmUgY2FsbGVkIFxuQG5hbWVzcGFjZVxuKi9cbnZhciB1cGRhdGVfdG9vbHRpcCA9IHtcblxuICAgIC8qKiBnZXRzIGEgdG9vbHRpcCBmb3Igc2NhdHRlciBjaGFydHMuIENhbGxlZCBmcm9tIHVwZGF0ZVRvb2xUaXAqKi9cbiAgICBnZXRTY2F0dGVyVG9vbHRpcDogZnVuY3Rpb24gKGNoYXJ0LCBpc19zaGFyZWQsIGRlY2ltYWxzLCBzaWduc19hcnIsIG11bHRpcGxpZXIsIGNoYXJ0X3R5cGUpIHtcbiAgICAgICAgdmFyIG5ld190b29sdGlwID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgeV9heGlzX3RpdGxlID0gdGhpcy5zZXJpZXMueUF4aXMuYXhpc1RpdGxlID8gdGhpcy5zZXJpZXMueUF4aXMuYXhpc1RpdGxlLnRleHRTdHIgOiBcIlktQXhpc1wiO1xuICAgICAgICAgICAgdmFyIHhfYXhpc190aXRsZSA9IHRoaXMuc2VyaWVzLnhBeGlzLmF4aXNUaXRsZSA/IHRoaXMuc2VyaWVzLnhBeGlzLmF4aXNUaXRsZS50ZXh0U3RyIDogXCJYLUF4aXNcIjtcblxuICAgICAgICAgICAgcmV0dXJuIFwiPGI+XCIgKyB0aGlzLnNlcmllcy5uYW1lICsgXCI8L2I+PGJyPlwiICsgeV9heGlzX3RpdGxlICsgXCI6IDxiPlwiICsgc2lnbnNfYXJyWzBdICtcbiAgICAgICAgICAgICAgICBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCgodGhpcy55ICogbXVsdGlwbGllciksIGRlY2ltYWxzKSArIHNpZ25zX2FyclsxXSArIFwiPC9iPjxici8+XCIgK1xuICAgICAgICAgICAgICAgIHhfYXhpc190aXRsZSArIFwiOiA8Yj5cIiArIHNpZ25zX2FyclswXSArIEhpZ2hjaGFydHMubnVtYmVyRm9ybWF0KCh0aGlzLnggKiBtdWx0aXBsaWVyKSwgZGVjaW1hbHMpICsgc2lnbnNfYXJyWzFdICsgXCI8YnIvPlwiO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5ld190b29sdGlwO1xuICAgIH0sXG5cbiAgICAvKiogZ2V0cyBhIHRvb2x0aXAgZm9yIHR5cGljYWwgY2hhcnRzIChsaW5lLCBhcmVhLCBiYXIgZXRjKS4gQ2FsbGVkIGZyb20gdXBkYXRlVG9vbFRpcCoqL1xuICAgIGdldFR5cGljYWxUb29sdGlwOiBmdW5jdGlvbiAoY2hhcnQsIGlzX3NoYXJlZCwgZGVjaW1hbHMsIHNpZ25zX2FyciwgbXVsdGlwbGllciwgY2hhcnRfdHlwZSkge1xuXG4gICAgICAgIHZhciBuZXdfdG9vbHRpcDtcblxuICAgICAgICBpZiAoaXNfc2hhcmVkKSB7IC8vU0hBUkVEIFRPT0xUSVBcblxuICAgICAgICAgICAgaWYgKGRlY2ltYWxzID4gMCkgeyAvL3VzZSBkZWNpbWFsIGZvcm1hdHRlclxuXG4gICAgICAgICAgICAgICAgbmV3X3Rvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlZF90b29sdGlwX2FyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSB0aGlzLnBvaW50O1xuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChjaGFydC5zZXJpZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlZF90b29sdGlwX2Fyci5wdXNoKFwiPGI+XCIgKyB0aGlzLm5hbWUgKyBcIjwvYj4gPGJyPlwiICsgdGhpcy5wb2ludHNbcG9pbnQueF0ueCArIFwiOiBcIiArIHNpZ25zX2FyclswXSArIEhpZ2hjaGFydHMubnVtYmVyRm9ybWF0KCh0aGlzLnBvaW50c1twb2ludC54XS55ICogbXVsdGlwbGllciksIGRlY2ltYWxzKSArIHNpZ25zX2FyclsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcmVkX3Rvb2x0aXBfYXJyLmpvaW4oJzxici8+Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgeyAvL2Rvbid0IHVzZSBkZWNpbWFsIGZvcm1hdHRlclxuXG4gICAgICAgICAgICAgICAgbmV3X3Rvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlZF90b29sdGlwX2FyciA9IFtcIjxiPlwiICsgdGhpcy5rZXkgKyBcIjwvYj5cIl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IHRoaXMucG9pbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNoYXJ0LnNlcmllcywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkX3Rvb2x0aXBfYXJyLnB1c2godGhpcy5uYW1lICsgXCI6IFwiICsgc2lnbnNfYXJyWzBdICsgJCh0aGlzLnBvaW50c1twb2ludC54XS55ICogbXVsdGlwbGllcikuYWRkQ29tbWFzKCkgKyBzaWduc19hcnJbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYXJlZF90b29sdGlwX2Fyci5qb2luKCc8YnIvPicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH0gZWxzZSB7IC8vTk9UIFNIQVJFRCBUT09MVElQXG5cbiAgICAgICAgICAgIGlmIChkZWNpbWFscyA+IDApIHsgLy91c2UgZGVjaW1hbCBmb3JtYXR0ZXJcbiAgICAgICAgICAgICAgICBuZXdfdG9vbHRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiPGI+XCIgKyB0aGlzLnNlcmllcy5uYW1lICsgXCI8L2I+PGJyPlwiICsgdGhpcy54ICsgXCI6IFwiICsgc2lnbnNfYXJyWzBdICtcbiAgICAgICAgICAgICAgICAgICAgICAgIEhpZ2hjaGFydHMubnVtYmVyRm9ybWF0KCh0aGlzLnkgKiBtdWx0aXBsaWVyKSwgZGVjaW1hbHMpICsgc2lnbnNfYXJyWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vZG9uJ3QgdXNlIGRlY2ltYWwgZm9ybWF0dGVyXG4gICAgICAgICAgICAgICAgbmV3X3Rvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjxiPlwiICsgdGhpcy5zZXJpZXMubmFtZSArIFwiPC9iPjxicj5cIiArIHRoaXMueCArIFwiOiBcIiArIHNpZ25zX2FyclswXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMueSAqIG11bHRpcGxpZXIpLmFkZENvbW1hcygpICsgc2lnbnNfYXJyWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdfdG9vbHRpcDtcbiAgICB9LFxuXG5cblxuXG5cbiAgICAvKiogdXBkYXRlIHRvb2x0aXAgLSBkZWNpZGUgd2hpY2gga2luZCBvZiBjaGFydCBhbmQgY2FsbCB0aGF0IGdldCB0b29sdGlwIGZ1bmN0aW9uICoqL1xuICAgIHVwZGF0ZVRvb2xUaXA6IGZ1bmN0aW9uIChjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgICAgICB2YXIgaXNfc2hhcmVkID0gdXRpbHNfZm9ybXMuZ2V0Q2hlY2tCb3hWYWx1ZSgkKFwiI2NoYXJ0X3Rvb2x0aXBfc2hhcmVkX2NoZWNrYm94XCIpKTtcbiAgICAgICAgdmFyIGRlY2ltYWxzID0gTnVtYmVyKCQoXCIjY2hhcnRfdG9vbHRpcF9mb3JjZV9kZWNpbWFsc19zZWxlY3RcIikudmFsKCkpO1xuICAgICAgICB2YXIgc2lnbnMgPSAkKFwiI2NoYXJ0X3Rvb2x0aXBfc2lnbnNfc2VsZWN0XCIpLnZhbCgpO1xuICAgICAgICB2YXIgbXVsdGlwbGllciA9ICQoXCIjY2hhcnRfdG9vbHRpcF95X211bHRpcGxlX3NlbGVjdFwiKS52YWwoKTtcbiAgICAgICAgdmFyIGNoYXJ0X3R5cGUgPSBhbGxfY2hhcnRfb3B0aW9ucy5jaGFydC50eXBlO1xuICAgICAgICB2YXIgbmV3X3Rvb2x0aXA7XG4gICAgICAgIHZhciBzaWduc19hcnIgPSBbc2lnbnMgPT09IFwiJFwiID8gXCIkXCIgOiBcIlwiLCBzaWducyA9PT0gXCIlXCIgPyBcIiVcIiA6IFwiXCJdO1xuXG5cbiAgICAgICAgLy9JRiBBIFRZUElDQUwgQ0hBUlRcbiAgICAgICAgaWYgKFtcImFyZWFcIiwgXCJsaW5lXCIsIFwiYmFyXCIsIFwic3RhY2tlZF9iYXJcIiwgXCJjb2x1bW5cIiwgXCJzdGFja2VkX2NvbHVtblwiXS5pbmRleE9mKGNoYXJ0X3R5cGUpID4gLTEpIHtcbiAgICAgICAgICAgIG5ld190b29sdGlwID0gdXBkYXRlX3Rvb2x0aXAuZ2V0VHlwaWNhbFRvb2x0aXAoY2hhcnQsIGlzX3NoYXJlZCwgZGVjaW1hbHMsIHNpZ25zX2FyciwgbXVsdGlwbGllciwgY2hhcnRfdHlwZSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vSUYgQSBTQ0FUVEVSIENIQVJUXG4gICAgICAgIGVsc2UgaWYgKGNoYXJ0X3R5cGUgPT09IFwic2NhdHRlclwiKSB7XG4gICAgICAgICAgICBuZXdfdG9vbHRpcCA9IHVwZGF0ZV90b29sdGlwLmdldFNjYXR0ZXJUb29sdGlwKGNoYXJ0LCBpc19zaGFyZWQsIGRlY2ltYWxzLCBzaWduc19hcnIsIG11bHRpcGxpZXIsIGNoYXJ0X3R5cGUpO1xuXG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICghY2hhcnQpIHsgLy9mb3IgdXNlIGluIHRvb2x0aXBfaW5pdFxuICAgICAgICAgICAgcmV0dXJuIG5ld190b29sdGlwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnQudG9vbHRpcC5vcHRpb25zLmZvcm1hdHRlciA9IG5ld190b29sdGlwO1xuICAgIC8vICAgIGNoYXJ0LnRvb2x0aXAucmVmcmVzaChjaGFydC5zZXJpZXNbMF0uZGF0YVswXSk7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMudG9vbHRpcC5mb3JtYXR0ZXIgPSB1dGlsc19tYWluLnN0cmluZ2lmeUZvcm1hdHRlcihuZXdfdG9vbHRpcCwgZGVjaW1hbHMsIG11bHRpcGxpZXIsIHNpZ25zX2Fycik7XG4gICAgICAgIFxuICAgIH1cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX3Rvb2x0aXA7XG5cblxuIiwiLyoqIHdoZW4gWC1heGlzIG9wdGlvbnMgYXJlIGNoYW5nZWQgaW4gdGhlIHNpZGUgYXJlYSwgdGhlc2UgbWV0aG9kcyBhcmUgY2FsbGVkIFxuQG5hbWVzcGFjZVxuKi9cblxudmFyIHVwZGF0ZV94X2F4aXMgPSB7XG5cbiAgICAvKiogdXBkYXRlIHRoZSB4IGF4aXMgdGl0bGUgKi9cbiAgICB1cGRhdGVUaXRsZTogZnVuY3Rpb24gKG5ld1RpdGxlLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgY2hhcnQueEF4aXNbMF0uc2V0VGl0bGUoe1xuICAgICAgICAgICAgdGV4dDogbmV3VGl0bGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGl0bGUudGV4dCA9IG5ld1RpdGxlO1xuXG4gICAgfSxcblxuXG4gICAgLyoqIHVwZGF0ZSB4IGF4aXMgdGlja21hcmsgaW50ZXJ2YWwgKi9cbiAgICB1cGRhdGVUaWNrbWFya0ludGVydmFsOiBmdW5jdGlvbiAobmV3SW50ZXJ2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG5cbiAgICAgICAgaWYgKGlzTmFOKG5ld0ludGVydmFsKSB8fCBuZXdJbnRlcnZhbCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3SW50ZXJ2YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFjaGFydCkgeyAvLyBjYWxsZWQgd2hlbiB0aGlzIGlzIHVzZWQgaW4geF9heGlzX2luaXRcbiAgICAgICAgICAgIHJldHVybiBuZXdJbnRlcnZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdJbnRlcnZhbCA+IGNoYXJ0LnhBeGlzWzBdLmRhdGFNYXgpIHtcbiAgICAgICAgICAgIG5ld0ludGVydmFsID0gY2hhcnQueEF4aXNbMF0uZGF0YU1heDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0LnhBeGlzWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICB0aWNrSW50ZXJ2YWw6IG5ld0ludGVydmFsXG4gICAgICAgIH0pO1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aWNrSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcblxuICAgIH1cblxuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVfeF9heGlzOyIsInZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG5cblxuLyoqIHdoZW4gWS1heGlzIG9wdGlvbnMgYXJlIGNoYW5nZWQgaW4gdGhlIHNpZGUgYXJlYSwgdGhlc2UgbWV0aG9kcyBhcmUgY2FsbGVkIFxuQG5hbWVzcGFjZVxuKi9cbnZhciB1cGRhdGVfeV9heGlzID0ge1xuXG5cbiAgICAvKiogdXBkYXRlIGZvcm1hdCB3aGVuIGRvbGxhciAvIHBlcmNlbnQgc2lnbnMgc2VsZWN0IGlzIGNoYW5nZWQgKi9cbiAgICB1cGRhdGVGb3JtYXQ6IGZ1bmN0aW9uIChzaWduLCBkZWNpbWFscywgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIG5ld0Zvcm1hdCA9IFwie3ZhbHVlOiwuXCIgKyBkZWNpbWFscyArIFwiZn1cIjtcbiAgICAgICAgaWYgKHNpZ24gPT09IFwiJFwiKSB7XG4gICAgICAgICAgICBuZXdGb3JtYXQgPSBcIiR7dmFsdWU6LC5cIiArIGRlY2ltYWxzICsgXCJmfVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNpZ24gPT09IFwiJVwiKSB7XG4gICAgICAgICAgICBuZXdGb3JtYXQgPSBcInt2YWx1ZTosLlwiICsgZGVjaW1hbHMgKyBcImZ9JVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjaGFydCkgeyAvLyBjYWxsZWQgd2hlbiB0aGlzIGlzIHVzZWQgaW4geV9heGlzX2luaXRcbiAgICAgICAgICAgIHJldHVybiBuZXdGb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFydC55QXhpc1swXS51cGRhdGUoe1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBuZXdGb3JtYXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMuZm9ybWF0ID0gbmV3Rm9ybWF0O1xuXG4gICAgfSxcblxuXG4gICAgLyoqIHVwZGF0ZSBpZiB5LWF4aXMgaXMgbG9nICovXG4gICAgdXBkYXRlSXNMb2c6IGZ1bmN0aW9uICh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgIHZhciB0eXBlID0gdmFsID09PSB0cnVlID8gXCJsb2dhcml0aG1pY1wiIDogXCJsaW5lYXJcIjtcbiAgICAgICAgaWYgKCFjaGFydCkgeyAvLyBjYWxsZWQgd2hlbiB0aGlzIGlzIHVzZWQgaW4geV9heGlzX2luaXRcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnQueUF4aXNbMF0udXBkYXRlKHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnR5cGUgPSB0eXBlO1xuXG4gICAgfSxcblxuXG4gICAgLyoqIHVwZGF0ZSBpZiB5IGF4aXMgbGFiZWxzIGFyZSBvbiBvcHBvc2l0ZSBzaWRlICovXG4gICAgdXBkYXRlSXNPcHBvc2l0ZTogZnVuY3Rpb24gKHZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG4gICAgICAgIGNoYXJ0LnlBeGlzWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICBvcHBvc2l0ZTogdmFsXG4gICAgICAgIH0pO1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy5vcHBvc2l0ZSA9IHZhbDtcblxuICAgIH0sXG5cbiAgICAvKiogdXBkYXRlIHktYXhpcyBtYXggKi9cbiAgICB1cGRhdGVNYXg6IGZ1bmN0aW9uIChuZXdNYXgsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICBuZXdNYXggPSB1dGlsc19tYWluLmNoZWNrZm9yVW5kZWZpbmVkKG5ld01heCk7XG4gICAgICAgIGlmICghY2hhcnQpIHsgLy8gY2FsbGVkIHdoZW4gdGhpcyBpcyB1c2VkIGluIHlfYXhpc19pbml0XG4gICAgICAgICAgICByZXR1cm4gbmV3TWF4O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnQueUF4aXNbMF0udXBkYXRlKHtcbiAgICAgICAgICAgIG1heDogbmV3TWF4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLm1heCA9IG5ld01heDtcbiAgICB9LFxuXG4gICAgLyoqIHVwZGF0ZSB5LWF4aXMgbWluICovXG4gICAgdXBkYXRlTWluOiBmdW5jdGlvbiAobmV3TWluLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgbmV3TWluID0gdXRpbHNfbWFpbi5jaGVja2ZvclVuZGVmaW5lZChuZXdNaW4pO1xuICAgICAgICBpZiAoIWNoYXJ0KSB7IC8vIGNhbGxlZCB3aGVuIHRoaXMgaXMgdXNlZCBpbiB5X2F4aXNfaW5pdFxuICAgICAgICAgICAgcmV0dXJuIG5ld01pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0LnlBeGlzWzBdLnVwZGF0ZSh7XG4gICAgICAgICAgICBtaW46IG5ld01pblxuICAgICAgICB9KTtcblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy5taW4gPSBuZXdNaW47XG4gICAgfSxcblxuICAgIC8qKiB1cGRhdGUgdGhlIHkgYXhpcyB0aXRsZSAqL1xuICAgIHVwZGF0ZVRpdGxlOiBmdW5jdGlvbiAobmV3VGl0bGUsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICBjaGFydC55QXhpc1swXS5zZXRUaXRsZSh7XG4gICAgICAgICAgICB0ZXh0OiBuZXdUaXRsZVxuICAgICAgICB9KTtcblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy50aXRsZS50ZXh0ID0gbmV3VGl0bGU7XG5cbiAgICB9LFxuXG4gICAgLyoqIHVwZGF0ZSB5IGF4aXMgeC1wb3NpdGlvbiAodGl0bGUueCkgKi9cblxuXG4gICAgdXBkYXRlWFBvc2l0aW9uOiBmdW5jdGlvbiAobmV3WFBvc2l0aW9uLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgICAgICBuZXdYUG9zaXRpb24gPSB1dGlsc19tYWluLmNoZWNrZm9yVW5kZWZpbmVkKG5ld1hQb3NpdGlvbik7XG5cbiAgICAgICAgY2hhcnQueUF4aXNbMF0uc2V0VGl0bGUoe1xuICAgICAgICAgICAgeDogbmV3WFBvc2l0aW9uXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLnggPSBuZXdYUG9zaXRpb247XG5cbiAgICB9LFxuXG4gICAgLyoqIHVwZGF0ZSB5IGF4aXMgdGlja21hcmsgaW50ZXJ2YWwgKi9cbiAgICB1cGRhdGVUaWNrbWFya0ludGVydmFsOiBmdW5jdGlvbiAobmV3SW50ZXJ2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG5cbiAgICAgICAgbmV3SW50ZXJ2YWwgPSB1dGlsc19tYWluLmNoZWNrZm9yVW5kZWZpbmVkKG5ld0ludGVydmFsKTtcblxuICAgICAgICBpZiAoIWNoYXJ0KSB7IC8vIGNhbGxlZCB3aGVuIHRoaXMgaXMgdXNlZCBpbiB5X2F4aXNfaW5pdFxuICAgICAgICAgICAgcmV0dXJuIG5ld0ludGVydmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0ludGVydmFsID4gY2hhcnQueUF4aXNbMF0uZGF0YU1heCkge1xuICAgICAgICAgICAgbmV3SW50ZXJ2YWwgPSBjaGFydC55QXhpc1swXS5kYXRhTWF4O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnQueUF4aXNbMF0udXBkYXRlKHtcbiAgICAgICAgICAgIHRpY2tJbnRlcnZhbDogbmV3SW50ZXJ2YWxcblxuICAgICAgICB9KTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGlja0ludGVydmFsID0gbmV3SW50ZXJ2YWw7XG5cbiAgICB9XG5cblxuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVfeV9heGlzOyIsIiB2YXIgQWxsQ2hhcnRPcHRpb25zID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvYWxsX2NoYXJ0X29wdGlvbnMuanNcIiksXG4gICAgIGNoYXJ0SW5pdCA9IHJlcXVpcmUoXCIuL2NoYXJ0X2luaXQuanNcIiksXG4gICAgIGNvbG9yc0luaXQgPSByZXF1aXJlKFwiLi9jb2xvcnNfaW5pdC5qc1wiKSxcbiAgICAgY3JlZGl0c0luaXQgPSByZXF1aXJlKFwiLi9jcmVkaXRzX2luaXQuanNcIiksXG4gICAgIGV4cG9ydGluZ0luaXQgPSByZXF1aXJlKFwiLi9leHBvcnRpbmdfaW5pdC5qc1wiKSxcbiAgICAgbGVnZW5kSW5pdCA9IHJlcXVpcmUoXCIuL2xlZ2VuZF9pbml0LmpzXCIpLFxuICAgICBwbG90T3B0aW9uc0luaXQgPSByZXF1aXJlKFwiLi9wbG90X29wdGlvbnNfaW5pdC5qc1wiKSxcbiAgICAgc2VyaWVzSW5pdCA9IHJlcXVpcmUoXCIuL3Nlcmllc19pbml0LmpzXCIpLFxuICAgICBzdWJ0aXRsZUluaXQgPSByZXF1aXJlKFwiLi9zdWJ0aXRsZV9pbml0LmpzXCIpLFxuICAgICB0aXRsZUluaXQgPSByZXF1aXJlKFwiLi90aXRsZV9pbml0LmpzXCIpLFxuICAgICB0b29sdGlwSW5pdCA9IHJlcXVpcmUoXCIuL3Rvb2x0aXBfaW5pdC5qc1wiKSxcbiAgICAgeEF4aXNJbml0ID0gcmVxdWlyZShcIi4veF9heGlzX2luaXQuanNcIiksXG4gICAgIHlBeGlzSW5pdCA9IHJlcXVpcmUoXCIuL3lfYXhpc19pbml0LmpzXCIpLFxuICAgICBwYXJzZVRhYmxlSW5wdXQgPSByZXF1aXJlKFwiLi4vcGFyc2Vycy9wYXJzZV90YWJsZV9pbnB1dC5qc1wiKSxcbiAgICAgdXRpbHNfZm9ybXMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNfZm9ybXMuanNcIik7XG5cblxuIC8qKiBjcmVhdGUgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBhbGxfY2hhcnRfb3B0aW9ucyBcbiBAbW9kdWxlXG4gKiovXG4gdmFyIGFsbENoYXJ0T3B0aW9uc0luaXQgPSBmdW5jdGlvbiBhbGxDaGFydE9wdGlvbnNJbml0KCkge1xuICAgICB2YXIgY2hhcnRfdHlwZSA9ICQoXCIuc2VsZWN0ZWRfY2hhcnRfdHlwZVwiKS5kaXZWYWwoKTtcbiAgICAgdmFyIGxvYWRfc2VyaWVzX2Zyb20gPSAkKFwiLnNlbGVjdGVkX2xvYWRfc2VyaWVzX2Zyb21cIikuZGl2VmFsKCk7XG4gICAgIHZhciBsZWdlbmRfdG9nZ2xlX2VuYWJsZWQgPSB1dGlsc19mb3Jtcy5nZXRDaGVja0JveFZhbHVlKCQoXCIjbGVnZW5kX21ha2VfdG9nZ2xlX2NoZWNrYm94XCIpKTtcbiAgICAgdmFyIGlucHV0ID0gJChcIiN0YWJsZV9pbnB1dF90ZXh0YXJlYVwiKS52YWwoKTtcbiAgICAgdmFyIGNvbG9ycyA9IGNvbG9yc0luaXQoKTtcbiAgICAgXG4gICAgIHZhciBwYXJzZWRfdGFibGVfb3V0cHV0ID0gcGFyc2VUYWJsZUlucHV0KGlucHV0LCBsb2FkX3Nlcmllc19mcm9tLCBjaGFydF90eXBlLCBsZWdlbmRfdG9nZ2xlX2VuYWJsZWQsIGNvbG9ycyk7XG4gICAgIFxuXG4gICAgIC8vZ2V0IG9wdGlvbnMgZnJvbSBpbmRpdmlkdWFsIGluaXRzXG4gICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgY2hhcnQ6IGNoYXJ0SW5pdChjaGFydF90eXBlKSxcbiAgICAgICAgIGNyZWRpdHM6IGNyZWRpdHNJbml0KCksXG4gICAgICAgICBjb2xvcnM6IGNvbG9ycyxcbiAgICAgICAgIC8vIGV4cG9ydGluZzogZXhwb3J0aW5nSW5pdCgpLFxuICAgICAgICAgbGVnZW5kOiBsZWdlbmRJbml0KCksXG4gICAgICAgICBwbG90T3B0aW9uczogcGxvdE9wdGlvbnNJbml0KGNoYXJ0X3R5cGUsIGxlZ2VuZF90b2dnbGVfZW5hYmxlZCksXG4gICAgICAgICBzZXJpZXM6IHNlcmllc0luaXQocGFyc2VkX3RhYmxlX291dHB1dC5zZXJpZXMpLFxuICAgICAgICAgc3VidGl0bGU6IHN1YnRpdGxlSW5pdCgpLFxuICAgICAgICAgdGl0bGU6IHRpdGxlSW5pdChwYXJzZWRfdGFibGVfb3V0cHV0LnRpdGxlX3RleHQpLFxuICAgICAgICAgdG9vbHRpcDogdG9vbHRpcEluaXQoKSxcbiAgICAgICAgIHhBeGlzOiB4QXhpc0luaXQocGFyc2VkX3RhYmxlX291dHB1dC54X2F4aXNfY2F0ZWdvcmllcywgY2hhcnRfdHlwZSksXG4gICAgICAgICB5QXhpczogeUF4aXNJbml0KGNoYXJ0X3R5cGUpXG5cbiAgICAgfTtcblxuXG4gICAgIHZhciBhbGxfY2hhcnRfb3B0aW9ucyA9IG5ldyBBbGxDaGFydE9wdGlvbnMob3B0aW9ucyk7XG4gICAgIHJldHVybiBhbGxfY2hhcnRfb3B0aW9ucztcbiB9O1xuXG4gbW9kdWxlLmV4cG9ydHMgPSBhbGxDaGFydE9wdGlvbnNJbml0OyIsInZhciBDaGFydE9wdGlvbnMgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy9jaGFydC5qc1wiKTtcblxuLyoqIEluaXRpYWxpemVyIGZvciBcImNoYXJ0XCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi9cbnZhciBjaGFydEluaXQgPSBmdW5jdGlvbiBjaGFydEluaXQoY2hhcnRfdHlwZSkge1xuICAgIFxuICAgICAgICBpZiAoY2hhcnRfdHlwZSA9PT0gXCJkcmlsbGRvd25cIil7XG4gICAgICAgICAgICBjaGFydF90eXBlID0gXCJjb2x1bW5cIjtcbiAgICAgICAgfVxuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBtYXJnaW46IFtOdW1iZXIoJChcIiN0b3BfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoKSksXG4gICAgICAgICAgICAgICAgICBOdW1iZXIoJChcIiNyaWdodF9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbCgpKSxcbiAgICAgICAgICAgICAgICAgIE51bWJlcigkKFwiI2JvdHRvbV9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbCgpKSxcbiAgICAgICAgICAgICAgICAgIE51bWJlcigkKFwiI2xlZnRfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoKSksXG4gICAgICAgICAgICAgICAgIF0sXG4gICAgICAgIHJlbmRlclRvOiAkKFwiI2NoYXJ0X2lkX3RleHRpbnB1dFwiKS52YWwoKSxcblxuICAgICAgICB0eXBlOiBjaGFydF90eXBlXG4gICAgfVxuICAgIFxuXG4gICAgdmFyIGNoYXJ0X29wdGlvbnMgPSBuZXcgQ2hhcnRPcHRpb25zKG9wdGlvbnMpO1xuICAgIHJldHVybiBjaGFydF9vcHRpb25zO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjaGFydEluaXQ7IiwiLyoqIEluaXRpYWxpemVyIGZvciBcImNvbG9yc1wiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBcbkBtb2R1bGVcbiovXG52YXIgY29sb3JzSW5pdCA9IGZ1bmN0aW9uIGNvbG9yc0luaXQoKSB7XG4gICAgdmFyIGNvbG9yX2FyciA9IFtdO1xuICAgICQoXCIuY29sb3JfcGFsZXR0ZV9zZWxlY3RlZCAuY29sb3JfcGFsZXR0ZV9jZWxsXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBjb2xvcl9hcnIucHVzaCgkKHRoaXMpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIikpO1xuICAgIH0pO1xuICAgIFxuICAgIGlmIChjb2xvcl9hcnIubGVuZ3RoIDwgMSl7XG4gICAgICBjb2xvcl9hcnIgPSAgWycjN2NiNWVjJywgJyM0MzQzNDgnLCAnIzkwZWQ3ZCcsICcjZjdhMzVjJywgJyM4MDg1ZTknLFxuICAgJyNmMTVjODAnLCAnI2U0ZDM1NCcsICcjMmI5MDhmJywgJyNmNDViNWInLCAnIzkxZThlMScsICcjMmY3ZWQ4JywgJyMwZDIzM2EnLCAnIzhiYmMyMScsICcjOTEwMDAwJywgJyMxYWFkY2UnLFxuICAgJyM0OTI5NzAnLCAnI2YyOGY0MycsICcjNzdhMWU1JywgJyNjNDI1MjUnLCAnI2E2Yzk2YSddO1xuICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIGNvbG9yX2Fycjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29sb3JzSW5pdDsiLCJ2YXIgQ3JlZGl0cyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2NyZWRpdHMuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJjcmVkaXRzXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi9cbnZhciBjcmVkaXRzSW5pdCA9IGZ1bmN0aW9uIGNyZWRpdHNJbml0KCkge1xuXG4gICAgdmFyIGNyZWRpdHNfdGV4dCA9ICQoXCIjY2hhcnRfY3JlZGl0c190ZXh0X3RleHRhcmVhXCIpLnZhbCgpLnJlcGxhY2UoL1xcbi9nLCBcIjxicj5cIik7XG4gICAgLyoqIGNhbGN1bGF0ZSB2ZXJ0aWNhbCB5IHBvc2l0aW9uIG9mIGNyZWRpdHMsIGRlcGVuZGluZyBvbiBob3cgbWFueSBsaW5lcyBpdCBoYXMgXG4gICAgQHBhcmFtIHRleHQge3N0cmluZ30gdGhlIGNyZWRpdHMgdGV4dCwgb3JpZ2luYWxseSBmcm9tICNjaGFydF9jcmVkaXRzX3RleHRfdGV4dGFyZWFcbiAgICAqL1xuICAgIHZhciBjYWxjdWxhdGVDcmVkaXRzUG9zaXRpb24gPSBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICB2YXIgbmV3X3lfcG9zID0gKHRleHQuc3BsaXQoXCI8YnI+XCIpLmxlbmd0aCkgKiAtMTE7XG4gICAgICAgIHJldHVybiBuZXdfeV9wb3M7XG4gICAgfTtcblxuICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgdGV4dDogY3JlZGl0c190ZXh0LFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgeTogY2FsY3VsYXRlQ3JlZGl0c1Bvc2l0aW9uKGNyZWRpdHNfdGV4dClcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIHZhciBjcmVkaXRzID0gbmV3IENyZWRpdHMob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNyZWRpdHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWRpdHNJbml0OyIsInZhciBFeHBvcnRpbmcgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy9leHBvcnRpbmcuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJleHBvcnRpbmdcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIGV4cG9ydGluZ0luaXQgPSBmdW5jdGlvbiBleHBvcnRpbmdJbml0KCkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuXG4gICAgfTtcblxuXG4gICAgdmFyIGV4cG9ydGluZyA9IG5ldyBFeHBvcnRpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGV4cG9ydGluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0aW5nSW5pdDsiLCJ2YXIgTGVnZW5kID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvbGVnZW5kLmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwibGVnZW5kXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi8gXG4gdmFyIGxlZ2VuZEluaXQgPSBmdW5jdGlvbiBsZWdlbmRJbml0KCkge1xuICAgICBcbiAgICAgXG4gICAgIHZhciBnZXRMZWdlbmRMYXlvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgdmFyIGxlZ2VuZF9sYXlvdXRfdmFsID0gJChcIiNsZWdlbmRfbGF5b3V0X3NlbGVjdFwiKS52YWwoKTtcbiAgICAgICAgIHJldHVybiBsZWdlbmRfbGF5b3V0X3ZhbCAhPT0gXCJub19sZWdlbmRcIiA/IGxlZ2VuZF9sYXlvdXRfdmFsIDogdW5kZWZpbmVkO1xuICAgICB9O1xuICAgICBcbiAgICAgXG5cbiAgICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgIGxheW91dDogZ2V0TGVnZW5kTGF5b3V0KCksXG4gICAgICAgICB4OiBOdW1iZXIoJChcIiNsZWdlbmRfcGxhY2VtZW50X3hcIikudmFsKCkpLFxuICAgICAgICAgeTogTnVtYmVyKCQoXCIjbGVnZW5kX3BsYWNlbWVudF95XCIpLnZhbCgpKVxuXG4gICAgIH07XG5cblxuICAgICB2YXIgbGVnZW5kID0gbmV3IExlZ2VuZChvcHRpb25zKTtcbiAgICAgcmV0dXJuIGxlZ2VuZDtcbiB9O1xuXG4gbW9kdWxlLmV4cG9ydHMgPSBsZWdlbmRJbml0OyIsInZhciBQbG90T3B0aW9ucyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3Bsb3Rfb3B0aW9ucy5qc1wiKTtcbnZhciB1cGRhdGVfbGVnZW5kID0gcmVxdWlyZShcIi4uL2Zvcm1fdXBkYXRlcy91cGRhdGVfbGVnZW5kLmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwicGxvdE9wdGlvbnNcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIHBsb3RPcHRpb25zSW5pdCA9IGZ1bmN0aW9uIHBsb3RPcHRpb25zSW5pdChjaGFydF90eXBlLCBsZWdlbmRfdG9nZ2xlX2VuYWJsZWQpIHtcblxuICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIG9uZSBsZWdlbmQgaXRlbSBpcyBjbGlja2VkLCB0aGUgb3RoZXJzIGhpZGVcbiAgICAgICAgICAgICAgICBsZWdlbmRJdGVtQ2xpY2s6IHVwZGF0ZV9sZWdlbmQudXBkYXRlVG9nZ2xlKGxlZ2VuZF90b2dnbGVfZW5hYmxlZClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHt9LFxuXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEuNSxcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogNVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogNFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgb3B0aW9uc1tjaGFydF90eXBlXSA9IHt9O1xuXG4gICAgLyoqIHVuaXF1ZSBjaGFydCBvcHRpb25zIChjaG9vc2luZyB0byBrZWVwIHRoZXNlIHdpdGggZXZlcnkgY2hhcnQgc28gSSBkb24ndCBoYXZlIHRvIHJlbG9hZCB0aGVtIHdpdGggaW5kaXZpZHVhbCBzZXJpZXMgd2hlbiBjaGFydCB0eXBlcyBhcmUgdXBkYXRlZCkgKi9cbiAgICAvL2p1c3QgZm9yIGJhciBvciBjb2x1bW4gXG4gICAgb3B0aW9ucy5zZXJpZXMuZ3JvdXBQYWRkaW5nID0gMC4yO1xuICAgIG9wdGlvbnMuc2VyaWVzLnBvaW50UGFkZGluZyA9IDAuMTtcbiAgICBvcHRpb25zLnNlcmllcy5wb2ludFBsYWNlbWVudCA9IG51bGw7XG4gICAgb3B0aW9ucy5zZXJpZXMuc3RhY2tpbmcgPSBudWxsO1xuICAgIG9wdGlvbnMuc2VyaWVzLm1pblBvaW50TGVuZ3RoID0gMjtcblxuXG4gICAgLy9qdXN0IGZvciBidWJibGUgY2hhcnRzXG4gICAgb3B0aW9ucy5zZXJpZXMubWF4U2l6ZSA9IDUwO1xuICAgIG9wdGlvbnMuc2VyaWVzLnNpemVCeSA9ICd3aWR0aCc7IC8vaW5zdGVhZCBvZiAnYXJlYScsIHNlZW1zIG1vcmUgYWNjdXJhdGVcblxuXG4gICAgdmFyIHBsb3RPcHRpb25zID0gbmV3IFBsb3RPcHRpb25zKG9wdGlvbnMpO1xuICAgIHJldHVybiBwbG90T3B0aW9ucztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGxvdE9wdGlvbnNJbml0OyIsInZhciBTZXJpZXMgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy9zZXJpZXMuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJzZXJpZXNcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIHNlcmllc0luaXQgPSBmdW5jdGlvbiBzZXJpZXNJbml0KHNlcmllcykge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0gc2VyaWVzO1xuXG5cbiAgICB2YXIgc2VyaWVzID0gbmV3IFNlcmllcyhvcHRpb25zKTtcbiAgICByZXR1cm4gc2VyaWVzLnNlcmllcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc2VyaWVzSW5pdDsiLCJ2YXIgU3VidGl0bGUgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy9zdWJ0aXRsZS5qc1wiKTtcblxuLyoqIEluaXRpYWxpemVyIGZvciBcInN1YnRpdGxlXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlXG5AbW9kdWxlXG4qL1xuXG52YXIgc3VidGl0bGVJbml0ID0gZnVuY3Rpb24gc3VidGl0bGVJbml0KCkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuXG4gICAgfTtcblxuXG4gICAgdmFyIHN1YnRpdGxlID0gbmV3IFN1YnRpdGxlKG9wdGlvbnMpO1xuICAgIHJldHVybiBzdWJ0aXRsZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3VidGl0bGVJbml0OyIsInZhciBUaXRsZSA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3RpdGxlLmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwidGl0bGVcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgXG5AbW9kdWxlXG4qL1xudmFyIHRpdGxlSW5pdCA9IGZ1bmN0aW9uIHRpdGxlSW5pdCh0aXRsZV90ZXh0KSB7XG5cbiAgICAvL2xvYWQgb3B0aW9ucyBmcm9tIHVzZXIgaW5wdXRzXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHRleHQ6IHRpdGxlX3RleHRcbiAgICB9O1xuXG5cbiAgICB2YXIgdGl0bGUgPSBuZXcgVGl0bGUob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRpdGxlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0aXRsZUluaXQ7IiwidmFyIFRvb2x0aXAgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy90b29sdGlwLmpzXCIpO1xudmFyIHV0aWxzX2Zvcm1zID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzX2Zvcm1zLmpzXCIpO1xuXG4vKiogSW5pdGlhbGl6ZXIgZm9yIFwidG9vbHRpcFwiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBcbkBtb2R1bGVcbiovXG52YXIgdG9vbHRpcEluaXQgPSBmdW5jdGlvbiB0b29sdGlwSW5pdCgpIHtcblxuICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQgIC8vL2Zvcm1hdHRlciBpcyBjcmVhdGVkIHdpdGggdXBkYXRlX3Rvb2x0aXAgYXMgYSBjYWxsYmFjayAobmVlZHMgY2hhcnQgdG8gZXhpc3QgZmlyc3QpXG4gICAgICAgIFxuICAgIH07XG5cbiAgICB2YXIgdG9vbHRpcCA9IG5ldyBUb29sdGlwKG9wdGlvbnMpO1xuICAgIHJldHVybiB0b29sdGlwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0b29sdGlwSW5pdDsiLCJ2YXIgdXBkYXRlX3hfYXhpcyA9IHJlcXVpcmUoXCIuLi9mb3JtX3VwZGF0ZXMvdXBkYXRlX3hfYXhpcy5qc1wiKTtcbnZhciBYQXhpcyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3hfYXhpcy5qc1wiKTtcblxuLyoqIEluaXRpYWxpemVyIGZvciBcInhBeGlzXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlIFxuQG1vZHVsZVxuKi9cbnZhciB4QXhpc0luaXQgPSBmdW5jdGlvbiB4QXhpc0luaXQoY2F0ZWdvcmllcywgY2hhcnRfdHlwZSkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuXG4gICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMgfHwgdW5kZWZpbmVkLFxuICAgICAgICBwbG90TGluZXM6IFt7XG4gICAgICAgICAgICBcInZhbHVlXCI6IDAsXG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiI2MwYzBjMFwiLFxuICAgICAgICAgICAgXCJkYXNoU3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgICAgICAgXCJ3aWR0aFwiOiBjaGFydF90eXBlID09PSBcInNjYXR0ZXJcIiB8fCBjaGFydF90eXBlID09PSBcImJ1YmJsZVwiID8gMSA6IDBcbiAgICAgICAgfV0sXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICBhbGlnbjogY2hhcnRfdHlwZSA9PT0gXCJiYXJcIiB8fCBjaGFydF90eXBlID09PSBcInN0YWNrZWRfYmFyXCIgPyBcImhpZ2hcIiA6IFwibWlkZGxlXCIsXG4gICAgICAgICAgICB0ZXh0OiAkKFwiI2NoYXJ0X3hfYXhpc190aXRsZV90ZXh0YXJlYVwiKS52YWwoKSxcbiAgICAgICAgICAgIHg6ICBjaGFydF90eXBlID09PSBcImJhclwiIHx8IGNoYXJ0X3R5cGUgPT09IFwic3RhY2tlZF9iYXJcIiA/IDQwIDogMCBcbiAgICAgICAgfSxcbiAgICAgICAgdGlja0ludGVydmFsOiB1cGRhdGVfeF9heGlzLnVwZGF0ZVRpY2ttYXJrSW50ZXJ2YWwoTnVtYmVyKCQoXCIjY2hhcnRfeF9heGlzX3RpY2ttYXJrX2ludGVydmFsX2lucHV0XCIpLnZhbCgpKSlcblxuICAgIH07XG5cblxuICAgIHZhciB4QXhpcyA9IG5ldyBYQXhpcyhvcHRpb25zKTtcbiAgICByZXR1cm4geEF4aXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHhBeGlzSW5pdDsiLCJ2YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xudmFyIFlBeGlzID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMveV9heGlzLmpzXCIpO1xudmFyIHVwZGF0ZV95X2F4aXMgPSByZXF1aXJlKFwiLi4vZm9ybV91cGRhdGVzL3VwZGF0ZV95X2F4aXMuanNcIik7XG52YXIgdXRpbHNfZm9ybXMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNfZm9ybXMuanNcIik7XG5cbi8qKiBJbml0aWFsaXplciBmb3IgXCJ5QXhpc1wiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBcbkBtb2R1bGVcbiovXG52YXIgeUF4aXNJbml0ID0gZnVuY3Rpb24geUF4aXNJbml0KGNoYXJ0X3R5cGUpIHtcblxuICAgIC8qKiBsb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0cyAqL1xuICAgIHZhciBvcHRpb25zID0ge1xuXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgZm9ybWF0OiB1cGRhdGVfeV9heGlzLnVwZGF0ZUZvcm1hdCgkKFwiI2NoYXJ0X3lfYXhpc19zaWduc19zZWxlY3RcIikudmFsKCksICQoXCIjY2hhcnRfeV9heGlzX2RlY2ltYWxzX3NlbGVjdFwiKS52YWwoKSkgLy92YWwsIGRlY2ltYWxzXG4gICAgICAgIH0sXG5cbiAgICAgICAgbWF4OiB1cGRhdGVfeV9heGlzLnVwZGF0ZU1heChOdW1iZXIoJChcIiNjaGFydF95X2F4aXNfbWF4X2lucHV0XCIpLnZhbCgpKSksXG4gICAgICAgIG1pbjogdXBkYXRlX3lfYXhpcy51cGRhdGVNaW4oTnVtYmVyKCQoXCIjY2hhcnRfeV9heGlzX21pbl9pbnB1dFwiKS52YWwoKSkpLFxuICAgICAgICB0eXBlOiB1cGRhdGVfeV9heGlzLnVwZGF0ZUlzTG9nKHV0aWxzX2Zvcm1zLmdldENoZWNrQm94VmFsdWUoJChcIiNjaGFydF95X2F4aXNfbG9nX2NoZWNrYm94XCIpKSksXG4gICAgICAgIG9wcG9zaXRlOiB1dGlsc19mb3Jtcy5nZXRDaGVja0JveFZhbHVlKCQoXCIjY2hhcnRfeV9heGlzX29wcG9zaXRlX2NoZWNrYm94XCIpKSxcbiAgICAgICAgdGlja0ludGVydmFsOiB1cGRhdGVfeV9heGlzLnVwZGF0ZVRpY2ttYXJrSW50ZXJ2YWwoTnVtYmVyKCQoXCIjY2hhcnRfeV9heGlzX3RpY2ttYXJrX2ludGVydmFsX2lucHV0XCIpLnZhbCgpKSksXG5cbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6ICQoXCIjY2hhcnRfeV9heGlzX3RpdGxlX3RleHRhcmVhXCIpLnZhbCgpLFxuICAgICAgICAgICAgYWxpZ246IGNoYXJ0X3R5cGUgPT09IFwiYmFyXCIgPyBcIm1pZGRsZVwiIDogXCJoaWdoXCIsXG4gICAgICAgICAgICB4OiBjaGFydF90eXBlID09PSBcImJhclwiIHx8IGNoYXJ0X3R5cGUgPT09IFwic3RhY2tlZF9iYXJcIiA/IDAgOiBOdW1iZXIoJChcIiNjaGFydF95X2F4aXNfeF9wb3NpdGlvbl9pbnB1dFwiKS52YWwoKSksXG4gICAgICAgICAgICB5OiBjaGFydF90eXBlID09PSBcImJhclwiIHx8IGNoYXJ0X3R5cGUgPT09IFwic3RhY2tlZF9iYXJcIiA/IDggOiAtMjAsXG4gICAgICAgIH1cblxuXG4gICAgfTtcblxuXG4gICAgdmFyIHlBeGlzID0gbmV3IFlBeGlzKG9wdGlvbnMpO1xuICAgIHJldHVybiB5QXhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0geUF4aXNJbml0O1xuIiwidmFyIHVwZGF0ZV9pbmRpdmlkdWFsX3NlcmllcyA9IHJlcXVpcmUoXCIuL2Zvcm1fdXBkYXRlcy91cGRhdGVfaW5kaXZpZHVhbF9zZXJpZXMuanNcIik7XG5cbi8qKlxuICogQ29udGFpbnMgZnVuY3Rpb25zIHRoYXQgZGVhbCB3aXRoIGtleWJvYXJkIGlucHV0c1xuICogQG5hbWVzcGFjZVxuICovXG52YXIga2V5Ym9hcmRfaW5wdXRzID0ge1xuXG4gICAgYWRqVmFsdWU6IGZ1bmN0aW9uICh2YWwsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgdmFsID0gTnVtYmVyKHZhbCk7XG4gICAgICAgIGlmICghaXNOYU4odmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gXCIrXCIgPyB2YWwgKyAxMCA6IHZhbCAtIDEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogY2xpY2tzIHRoZSBuZXh0IGVsZW1lbnQgb2YgYSBnaXZlbiBjbGFzc25hbWUgdGhhbiB0aGUgb25lIHNlbGVjdGVkXG4gICAgQHBhcmFtIGNsYXNzbmFtZSB7c3RyaW5nfSB0aGUgY2xhc3MgbmFtZSBvZiBlYWNoIG9mIHRoZSBlbGVtZW50c1xuICAgIEBwYXJhbSBzZWxlY3RlZF9jbGFzc25hbWUge3N0cmluZ30gdGhlIG5hbWUgb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnRcbiAgICAqKi9cbiAgICBjbGlja05leHQ6IGZ1bmN0aW9uIChjbGFzc25hbWUsIHNlbGVjdGVkX2NsYXNzbmFtZSkge1xuICAgICAgICB2YXIgbmV4dCA9IDA7XG4gICAgICAgIHZhciBsZW4gPSAkKFwiLlwiICsgY2xhc3NuYW1lKS5sZW5ndGg7XG4gICAgICAgICQoXCIuXCIgKyBjbGFzc25hbWUpLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKHNlbGVjdGVkX2NsYXNzbmFtZSkpIHtcbiAgICAgICAgICAgICAgICBuZXh0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT09IGxlbikge1xuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAkKFwiLlwiICsgY2xhc3NuYW1lICsgXCI6ZXEoXCIgKyBuZXh0ICsgXCIpXCIpLmNsaWNrKCk7XG4gICAgfSxcblxuXG4gICAgLyoqIHdoZW4gbm90aGluZyBpcyBzZWxlY3RlZCwgcHJlc3NpbmcgdXAgb3IgZG93bmNoYW5nZXMgd2hpY2ggc2lkZSBuYXYgdGFiIGlzIHNlbGVjdGVkICovXG4gICAgc2lkZU5hdlRhYlNob3J0Y3V0czogZnVuY3Rpb24gKGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICAkKGRvY3VtZW50KS5rZXlkb3duKGZ1bmN0aW9uIChlKSB7XG5cblxuICAgICAgICAgICAgLy9nZXQgY29kZVxuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzIpIHsgLy9zcGFjZSBiYXJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJChcIiNnZXRfY29kZV9idXR0b25cIikuY2xpY2soKTtcblxuICAgICAgICAgICAgICAgIC8vY2hhcnQgcmVzaXppbmcga2V5c1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnNoaWZ0S2V5ICYmIGUua2V5Q29kZSA9PT0gNDApIHsgLy9zaGlmdCArIGRvd25cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJChcIiNjaGFydF9oZWlnaHRfdGV4dGlucHV0XCIpLnZhbChrZXlib2FyZF9pbnB1dHMuYWRqVmFsdWUoJChcIiNjaGFydF9oZWlnaHRfdGV4dGlucHV0XCIpLnZhbCgpLCBcIitcIikpLmtleXVwKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSAmJiBlLmtleUNvZGUgPT09IDM4KSB7IC8vc2hpZnQgKyB1cFxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkKFwiI2NoYXJ0X2hlaWdodF90ZXh0aW5wdXRcIikudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKFwiI2NoYXJ0X2hlaWdodF90ZXh0aW5wdXRcIikudmFsKCksIFwiLVwiKSkua2V5dXAoKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnNoaWZ0S2V5ICYmIGUua2V5Q29kZSA9PT0gMzcpIHsgLy9zaGlmdCArIGxlZnRcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJChcIiNjaGFydF93aWR0aF90ZXh0aW5wdXRcIikudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKFwiI2NoYXJ0X3dpZHRoX3RleHRpbnB1dFwiKS52YWwoKSwgXCItXCIpKS5rZXl1cCgpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkgJiYgZS5rZXlDb2RlID09PSAzOSkgeyAvL3NoaWZ0ICsgcmlnaHRcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJChcIiNjaGFydF93aWR0aF90ZXh0aW5wdXRcIikudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKFwiI2NoYXJ0X3dpZHRoX3RleHRpbnB1dFwiKS52YWwoKSwgXCIrXCIpKS5rZXl1cCgpO1xuICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgLy9tYXJnaW4gcmVzaXppbmcga2V5cyAodXAgYW5kIHJpZ2h0IG1hcmdpbnMpXG4gICAgICAgICAgICBlbHNlIGlmICgoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSAmJiBlLmtleUNvZGUgPT09IDM5KSB7IC8vY3RybC9jbWQgKyByaWdodFxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkKFwiI3JpZ2h0X21hcmdpbl90ZXh0aW5wdXRcIikudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKFwiI3JpZ2h0X21hcmdpbl90ZXh0aW5wdXRcIikudmFsKCksIFwiLVwiKSkua2V5dXAoKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICgoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSAmJiBlLmtleUNvZGUgPT09IDM3KSB7IC8vY3RybC9jbWQgKyBsZWZ0XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICQoXCIjcmlnaHRfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoa2V5Ym9hcmRfaW5wdXRzLmFkalZhbHVlKCQoXCIjcmlnaHRfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoKSwgXCIrXCIpKS5rZXl1cCgpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpICYmIGUua2V5Q29kZSA9PT0gMzgpIHsgLy9jdHJsL2NtZCArIHVwXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICQoXCIjdG9wX21hcmdpbl90ZXh0aW5wdXRcIikudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKFwiI3RvcF9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbCgpLCBcIi1cIikpLmtleXVwKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJiYgZS5rZXlDb2RlID09PSA0MCkgeyAvL2N0cmwvY21kICsgZG93blxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkKFwiI3RvcF9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbChrZXlib2FyZF9pbnB1dHMuYWRqVmFsdWUoJChcIiN0b3BfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoKSwgXCIrXCIpKS5rZXl1cCgpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vbWFyZ2luIHJlc2l6aW5nIGtleXMgKGJvdHRvbSBhbmQgbGVmdCBtYXJnaW5zXG4gICAgICAgICAgICBlbHNlIGlmIChldmVudC5hbHRLZXkgJiYgZS5rZXlDb2RlID09PSAzOSkgeyAvL2FsdCArIHJpZ2h0XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICQoXCIjbGVmdF9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbChrZXlib2FyZF9pbnB1dHMuYWRqVmFsdWUoJChcIiNsZWZ0X21hcmdpbl90ZXh0aW5wdXRcIikudmFsKCksIFwiK1wiKSkua2V5dXAoKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5hbHRLZXkgJiYgZS5rZXlDb2RlID09PSAzNykgeyAvL2FsdCArIGxlZnRcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJChcIiNsZWZ0X21hcmdpbl90ZXh0aW5wdXRcIikudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKFwiI2xlZnRfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoKSwgXCItXCIpKS5rZXl1cCgpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmFsdEtleSAmJiBlLmtleUNvZGUgPT09IDM4KSB7IC8vYWx0ICsgdXBcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJChcIiNib3R0b21fbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoa2V5Ym9hcmRfaW5wdXRzLmFkalZhbHVlKCQoXCIjYm90dG9tX21hcmdpbl90ZXh0aW5wdXRcIikudmFsKCksIFwiK1wiKSkua2V5dXAoKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5hbHRLZXkgJiYgZS5rZXlDb2RlID09PSA0MCkgeyAvL2FsdCArIGRvd25cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJChcIiNib3R0b21fbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoa2V5Ym9hcmRfaW5wdXRzLmFkalZhbHVlKCQoXCIjYm90dG9tX21hcmdpbl90ZXh0aW5wdXRcIikudmFsKCksIFwiLVwiKSkua2V5dXAoKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvL3NpZGUgbmF2IHVwIGFuZCBkb3duIGtleXNcbiAgICAgICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzgpIHsgLy91cFxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkKFwiLnNlbGVjdGVkX3RhYlwiKS5wcmV2KCkuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCkgeyAvL2Rvd25cbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAga2V5Ym9hcmRfaW5wdXRzLmNsaWNrTmV4dChcInRhYlwiLCBcInNlbGVjdGVkX3RhYlwiKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvL2NoYXJ0IHR5cGUgKGN5Y2xlIHRocm91Z2gpICAgIFxuICAgICAgICAgICAgZWxzZSBpZiAoZS5zaGlmdEtleSAmJiBlLmtleUNvZGUgPT09IDY3KSB7IC8vc2hpZnQgKyBjIFxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBrZXlib2FyZF9pbnB1dHMuY2xpY2tOZXh0KFwiY2hhcnRfdHlwZV9pY29uXCIsIFwic2VsZWN0ZWRfY2hhcnRfdHlwZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2RhdGEgbG9hZCAtIHNlcmllcyBuYW1lcyBmcm9tIGNvbHVtbnMgLyByb3dzXG4gICAgICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT09IDkpIHsgLy90YWJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAga2V5Ym9hcmRfaW5wdXRzLmNsaWNrTmV4dChcImxvYWRfc2VyaWVzX2Zyb21faWNvblwiLCBcInNlbGVjdGVkX2xvYWRfc2VyaWVzX2Zyb21cIik7XG4gICAgICAgICAgICAgICAgdXBkYXRlX2luZGl2aWR1YWxfc2VyaWVzLnBvcHVsYXRlRm9ybShjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIC8vY29sb3IgdGVtcGxhdGUgKGN5Y2xlIHRocm91Z2gpICAgIFxuICAgICAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09PSA2NykgeyAvL2NcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAga2V5Ym9hcmRfaW5wdXRzLmNsaWNrTmV4dChcImNvbG9yX3BhbGV0dGVfcm93XCIsIFwiY29sb3JfcGFsZXR0ZV9zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9zaWRlIG5hdiBzaG9ydGN1dCBrZXlzXG4gICAgICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT09IDgzKSB7IC8vc1xuICAgICAgICAgICAgICAgICQoXCIjdGFiX2NoYXJ0X3RlbXBsYXRlXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gNjgpIHsgLy9kXG4gICAgICAgICAgICAgICAgJChcIiN0YWJfZGF0YVwiKS5jbGljaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDczKSB7IC8vaVxuICAgICAgICAgICAgICAgICQoXCIjdGFiX3Nlcmllc19vcHRpb25zXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gNzYpIHsgLy9sXG4gICAgICAgICAgICAgICAgJChcIiN0YWJfY2hhcnRfbGVnZW5kXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gODgpIHsgLy94XG4gICAgICAgICAgICAgICAgJChcIiN0YWJfY2hhcnRfeF9heGlzXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gODkpIHsgLy95XG4gICAgICAgICAgICAgICAgJChcIiN0YWJfY2hhcnRfeV9heGlzXCIpLmNsaWNrKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gODQpIHsgLy90XG4gICAgICAgICAgICAgICAgJChcIiN0YWJfY2hhcnRfdG9vbHRpcFwiKS5jbGljaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDc4KSB7IC8vblxuICAgICAgICAgICAgICAgICQoXCIjdGFiX2NoYXJ0X2NyZWRpdHNcIikuY2xpY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA2OSkgeyAvLzY5XG4gICAgICAgICAgICAgICAgJChcIiN0YWJfY2hhcnRfZXh0cmFfb3B0aW9uc1wiKS5jbGljaygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKiogaW4gbnVtYmVyIGVudHJ5IGlucHV0cywgcHJlc3NpbmcgdXAgb3IgZG93biB3aWxsIGFkanVzdCB2YWx1ZSAqL1xuICAgIG51bWJlckNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzgpIHsgLy91cCBcbiAgICAgICAgICAgICQodGhpcykudmFsKGtleWJvYXJkX2lucHV0cy5hZGpWYWx1ZSgkKHRoaXMpLnZhbCgpLCBcIitcIikpO1xuICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gNDApIHsgLy9kb3duXG4gICAgICAgICAgICAkKHRoaXMpLnZhbChrZXlib2FyZF9pbnB1dHMuYWRqVmFsdWUoJCh0aGlzKS52YWwoKSwgXCItXCIpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogaW5pdGlhbGl6ZSBsaXN0ZW50ZXJzIFxuICAgIHdoZW4gYSBudW1iZXIgZW50cnkgaW5wdXQgaXMgZm9jdXNlZCBvbiwgYXR0YWNoIHRob3NlIGV2ZW50IGxpc3RlbmVyc1xuICAgIHdoZW4gaXQgbGVhdmVzIHRvIG1haW4gZG9jdW1lbnQsIGF0dGFjaCB0aG9zZVxuICAgICoqL1xuICAgIGluaXRMaXN0ZW5lcnM6IGZ1bmN0aW9uIChjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgJChcImlucHV0LCB0ZXh0YXJlYVwiKS5mb2N1cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS51bmJpbmQoKTtcbiAgICAgICAgICAgICQodGhpcykub2ZmKFwia2V5ZG93blwiKTsgLy9zbyBpdCBkb2VzbnQgZHVwbGljYXRlIHdoZW4gbW92aW5nIGZyb20gb25lIGVudHJ5IHRvIGFub3RoZXJcbiAgICAgICAgICAgICQoXCIubnVtYmVyX2VudHJ5XCIpLm9uKFwia2V5ZG93blwiLCBrZXlib2FyZF9pbnB1dHMubnVtYmVyQ2hhbmdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoXCJpbnB1dCwgdGV4dGFyZWFcIikuYmx1cihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9mZihcImtleWRvd25cIik7XG4gICAgICAgICAgICAvL3JlaW5pdCBzaWRlIHRhYiBuYXYgc2hvcnRjdXRzXG4gICAgICAgICAgICBrZXlib2FyZF9pbnB1dHMuc2lkZU5hdlRhYlNob3J0Y3V0cyhjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgICAgICB9KTtcblxuXG4gICAgfVxuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlib2FyZF9pbnB1dHM7IiwidmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG4vKiogb2JqZWN0IHRoYXQgY29udGFpbnMgZnVuY3Rpb25zIGZvciBhbGwgdGhlIG5hdmlnYXRpb24sIGllIGNoYW5naW5nIGJldHdlZW4gb3B0aW9ucyBhbmQgY2hhcnQgdHlwZXMgXG5AbmFtZXNwYWNlXG4qL1xudmFyIG5hdmlnYXRpb25fc2V0dXAgPSB7XG5cbiAgICAvKiogd2hlbiB0YWJzIG9uIGxlZnQgc2lkZSBuYXYgYmFyIGFyZSBjbGlja2VkLCBvcHRpb25zIGRpc3BsYXllZCBhcmUgY2hhbmdlZCAqKi9cbiAgICBzaWRlTmF2VGFic0NoYW5nZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQoXCIjc2lkZV9uYXZfdGFicyAudGFiXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vY2hhbmdlIHNlbGVjdGVkIG1lbnUgdGFiXG4gICAgICAgICAgICAkKFwiI3NpZGVfbmF2X3RhYnMgLnNlbGVjdGVkX3RhYlwiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkX3RhYlwiKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJzZWxlY3RlZF90YWJcIik7XG5cbiAgICAgICAgICAgIC8vY2hhbmdlIGRpc3BsYXkgZGl2IHNob3dpbmdcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZElEID0gXCIjXCIgKyAkKHRoaXMpLmF0dHIoXCJpZFwiKS5yZXBsYWNlKFwidGFiXCIsIFwiZGlzcGxheVwiKTtcbiAgICAgICAgICAgICQoXCIjc2lkZV9kaXNwbGF5IC5zZWxlY3RlZF9kaXNwbGF5XCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRfZGlzcGxheVwiKTtcbiAgICAgICAgICAgICQoc2VsZWN0ZWRJRCkuYWRkQ2xhc3MoXCJzZWxlY3RlZF9kaXNwbGF5XCIpO1xuXG4gICAgICAgIH0pO1xuICAgIH0sXG5cblxuICAgIC8qKiB3aGVuIGNoYXJ0IGNvZGUgaXMgZW50ZXJlZCwgdXBkYXRlICoqL1xuICAgIGNoYXJ0T3V0cHV0Q29kZUZvY3VzOiBmdW5jdGlvbiAoYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgJChcIiNjaGFydF9vdXRwdXRfY29kZVwiKS5ob3ZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB1dGlsc19tYWluLndyaXRlQ29kZShhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgfSxcblxuXG4gICAgLyoqIHdoZW4gY2hhcnQgdHlwZSBpY29uIGlzIGNsaWNrZWQgYW5kIGNoYW5nZWQgKiovXG4gICAgY2hhcnRUeXBlSWNvbkNoYW5nZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQoXCIjY2hhcnRfdHlwZV9pY29ucyAuY2hhcnRfdHlwZV9pY29uXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vY2hhbmdlIHNlbGVjdGVkIGljb25cbiAgICAgICAgICAgICQoXCIjY2hhcnRfdHlwZV9pY29ucyAuY2hhcnRfdHlwZV9pY29uXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRfY2hhcnRfdHlwZVwiKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJzZWxlY3RlZF9jaGFydF90eXBlXCIpO1xuICAgICAgICAgICAgdmFyIGNoYXJ0X3R5cGUgPSAkKHRoaXMpLmRpdlZhbCgpO1xuXG4gICAgICAgICAgICAvL2hpZGUgc3R1ZmYgdW5yZWxhdGVkIHRvIHRoYXQgY2hhcnQgdHlwZSAobGluZSwgYmFyLCBjb2x1bW4pXG4gICAgICAgICAgICBpZiAoW1wiYXJlYVwiLCBcImxpbmVcIiwgXCJiYXJcIiwgXCJjb2x1bW5cIiwgXCJzdGFja2VkX2NvbHVtblwiLCBcInN0YWNrZWRfYmFyXCJdLmluZGV4T2YoY2hhcnRfdHlwZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICQoXCIuc2hvd19saW5lLCAuc2hvd19iYXIsIC5zaG93X2NvbHVtblwiKS5zaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoXCIuc2hvd19saW5lLCAuc2hvd19iYXIsIC5zaG93X2NvbHVtblwiKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGFydF90eXBlID09PSBcInNjYXR0ZXJcIikge1xuICAgICAgICAgICAgICAgICQoXCIuc2hvd19zY2F0dGVyXCIpLnNob3coKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChcIi5zaG93X3NjYXR0ZXJcIikuaGlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgXG4gICAgXG5cbiAgICAvKiogd2hlbiBjbGVhciBuZXh0IHRleHQgYXJlYSBidXR0b24gKFgpIGlzIGNsaWNrZWQsIGZpbmQgYW5kIGNsZWFyIHRoZSB0ZXh0IG9mIHRoZSBuZXh0IHRleHRhcmVhICovXG4gICAgY2xlYXJOZXh0VGV4dGFyZWFDbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAkKFwiLmNsZWFyX25leHRfdGV4dGFyZWFfYnV0dG9uXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykubmV4dChcInRleHRhcmVhXCIpLnZhbChcIlwiKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuXG4gICAgLyoqIHdoZW4gI2NvbG9yX3BhbGV0dGVfcmV2ZXJzZV9pY29uIGlzIGNsaWNrZWQsIHJldmVyc2UgdGhlIG9yZGVycyBvZiBlYWNoIHBhbGV0dGUgKi9cbiAgICBjb2xvclBhbGV0dGVSZXZlcnNlSWNvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoXCIjY29sb3JfcGFsZXR0ZV9yZXZlcnNlX2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJChcIi5jb2xvcl9wYWxldHRlX3Jvd1wiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc19yb3cgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBjb2xvcl9jZWxscyA9IHRoaXNfcm93LmNoaWxkcmVuKCcuY29sb3JfcGFsZXR0ZV9jZWxsJyk7XG4gICAgICAgICAgICAgICAgdGhpc19yb3cucHJlcGVuZChjb2xvcl9jZWxscy5nZXQoKS5yZXZlcnNlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKFwiLmNvbG9yX3BhbGV0dGVfc2VsZWN0ZWRcIikuY2xpY2soKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKiB3aGVuIC5jb2xvcl9wYWxldHRlX3JvdyBpcyBjbGlja2VkLCBjaGFuZ2UgY29sb3JzICovXG4gICAgY29sb3JQYWxldHRlUm93Q2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChcIi5jb2xvcl9wYWxldHRlX3Jvd1wiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKFwiLmNvbG9yX3BhbGV0dGVfcm93XCIpLnJlbW92ZUNsYXNzKFwiY29sb3JfcGFsZXR0ZV9zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJjb2xvcl9wYWxldHRlX3NlbGVjdGVkXCIpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICAvKiogd2hlbiBhIGhlbHAgaWNvbiBpcyBjbGlja2VkICovXG5cbiAgICBoZWxwSWNvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJChcIi5oZWxwX2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImhlbHBfb25cIik7XG4gICAgICAgICAgICAkKFwiLm5vdGVzXCIsICQodGhpcykucGFyZW50cyhcIi5kaXNwbGF5LCAjbWFpbl9yZXN1bHRfY29kZV9kaXZcIikpLnRvZ2dsZSgpO1xuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICAvKiogd2hlbiBhIGdldCBjb2RlIGJ1dHRvbiBpcyBjbGlja2VkLCB1cGRhdGUgYW5kIHNob3cgdGhlIGNvZGUgYXJlYS4gKi9cblxuICAgIGdldENvZGVCdXR0b25DbGljazogZnVuY3Rpb24gKGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgJChcIiNnZXRfY29kZV9idXR0b25cIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgdmFyICRnZXRfY29kZV9zcGFuID0gJChcIiNnZXRfY29kZV90ZXh0XCIpO1xuICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImNvZGVfb25cIik7XG4gICAgICAgICAgICAkKFwiI21haW5fcmVzdWx0X2NvZGVfZGl2XCIpLnNsaWRlVG9nZ2xlKDEwMCk7XG4gICAgICAgICAgICBpZiAoJGdldF9jb2RlX3NwYW4udGV4dCgpID09PSBcIkdldCBjb2RlXCIpIHtcbiAgICAgICAgICAgICAgICB1dGlsc19tYWluLndyaXRlQ29kZShhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgJGdldF9jb2RlX3NwYW4udGV4dChcIkhpZGUgY29kZVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGdldF9jb2RlX3NwYW4udGV4dChcIkdldCBjb2RlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICAvKiogd2hlbiBcIkxvYWQgc2VyaWVzIG5hbWVzIGZyb206XCIgaWNvbnMgYXJlIGNsaWNrZWQgYW5kIGNoYW5nZWQgKi9cbiAgICBsb2FkU2VyaWVzRnJvbUljb246IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkKFwiI3RhYmxlX2lucHV0X2xvYWRfc2VyaWVzX2Zyb21faWNvbnMgLmxvYWRfc2VyaWVzX2Zyb21faWNvblwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL2NoYW5nZSBzZWxlY3RlZCBpY29uXG4gICAgICAgICAgICAkKFwiI3RhYmxlX2lucHV0X2xvYWRfc2VyaWVzX2Zyb21faWNvbnMgLmxvYWRfc2VyaWVzX2Zyb21faWNvblwiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkX2xvYWRfc2VyaWVzX2Zyb21cIik7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwic2VsZWN0ZWRfbG9hZF9zZXJpZXNfZnJvbVwiKTtcblxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIElOSVQgQUxMIE5BVklHQVRJT04sIGNhbGxlZCBmcm9tIGFwcC5qcyB3aGVuIHBhZ2UgaXMgbG9hZGVkICoqL1xuICAgIGluaXRBbGxOYXZpZ2F0aW9uOiBmdW5jdGlvbiAoYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgICAgICBuYXZpZ2F0aW9uX3NldHVwLnNpZGVOYXZUYWJzQ2hhbmdlKCk7XG4gICAgICAgIG5hdmlnYXRpb25fc2V0dXAuY2hhcnRUeXBlSWNvbkNoYW5nZSgpO1xuICAgICAgICBuYXZpZ2F0aW9uX3NldHVwLmhlbHBJY29uQ2xpY2soKTtcbiAgICAgICAgbmF2aWdhdGlvbl9zZXR1cC5nZXRDb2RlQnV0dG9uQ2xpY2soYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgICAgICBuYXZpZ2F0aW9uX3NldHVwLmNoYXJ0T3V0cHV0Q29kZUZvY3VzKGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICAgICAgbmF2aWdhdGlvbl9zZXR1cC5sb2FkU2VyaWVzRnJvbUljb24oKTtcbiAgICAgICAgbmF2aWdhdGlvbl9zZXR1cC5jbGVhck5leHRUZXh0YXJlYUNsaWNrKCk7XG4gICAgICAgIG5hdmlnYXRpb25fc2V0dXAuY29sb3JQYWxldHRlUm93Q2xpY2soKTtcbiAgICAgICAgbmF2aWdhdGlvbl9zZXR1cC5jb2xvclBhbGV0dGVSZXZlcnNlSWNvbkNsaWNrKCk7XG5cbiAgICB9XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRpb25fc2V0dXA7IiwiLyoqIFxuICogUGFyc2luZyBmdW5jdGlvbiBmb3IgYnViYmxlIGNoYXJ0c1xuICogQG1vZHVsZVxuICogQHBhcmFtIGlucHV0IHtlbGVtZW50fSBpbnB1dCBqcXVlcnkgdGFibGUgZWxlbWVudCByZXRyaWV2ZWQgZnJvbSB0ZXh0YXJlYVxuICogQHBhcmFtIGNoYXJ0X3R5cGUge3N0cmluZ30gdHlwZSBvZiBjaGFydCAobGluZSwgYmFyIGV0Yy4pXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBPYmplY3Qgd2l0aCBjaGFydCB0aXRsZSwgWC1heGlzIGNhdGVnb3JpZXMgYW5kIHNlcmllcyBhcnJheSBvZiBvYmplY3RzXG4gKi9cbnZhciBwYXJzZUZvckJ1YmJsZSA9IGZ1bmN0aW9uIChpbnB1dCwgY2hhcnRfdHlwZSwgY29sb3JzKSB7XG4gICAgdmFyIG91dHB1dCA9IHt9O1xuICAgIG91dHB1dC54X2F4aXNfY2F0ZWdvcmllcyA9IHVuZGVmaW5lZDsgLy9yZXNldHMgdGhpcyBpbiBjYXNlIHRoZXJlIHdlcmUgcHJldmlvdXMgY2F0ZWdvcmllc1xuXG4gICAgLy9sb2FkIHNlcmllcyBuYW1lcyBmcm9tIHJvdyBoZWFkcywgYW5kIGRhdGEgZnJvbSByb3cgdGRzXG4gICAgb3V0cHV0LnNlcmllcyA9IFtdO1xuICAgICQoXCJ0Ym9keSB0clwiLCBpbnB1dCkuZWFjaChmdW5jdGlvbiAoaSkge1xuXG4gICAgICAgIHZhciB0aGlzX3JvdyA9ICQodGhpcyk7XG5cbiAgICAgICAgdmFyIHNlcmllc09iaiA9IHtcbiAgICAgICAgICAgIG5hbWU6ICQudHJpbSgkKFwidGg6ZXEoMClcIiwgdGhpc19yb3cpLnRleHQoKSksXG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIHR5cGU6IGNoYXJ0X3R5cGUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDAsXG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yc1tpXSxcbiAgICAgICAgICAgIF9zeW1ib2xJbmRleDogaVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vZ2V0IGRhdGEgdmFsdWVzIGZyb20gZWFjaCByb3cncyB0ZCBjZWxscyAoZXZlcnkgdGhpcmQgY2VsbCBmb3IgeHl6IGdyb3VwcylcbiAgICAgICAgJChcInRkOm50aC1jaGlsZCgzbiAtIDEpXCIsIHRoaXNfcm93KS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgeCA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKTtcbiAgICAgICAgICAgIHZhciB5ID0gTnVtYmVyKCQudHJpbSgkKHRoaXMpLm5leHQoKS50ZXh0KCkpKTtcbiAgICAgICAgICAgIHZhciB6ID0gTnVtYmVyKCQudHJpbSgkKHRoaXMpLm5leHQoKS5uZXh0KCkudGV4dCgpKSk7XG4gICAgICAgICAgICB2YXIgeHl6X2FyciA9IFt4LCB5LCB6XTtcbiAgICAgICAgICAgIHNlcmllc09iai5kYXRhLnB1c2goeHl6X2Fycik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG91dHB1dC5zZXJpZXMucHVzaChzZXJpZXNPYmopO1xuXG4gICAgfSk7XG5cblxuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlRm9yQnViYmxlOyIsIi8qKiBcbiAqIFBhcnNpbmcgZnVuY3Rpb24gZm9yIHNjYXR0ZXIgY2hhcnRzXG4gKiBAbW9kdWxlXG4gKiBAcGFyYW0gaW5wdXQge2VsZW1lbnR9IGlucHV0IGpxdWVyeSB0YWJsZSBlbGVtZW50IHJldHJpZXZlZCBmcm9tIHRleHRhcmVhXG4gKiBAcGFyYW0gY2hhcnRfdHlwZSB7c3RyaW5nfSB0eXBlIG9mIGNoYXJ0IChsaW5lLCBiYXIgZXRjLilcbiAqIEByZXR1cm5zIHtvYmplY3R9IE9iamVjdCB3aXRoIGNoYXJ0IHRpdGxlLCBYLWF4aXMgY2F0ZWdvcmllcyBhbmQgc2VyaWVzIGFycmF5IG9mIG9iamVjdHNcbiAqL1xudmFyIHBhcnNlRm9yU2NhdHRlciA9IGZ1bmN0aW9uIChpbnB1dCwgY2hhcnRfdHlwZSwgY29sb3JzKSB7XG4gICAgdmFyIG91dHB1dCA9IHt9O1xuICAgIG91dHB1dC54X2F4aXNfY2F0ZWdvcmllcyA9IHVuZGVmaW5lZDsgLy9yZXNldHMgdGhpcyBpbiBjYXNlIHRoZXJlIHdlcmUgcHJldmlvdXMgY2F0ZWdvcmllc1xuXG4gICAgLy9sb2FkIHNlcmllcyBuYW1lcyBmcm9tIHJvdyBoZWFkcywgYW5kIGRhdGEgZnJvbSByb3cgdGRzXG4gICAgb3V0cHV0LnNlcmllcyA9IFtdO1xuICAgICQoXCJ0Ym9keSB0clwiLCBpbnB1dCkuZWFjaChmdW5jdGlvbiAoaSkge1xuXG4gICAgICAgIHZhciB0aGlzX3JvdyA9ICQodGhpcyk7XG5cbiAgICAgICAgdmFyIHNlcmllc09iaiA9IHtcbiAgICAgICAgICAgIG5hbWU6ICQudHJpbSgkKFwidGg6ZXEoMClcIiwgdGhpc19yb3cpLnRleHQoKSksXG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIHR5cGU6IGNoYXJ0X3R5cGUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDAsXG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yc1tpXSxcbiAgICAgICAgICAgIF9zeW1ib2xJbmRleDogaVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vZ2V0IGRhdGEgdmFsdWVzIGZyb20gZWFjaCByb3cncyB0ZCBjZWxsc1xuICAgICAgICAkKFwidGQ6ZXZlblwiLCB0aGlzX3JvdykuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgdmFyIHggPSBOdW1iZXIoJC50cmltKCQodGhpcykudGV4dCgpKSk7XG4gICAgICAgICAgICB2YXIgeSA9IE51bWJlcigkLnRyaW0oJCh0aGlzKS5uZXh0KCkudGV4dCgpKSk7XG4gICAgICAgICAgICB2YXIgeHlfYXJyID0gW3gsIHldO1xuICAgICAgICAgICAgc2VyaWVzT2JqLmRhdGEucHVzaCh4eV9hcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBvdXRwdXQuc2VyaWVzLnB1c2goc2VyaWVzT2JqKTtcblxuICAgIH0pO1xuXG5cbiAgICByZXR1cm4gb3V0cHV0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUZvclNjYXR0ZXI7IiwiLyoqIFxuICogUGFyc2luZyBmdW5jdGlvbiBmb3IgdHlwaWNhbCBjaGFydCB0eXBlcyAobGluZSwgYmFyLCBjb2x1bW4pIFxuICogQG1vZHVsZVxuICogQHBhcmFtIGlucHV0IHtlbGVtZW50fSBpbnB1dCBqcXVlcnkgdGFibGUgZWxlbWVudCByZXRyaWV2ZWQgZnJvbSB0ZXh0YXJlYVxuICogQHBhcmFtIGxvYWRfc2VyaWVzX2Zyb20ge3N0cmluZ30gY29sdW1uX2hlYWRzIG9yIGNvbHVtbl9yb3dzXG4gKiBAcGFyYW0gY2hhcnRfdHlwZSB7c3RyaW5nfSB0eXBlIG9mIGNoYXJ0IChsaW5lLCBiYXIgZXRjLilcbiAqIEByZXR1cm5zIHtvYmplY3R9IE9iamVjdCB3aXRoIGNoYXJ0IHRpdGxlLCBYLWF4aXMgY2F0ZWdvcmllcyBhbmQgc2VyaWVzIGFycmF5IG9mIG9iamVjdHNcbiAqL1xuXG5cbnZhciBwYXJzZUZvclR5cGljYWxDaGFydCA9IGZ1bmN0aW9uIChpbnB1dCwgbG9hZF9zZXJpZXNfZnJvbSwgY2hhcnRfdHlwZSwgbGVnZW5kX3RvZ2dsZV9lbmFibGVkLCBjb2xvcnMpIHtcblxuICAgIHZhciB0eXBlID0gY2hhcnRfdHlwZS5yZXBsYWNlKFwic3RhY2tlZF9cIiwgXCJcIik7XG5cbiAgICB2YXIgb3V0cHV0ID0ge307XG5cbiAgICAvKiogSWYgbG9hZGluZyBzZXJpZXMgbmFtZXMgZnJvbSBjb2x1bW4gaGVhZHMgaXMgc2VsZWN0ZWQqL1xuICAgIGlmIChsb2FkX3Nlcmllc19mcm9tID09PSBcImNvbHVtbl9oZWFkc1wiKSB7XG4gICAgICAgIC8vbG9hZCB4LWF4aXMgY2F0ZWdvcmllcyBmcm9tIHJvdyBoZWFkc1xuICAgICAgICBvdXRwdXQueF9heGlzX2NhdGVnb3JpZXMgPSBbXTtcbiAgICAgICAgJChcInRib2R5IHRoXCIsIGlucHV0KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG91dHB1dC54X2F4aXNfY2F0ZWdvcmllcy5wdXNoKCQudHJpbSgkKHRoaXMpLnRleHQoKSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2xvYWQgc2VyaWVzIG9iamVjdCBuYW1lcyBmcm9tIGNvbHVtbiBoZWFkcywgYW5kIGRhdGEgZnJvbSBlYWNoIGNvbHVtbiB0ZHNcbiAgICAgICAgb3V0cHV0LnNlcmllcyA9IFtdO1xuXG4gICAgICAgICQoXCJ0aGVhZCB0cjpsYXN0IHRoOmd0KDApXCIsIGlucHV0KS5lYWNoKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgc2VyaWVzT2JqID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICQudHJpbSgkLnRyaW0oJCh0aGlzKS50ZXh0KCkpKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnNbaV0sXG4gICAgICAgICAgICAgICAgX3N5bWJvbEluZGV4OiBpLFxuICAgICAgICAgICAgICAgIHN0YWNraW5nOiBbXCJhcmVhXCIsIFwic3RhY2tlZF9iYXJcIiwgXCJzdGFja2VkX2NvbHVtblwiXS5pbmRleE9mKGNoYXJ0X3R5cGUpID4gLTEgPyBcInN0YWNrZWRcIiA6IG51bGwsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogaSA+IDAgJiYgbGVnZW5kX3RvZ2dsZV9lbmFibGVkID09PSB0cnVlID8gZmFsc2UgOiB0cnVlXG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vZGF0YSBmcm9tIGVhY2ggY29sdW1uJ3MgdGRzXG4gICAgICAgICAgICAkKFwidGJvZHkgdHJcIiwgaW5wdXQpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0aGlzX3JvdyA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgJChcInRkOmVxKFwiICsgaSArIFwiKVwiLCB0aGlzX3JvdykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllc09iai5kYXRhLnB1c2goJCh0aGlzKS5nZXROdW1iZXIoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3V0cHV0LnNlcmllcy5wdXNoKHNlcmllc09iaik7XG5cbiAgICAgICAgfSk7XG5cblxuXG4gICAgICAgIC8qKiBFbHNlIGlmIGxvYWRpbmcgc2VyaWVzIG5hbWVzIGZyb20gcm93IGhlYWRzIGlzIHNlbGVjdGVkKi9cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vbG9hZCB4LWF4aXMgY2F0ZWdvcmllcyBmcm9tIGNvbHVtbiBoZWFkc1xuICAgICAgICBvdXRwdXQueF9heGlzX2NhdGVnb3JpZXMgPSBbXTtcbiAgICAgICAgJChcInRoZWFkIHRoOmd0KDApXCIsIGlucHV0KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG91dHB1dC54X2F4aXNfY2F0ZWdvcmllcy5wdXNoKCQudHJpbSgkKHRoaXMpLnRleHQoKSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2xvYWQgc2VyaWVzIG9iamVjdCBuYW1lcyBmcm9tIHJvdyBoZWFkcywgYW5kIGRhdGEgZnJvbSByb3cgdGRzXG4gICAgICAgIG91dHB1dC5zZXJpZXMgPSBbXTtcbiAgICAgICAgJChcInRib2R5IHRyXCIsIGlucHV0KS5lYWNoKGZ1bmN0aW9uIChpKSB7XG5cbiAgICAgICAgICAgIHZhciB0aGlzX3JvdyA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHZhciBzZXJpZXNPYmogPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJC50cmltKCQoXCJ0aDplcSgwKVwiLCB0aGlzX3JvdykudGV4dCgpKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcnNbaV0sXG4gICAgICAgICAgICAgICAgX3N5bWJvbEluZGV4OiBpLFxuICAgICAgICAgICAgICAgIHN0YWNraW5nOiBbXCJhcmVhXCIsIFwic3RhY2tlZF9iYXJcIiwgXCJzdGFja2VkX2NvbHVtblwiXS5pbmRleE9mKGNoYXJ0X3R5cGUpID4gLTEgPyBcInN0YWNrZWRcIiA6IG51bGwsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogaSA+IDAgJiYgbGVnZW5kX3RvZ2dsZV9lbmFibGVkID09PSB0cnVlID8gZmFsc2UgOiB0cnVlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL2dldCBkYXRhIHZhbHVlcyBmcm9tIGVhY2ggcm93J3MgdGQgY2VsbHNcbiAgICAgICAgICAgICQoXCJ0ZFwiLCB0aGlzX3JvdykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VyaWVzT2JqLmRhdGEucHVzaCgkKHRoaXMpLmdldE51bWJlcigpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBvdXRwdXQuc2VyaWVzLnB1c2goc2VyaWVzT2JqKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuXG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VGb3JUeXBpY2FsQ2hhcnQ7IiwiLyogdGFrZXMgdGhlIHRhYmxlIGh0bWwgZnJvbSBhIGdpdmVuIHRleHRhcmVhIGFuZCBwYXJzZXMgaXQgaW50byBhbiBvYmplY3QsIGRlcGVuZGluZyBvbiB1c2Vlci1zZWxlY3RlZCBpbnB1dHMgKi9cblxuLyogcGFyc2luZyBmdW5jdGlvbiBmb3IgdHlwaWNhbCBjaGFydCB0eXBlcyAobGluZSwgYmFyLCBjb2x1bW4pICovXG52YXIgcGFyc2VGb3JUeXBpY2FsQ2hhcnQgPSByZXF1aXJlKFwiLi9wYXJzZV9mb3JfdHlwaWNhbF9jaGFydC5qc1wiKTtcblxuLyogcGFyc2luZyBmdW5jdGlvbiBmb3Igc2NhdHRlciBjaGFydHMgKi9cbnZhciBwYXJzZUZvclNjYXR0ZXIgPSByZXF1aXJlKFwiLi9wYXJzZV9mb3Jfc2NhdHRlci5qc1wiKTtcblxuLyogcGFyc2luZyBmdW5jdGlvbiBmb3IgYnViYmxlIGNoYXJ0cyAqL1xudmFyIHBhcnNlRm9yQnViYmxlID0gcmVxdWlyZShcIi4vcGFyc2VfZm9yX2J1YmJsZS5qc1wiKTtcblxuXG5cbi8qKiBwYXJzaW5nIGZ1bmN0aW9uIGZvciBkcmlsbGRvd24gY2hhcnRzICovXG52YXIgcGFyc2VGb3JEcmlsbGRvd24gPSBmdW5jdGlvbiAoaW5wdXQpIHt9O1xuXG5cbi8qKiBwYXJzaW5nIGZ1bmN0aW9uIGZvciBtYXAgY2hhcnRzICovXG52YXIgcGFyc2VGb3JNYXAgPSBmdW5jdGlvbiAoaW5wdXQpIHt9O1xuXG5cblxuLyoqIFxuKiBGdW5jdGlvbiB0aGF0IGRlY2lkZXMgd2hpY2ggcGFyc2UgZnVuY3Rpb24gdG8gcnVuLCBkZXBlbmRpbmcgb24gY2hhcnQgdHlwZVxuKiBAbW9kdWxlXG4qIEBwYXJhbSBpbnB1dCB7ZWxlbWVudH0gaW5wdXQganF1ZXJ5IHRhYmxlIGVsZW1lbnQgcmV0cmlldmVkIGZyb20gdGV4dGFyZWFcbiogQHBhcmFtIGxvYWRfc2VyaWVzX2Zyb20ge3N0cmluZ30gY29sdW1uX2hlYWRzIG9yIGNvbHVtbl9yb3dzXG4qIEBwYXJhbSBjaGFydF90eXBlIHtzdHJpbmd9IHR5cGUgb2YgY2hhcnQgKGxpbmUsIGJhciBldGMuKVxuKiBAcmV0dXJucyB7b2JqZWN0fSBPYmplY3Qgd2l0aCBjaGFydCB0aXRsZSwgWC1heGlzIGNhdGVnb3JpZXMgYW5kIHNlcmllcyBhcnJheSBvZiBvYmplY3RzXG4qL1xuXG52YXIgcGFyc2VUYWJsZUlucHV0ID0gZnVuY3Rpb24gKGlucHV0LCBsb2FkX3Nlcmllc19mcm9tLCBjaGFydF90eXBlLCBsZWdlbmRfdG9nZ2xlX2VuYWJsZWQsIGNvbG9ycykge1xuXG4gICAgdmFyIG91dHB1dDtcbiAgICAvKiogRGVwZW5kaW5nIG9uIHRoZSBjaGFydCB0eXBlLCBzdGFydCB0aGF0IHBhcnNpbmcgKi9cbiAgICBpZiAoW1wiYXJlYVwiLCBcImxpbmVcIiwgXCJiYXJcIixcInN0YWNrZWRfYmFyXCIsIFwiY29sdW1uXCIsIFwic3RhY2tlZF9jb2x1bW5cIl0uaW5kZXhPZihjaGFydF90eXBlKSA+IC0xKSB7XG4gICAgICAgIG91dHB1dCA9IHBhcnNlRm9yVHlwaWNhbENoYXJ0KGlucHV0LCBsb2FkX3Nlcmllc19mcm9tLCBjaGFydF90eXBlLCBsZWdlbmRfdG9nZ2xlX2VuYWJsZWQsIGNvbG9ycyk7XG4gICAgfSBlbHNlIGlmIChjaGFydF90eXBlID09IFwiYnViYmxlXCIpIHtcbiAgICAgICAgb3V0cHV0ID0gcGFyc2VGb3JCdWJibGUoaW5wdXQsIGNoYXJ0X3R5cGUsIGNvbG9ycyk7XG4gICAgfSBlbHNlIGlmIChjaGFydF90eXBlID09IFwic2NhdHRlclwiKSB7XG4gICAgICAgIG91dHB1dCA9IHBhcnNlRm9yU2NhdHRlcihpbnB1dCwgY2hhcnRfdHlwZSwgY29sb3JzKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJ0X3R5cGUgPT0gXCJkcmlsbGRvd25cIikge1xuICAgICAgICBvdXRwdXQgPSBwYXJzZUZvckRyaWxsZG93bihpbnB1dCwgY2hhcnRfdHlwZSwgY29sb3JzKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJ0X3R5cGUgPT0gXCJtYXBcIikge1xuICAgICAgICBvdXRwdXQgPSBwYXJzZUZvck1hcChpbnB1dCk7XG4gICAgfVxuXG4gICAgLy9hZGQgY2hhcnQgdGl0bGUgKHNhbWUgZm9yIGFsbCB0eXBlcyBvZiBjaGFydHMpXG4gICAgb3V0cHV0LnRpdGxlX3RleHQgPSAkKFwiY2FwdGlvblwiLCBpbnB1dCkudGV4dCgpO1xuICAgIFxuICAgIHJldHVybiBvdXRwdXQ7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VUYWJsZUlucHV0OyIsIi8qKiBcbiogY3VzdG9tIGpRdWVyeSBleHRlbnNpb25zXG4qIEBtb2R1bGVcbiovXG52YXIganFfZXh0ZW5zaW9ucyA9IChmdW5jdGlvbiAoKSB7XG5cbiAgICBqUXVlcnkuZm4uZXh0ZW5kKHtcblxuICAgICAgICAvKiogZXh0ZW5kIHNvIHRoYXQgd2UgY2FuIGdldCBhbmQgc2V0IFwidmFsdWVcIiB3aXRoIGRpdnMgKi9cbiAgICAgICAgZGl2VmFsOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLmF0dHIoXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKFwidmFsdWVcIiwgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiBwdXRzIGNvbW1hcyBpbiBhIG51bWJlciAqL1xuICAgICAgICBhZGRDb21tYXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzWzBdO1xuICAgICAgICAgICAgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgodmFsID4gOTk5KSB8fCAodmFsIDwgLTk5OSkpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoLyhcXGQrKShcXGR7M30pLy50ZXN0KHZhbC50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwudG9TdHJpbmcoKS5yZXBsYWNlKC8oXFxkKykoXFxkezN9KS8sICckMScgKyAnLCcgKyAnJDInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqIHRha2VzIGFuIGVsZW1lbnQncyB0ZXh0IHN0cmluZyBhbmQgcmV0dXJucyBhIG51bWJlciwgdHJpbW1pbmcgc3BhY2VzIGFuZCByZW1vdmluZyBub24tbnVtYmVycyAoZ29vZCBmb3IgbnVtYmVycyB3aXRoIGNvbW1hcyBldGMuKSovXG4gICAgICAgIGdldE51bWJlcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciB2YWwgPSBOdW1iZXIoJC50cmltKCQodGhpcykudGV4dCgpLnJlcGxhY2UoL1teMC05XFwuXFwtXSsvZywgJycpKSk7XG4gICAgICAgICAgICByZXR1cm4gaXNOYU4odmFsKSA/IG51bGwgOiB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfSk7XG5cbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ganFfZXh0ZW5zaW9uczsiLCIvKipcbiAqIEZvcm1zIHV0aWxpdHkgb2JqZWN0LCBjb250YWlucyBmdW5jdGlvbnMgdGhhdCB3b3JrIHdpdGggZm9ybSBlbGVtZW50c1xuICogQG5hbWVzcGFjZVxuICovXG52YXIgdXRpbHNfZm9ybXMgPSB7XG4gICAgXG4gICAgXG4gICAgLyoqIHJldHVybnMgdHJ1ZSBpZiBjaGVja2JveCBpcyBjaGVja2VkLCBmYWxzZSBpZiBub3QgXG4gICAgQHBhcmFtIGVsZW0ge2VsZW1lbnR9IGNoZWNrYm94IGVsZW1lbnRcbiAgICBAcmV0dXJucyB7Ym9vbH1cbiAgICAqL1xuICAgIGdldENoZWNrQm94VmFsdWU6IGZ1bmN0aW9uIGdldENoZWNrQm94VmFsdWUoZWxlbSl7XG4gICAgICAgIHJldHVybiBlbGVtLmlzKCc6Y2hlY2tlZCcpO1xuICAgIH0sXG5cbiAgICAvKiogZ2V0cyBhbiBhcnJheSBvZiB2YWx1ZXMgZnJvbSBhIGdpdmVuIGNsYXNzIFxuICAgIEBwYXJhbSBjbGFzc19uYW1lIHtzdHJpbmd9XG4gICAgQHJldHVybnMge2FycmF5fVxuICAgICovXG4gICAgZ2V0Q2xhc3NWYWx1ZXNBcnJheTogZnVuY3Rpb24gKGNsYXNzX25hbWUpIHtcbiAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICAkKFwiLlwiICsgY2xhc3NfbmFtZSkuZWFjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhcnIucHVzaChOdW1iZXIoJCh0aGlzKS52YWwoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWxzX2Zvcm1zOyIsIi8qKlxuICogTWFpbiB1dGlsaXR5IG9iamVjdCwgY29udGFpbnMgZnVuY3Rpb25zIHRoYXQgZ2V0IHJldXNlZCBvZnRlblxuICogQG5hbWVzcGFjZVxuICovXG52YXIgdXRpbHNfbWFpbiA9IHtcblxuICAgIC8qKiBjaGVjayB2YWx1ZSAtIGlmIDAgb3Igbm90IGEgbnVtYmVyLCByZXR1cm4gdW5kZWZpbmVkICoqL1xuICAgIGNoZWNrZm9yVW5kZWZpbmVkOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgPT09IDAgfHwgaXNOYU4odmFsKSA/IHVuZGVmaW5lZCA6IHZhbDtcbiAgICB9LFxuXG4gICAgLyoqIFxuICAgIHR1cm5zIG9iamVjdHMgaW50byBzdHJpbmdzLCBpbmNsdWRpbmcgdGhlaXIgbWV0aG9kcyBcbiAgICBAcmV0dXJucyB7c3RyaW5nfSBKU09OXG4gICAgKi9cbiAgICBkZWVwU3RyaW5naWZ5OiBmdW5jdGlvbiBkZWVwU3RyaW5naWZ5KG9iaikge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnJlcGxhY2UoL1xcXFxuL2csIFwiXCIpO1xuXG4gICAgfSxcbiAgICBcbiAgICBtYWtlQ2xlYXJGbG9hdERpdjogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGNsZWFyX2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNsZWFyX2Rpdi5jbGFzc05hbWUgPSBcImNsZWFyZmxvYXRcIjtcbiAgICAgICAgcmV0dXJuIGNsZWFyX2RpdjtcbiAgICB9LFxuXG4gICAgcmdiMmFycjogZnVuY3Rpb24gKHJnYikge1xuICAgICAgICByZXR1cm4gcmdiLnJlcGxhY2UoL1teMC05XFwsXSsvZywgJycpLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChpdGVtLCAxMCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgXG5cbiAgICAvKiogc3RyaW5naWZ5IHRvb2x0aXAgZm9ybWF0dGVyIGZ1bmN0aW9uICoqL1xuICAgIHN0cmluZ2lmeUZvcm1hdHRlcjogZnVuY3Rpb24gKG5ld190b29sdGlwLCBkZWNpbWFscywgbXVsdGlwbGllciwgc2lnbnNfYXJyKSB7XG4gICAgICAgIHJldHVybiBuZXdfdG9vbHRpcC50b1N0cmluZygpXG4gICAgICAgICAgICAucmVwbGFjZSgvbXVsdGlwbGllci9nLCBtdWx0aXBsaWVyKVxuICAgICAgICAgICAgLnJlcGxhY2UoL2RlY2ltYWxzL2csIGRlY2ltYWxzKVxuICAgICAgICAgICAgLnJlcGxhY2UoL3NpZ25zX2FyclxcWzBcXF0vZywgJ1wiJyArIHNpZ25zX2FyclswXSArICdcIicpXG4gICAgICAgICAgICAucmVwbGFjZSgvc2lnbnNfYXJyXFxbMVxcXS9nLCAnXCInICsgc2lnbnNfYXJyWzFdICsgJ1wiJyk7XG5cbiAgICB9LFxuXG5cbiAgICAvKiogcGxhY2UgY29kZSBpbiBjaGFydF9vdXRwdXRfY29kZSBhbmQgcmVpbml0IGhpZ2hsaWdodCAqL1xuICAgIHdyaXRlQ29kZTogZnVuY3Rpb24gd3JpdGVDb2RlKGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIGNoYXJ0X29wdGlvbnNfanNfc3RyaW5nID0gdXRpbHNfbWFpbi5kZWVwU3RyaW5naWZ5KGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICAgICAgJChcIiNjaGFydF9vdXRwdXRfY29kZVwiKS50ZXh0KGNoYXJ0X29wdGlvbnNfanNfc3RyaW5nKS5lYWNoKGZ1bmN0aW9uIChpLCBibG9jaykge1xuICAgICAgICAgICAgaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWxzX21haW47Il19
