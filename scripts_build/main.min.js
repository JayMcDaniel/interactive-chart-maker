(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {

    //utils
    var jq_extensions = require("./utils/jq_extensions.js");

    //page init
    var page_init = require("./initializers/page_init.js");

    //initial all chart options init
    var allChartOptionsInit = require("./initializers/all_chart_options_init.js");
    var all_chart_options = allChartOptionsInit();

    //draw chart
    var draw_chart = require("./draw_chart.js");
    var chart = draw_chart.init(all_chart_options);

    //write code to "#chart_output_code" function
    var writeCode = require("./write_code.js");
    writeCode(all_chart_options);

    //all form updates - when updates are made, update the chart
    var allFormUpdates = require("./form_updates/all_form_updates.js");
    allFormUpdates(chart, all_chart_options);

    //    setTimeout(function () {
    //        console.log(chart);
    //    
    //        $(".chart_display_area").css("height", "800px");
    //       
    //        chart.reflow();
    //       
    //    }, 2000);
});

},{"./draw_chart.js":15,"./form_updates/all_form_updates.js":16,"./initializers/all_chart_options_init.js":20,"./initializers/page_init.js":26,"./utils/jq_extensions.js":36,"./write_code.js":39}],2:[function(require,module,exports){
"use strict";

/** All Chart options constructor. combines all other options into main options object. Info at http://api.highcharts.com/highcharts */
var utils_main = require("../../utils/utils_main.js");

var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart;
    this.colors = o.colors;
    this.credits = o.credits;
    this.exporting = o.exporting;
    this.legend = o.legend;
    this.plot_options = o.plot_options;
    this.series = o.series;
    this.subtitle = o.subtitle;
    this.title = o.title;
    this.tooltip = o.tooltip;
    this.xAxis = o.xAxis;
    this.yAxis = o.yAxis;
};

AllChartOptions.prototype.setOption = utils_main.setOption;

module.exports = AllChartOptions;

},{"../../utils/utils_main.js":38}],3:[function(require,module,exports){
"use strict";

/** Chart options constructor. Info at http://api.highcharts.com/highcharts#chart */
var utils_main = require("../../utils/utils_main.js");

var ChartOptions = function ChartOptions(o) {

    this.renderTo = o.renderTo || "chart_display_area";
    this.margin = [o.margin[0] || 90, o.margin[1] || 40, o.margin[2] || 80, o.margin[3] || 75]; //[top,right,bottom,left]
    this.borderWidth = o.borderWidth || 0;
    this.plotBorderColor = o.plotBorderColor || '#fff';
    this.plotBorderWidth = o.plotBorderWidth || 0;
    this.type = o.type || 'line';
    this.zoomType = o.zoomType || null;
    this.alignTicks = o.alignTicks || false;
    this.inverted = o.inverted || false;
    this.ignoreHiddenSeries = o.ignoreHiddenSeries || true; //false for bubble charts so bubbles won't resize
};

ChartOptions.prototype.setOption = utils_main.setOption;

module.exports = ChartOptions;

},{"../../utils/utils_main.js":38}],4:[function(require,module,exports){
'use strict';

/** Colors options constructor. Info at http://api.highcharts.com/highcharts#colors */
var utils_main = require("../../utils/utils_main.js");

var Colors = function Colors(o) {

    this.colors = o.colors || ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
};

Colors.prototype.setOption = utils_main.setOption;

module.exports = Colors;

},{"../../utils/utils_main.js":38}],5:[function(require,module,exports){
"use strict";

/** Credits options constructor. Info at http://api.highcharts.com/highcharts#credits */
var utils_main = require("../../utils/utils_main.js");

var Credits = function Credits(o) {
    this.href = "http://www.bls.gov";

    this.position = {
        align: 'left',
        x: 10,
        y: o.position ? o.position.y || -20 : -20
    };

    this.style = {
        cursor: "default",
        color: "#2C2C2C"
    };

    this.text = o.text || "";
    this.useHTML = true;
};

Credits.prototype.setOption = utils_main.setOption;

module.exports = Credits;

},{"../../utils/utils_main.js":38}],6:[function(require,module,exports){
"use strict";

/** Exporting options constructor. Info at http://api.highcharts.com/highcharts#exporting */
var utils_main = require("../../utils/utils_main.js");

var Exporting = function Exporting(o) {

    this.buttons = {
        contextButton: {
            enabled: true,
            verticalAlign: 'bottom',
            x: -10
        }
    };
};

Exporting.prototype.setOption = utils_main.setOption;

module.exports = Exporting;

},{"../../utils/utils_main.js":38}],7:[function(require,module,exports){
'use strict';

/** legend options constructor. Info at http://api.highcharts.com/highcharts#legend */
var utils_main = require("../../utils/utils_main.js");

var Legend = function Legend(o) {

    this.align = o.align || 'left';
    this.backgroundColor = o.backgroundColor || 'none';
    this.borderColor = o.borderColor || 'none';
    this.borderWidth = o.borderWidth || 0;
    this.enabled = o.enabled || true;
    this.floating = o.floating || false;
    this.itemDistance = o.itemDistance || 30;
    this.layout = o.layout || 'horizontal';
    this.reversed = o.reversed || false;
    this.shadow = o.shadow || false;
    this.useHTML = o.useHTML || false;
    this.verticalAlign = o.verticalAlign || 'top';
    this.width = o.width;
    this.x = o.x || 0;
    this.y = o.y || 30;

    this.itemStyle = {
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
        color: '#000'
    };
    this.itemHiddenStyle = {
        color: 'gray'
    };
    this.itemHoverStyle = {
        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
    };
};

Legend.prototype.setOption = utils_main.setOption;

module.exports = Legend;

},{"../../utils/utils_main.js":38}],8:[function(require,module,exports){
"use strict";

/** PlotOptions constructor. Info at http://api.highcharts.com/highcharts#plotOptions*/
var utils_main = require("../../utils/utils_main.js");

var PlotOptions = function PlotOptions(o) {

    //for all chart types
    if (o.series) {
        this.series = {
            events: {
                legendItemClick: o.series.events.legendItemClick
            },
            dataLabels: {
                enabled: o.series.dataLabels.enabled || false
            },
            pointPlacement: o.series.pointPlacement || null
        };
    }
    //just for column and bar charts
    if (o.column || o.bar) {
        this.series.stacking = o.series.stacking || null;
        this.series.pointPadding = o.series.pointPadding || 0.1; //0 is tight, 1 is loose
        this.series.groupPadding = o.series.groupPadding || 0.2;
        this.series.minPointLength = o.series.minPointLength || 2;
    }

    //just for bubble charts
    if (o.bubble) {
        this.bubble = {
            maxSize: o.bubble.maxSize || 50,
            sizeBy: o.bubble.sizeBy || 'width' //instead of 'area', seems more accurate
        };
    }

    //just for line charts
    if (o.line) {
        this.line = {
            lineWidth: o.line.lineWidth || 1.5,
            states: {
                hover: {
                    lineWidth: o.line.hover.lineWidth || 4
                }
            },
            marker: {
                enabled: o.line.marker.enabled || false,
                states: {
                    hover: {
                        enabled: o.line.marker.hover.enabled || true,
                        radius: o.line.marker.hover.radius || 5
                    }
                }
            }
        };
    }
};

PlotOptions.prototype.setOption = utils_main.setOption;

module.exports = PlotOptions;

},{"../../utils/utils_main.js":38}],9:[function(require,module,exports){
"use strict";

/** series (an array of objs) options constructor. Info at http://api.highcharts.com/highcharts#series */
var utils_main = require("../../utils/utils_main.js");

var Series = function Series(o) {

    this.series = o.series || [{
        name: "Series 1",
        data: [1, 2, 3, 4]
    }, {
        name: "Series 2",
        data: [2, 4, 6, 8]
    }];
};

Series.prototype.setOption = utils_main.setOption;

module.exports = Series;

},{"../../utils/utils_main.js":38}],10:[function(require,module,exports){
"use strict";

/** subtitle options constructor. Info at http://api.highcharts.com/highcharts#subtitle */
var utils_main = require("../../utils/utils_main.js");

var Subtitle = function Subtitle(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'normal',
        fontSize: '12px'
    };
};

Subtitle.prototype.setOption = utils_main.setOption;

module.exports = Subtitle;

},{"../../utils/utils_main.js":38}],11:[function(require,module,exports){
"use strict";

/** title options constructor. Info at http://api.highcharts.com/highcharts#title */
var utils_main = require("../../utils/utils_main.js");

var Title = function Title(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'bold',
        fontSize: '14px'
    };
};

Title.prototype.setOption = utils_main.setOption;

module.exports = Title;

},{"../../utils/utils_main.js":38}],12:[function(require,module,exports){
'use strict';

/** tooltip options constructor. Info at http://api.highcharts.com/highcharts#tooltip */
var utils_main = require("../../utils/utils_main.js");

var Tooltip = function Tooltip(o) {
    this.backgroundColor = '#FEFFEF';
    this.crosshairs = o.crosshairs || [false, false];
    this.formatter = o.formatter;
    this.shared = o.shared || false;

    this.style = {
        color: '#000000',
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif'
    };

    this.useHTML = true;
    this.valueDecimals = o.valueDecimals;
    this.valuePrefix = o.valuePrefix || "";
    this.valueSuffix = o.valueSuffix || "";
};

Tooltip.prototype.setOption = utils_main.setOption;

module.exports = Tooltip;

},{"../../utils/utils_main.js":38}],13:[function(require,module,exports){
'use strict';

/** xAxis options constructor. Info at http://api.highcharts.com/highcharts#xAxis */
var utils_main = require("../../utils/utils_main.js");

var XAxis = function XAxis(o) {

    this.categories = o.categories;
    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 0;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter || undefined : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineWidth = o.lineWidth || 1.2;
    this.lineColor = o.lineColor || 'gray';
    this.plotBands = o.plotBands || [];
    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : '',
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };
};

XAxis.prototype.setOption = utils_main.setOption;

module.exports = XAxis;

},{"../../utils/utils_main.js":38}],14:[function(require,module,exports){
'use strict';

/** yAxis options constructor. Info at http://api.highcharts.com/highcharts#yAxis */
var utils_main = require("../../utils/utils_main.js");

var yAxis = function yAxis(o) {

    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 1;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineColor = o.lineColor || 'gray';
    this.lineWidth = o.lineWidth || 1;
    this.max = o.max || null;
    this.min = o.min || null;
    this.opposite = o.opposite || false;
    this.plotBands = o.plotBands || [];

    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 1
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';
    this.tickWidth = o.tickWidth || 1;

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : 6,
        align: o.title ? o.title.align || 'middle' : 'middle',
        offset: 20,
        rotation: 0,
        x: o.title ? o.title.x || 35 : 35,
        y: -15,

        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };

    this.type = o.type || 'linear';
};

yAxis.prototype.setOption = utils_main.setOption;

module.exports = yAxis;

},{"../../utils/utils_main.js":38}],15:[function(require,module,exports){
"use strict";

/** takes all_chart_options and prints a chart to the screen */

var draw_chart = {

    init: function init(all_chart_options) {
        var chart = new Highcharts.Chart(all_chart_options);
        return chart;
    }

};

module.exports = draw_chart;

},{}],16:[function(require,module,exports){
"use strict";

/** listens for any form updates and calls appropriate function */
var update_template = require("./update_template.js");
var updateChartType = require("./update_chart_type.js");
var utils_forms = require("../utils/utils_forms");
var update_legend = require("./update_legend.js");

var allFormUpdates = function allFormUpdates(chart, all_chart_options) {

    //chart width
    $("#chart_width_textinput").keyup(function () {
        update_template.resize($(this).val(), "width", chart, all_chart_options);
    });

    //chart height
    $("#chart_height_textinput").keyup(function () {
        update_template.resize($(this).val(), "height", chart, all_chart_options);
    });

    //inner chart margins
    $(".margin_input").keyup(function () {

        var margins_arr = utils_forms.getClassValuesArray("margin_input");

        update_template.margin(margins_arr, chart, all_chart_options);
    });

    //chart type changed
    $.each(['line', 'bar', 'column', 'bubble', 'scatter', "drilldown"], function (i, type) {
        $('#chart_type_' + type).click(function () {
            updateChartType(i, type, chart, all_chart_options);
        });
    });

    //legend layout changed
    $("#legend_layout_select").change(function () {
        update_legend.updateLayout($(this).val(), chart, all_chart_options);
    });

    //legend reverse ceckbox changed
    $("#legend_reverse_layout_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_legend.updateIsReversed(val, chart, all_chart_options);
    });

    //legend X or Y placement values changed
    $("#legend_placement_x, #legend_placement_y").keyup(function () {
        var newX = Number($("#legend_placement_x").val());
        var newY = Number($("#legend_placement_y").val());

        update_legend.updateXYpositions(newX, newY, chart, all_chart_options);
    });
};

module.exports = allFormUpdates;

},{"../utils/utils_forms":37,"./update_chart_type.js":17,"./update_legend.js":18,"./update_template.js":19}],17:[function(require,module,exports){
"use strict";

/** when a chart icon is clicked, this function is called - changes the chart type shown */

var updateChartType = function updateChartType(i, type, chart, all_chart_options) {

    if (type === "bar") {
        chart.inverted = true;
    } else {
        chart.inverted = false;
    }

    if (type === "drilldown") {
        type = "column";
    }

    chart.xAxis[0].update({}, false);
    chart.yAxis[0].update({}, false);

    $.each(chart.series, function () {
        this.update({
            type: type
        });
    });

    all_chart_options.chart.setOption("type", type, all_chart_options);
};

module.exports = updateChartType;

},{}],18:[function(require,module,exports){
"use strict";

/** when legend options are changed in the side area */

var update_legend = {

    /* decide if the legend should be reverse order */
    updateIsReversed: function updateIsReversed(val, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.reversed = val;
        legend.render();

        all_chart_options.legend.setOption("reversed", val, all_chart_options);
    },

    /** if 'no legend' is selected, hide the legend, and set options, else, show it with the correct layout */
    updateLayout: function updateLayout(val, chart, all_chart_options) {

        var legend = chart.legend;
        if (val === "no_legend") {
            legend.group.hide();
            legend.box.hide();
            legend.display = false;
            legend.options.enabled = false;
            legend.render(false);

            val = undefined;
        } else {

            legend.options.layout = val;
            legend.render(false);
            legend.group.show();
            legend.box.show();
            legend.display = true;
            legend.options.enabled = true;
        }

        all_chart_options.legend.setOption("layout", val, all_chart_options);
        all_chart_options.legend.setOption("enabled", legend.options.enabled, all_chart_options);
    },

    /** update X and Y positions on legend */

    updateXYpositions: function updateXYpositions(newX, newY, chart, all_chart_options) {
        var legend = chart.legend;
        legend.options.x = newX;
        legend.options.y = newY;
        legend.render(false);

        all_chart_options.legend.setOption("x", newX, all_chart_options);
        all_chart_options.legend.setOption("y", newY, all_chart_options);
    }

};

module.exports = update_legend;

},{}],19:[function(require,module,exports){
"use strict";

var update_template = {
    resize: function resize(val, dimension, chart, all_chart_options) {
        val = Number(val);
        if (!isNaN(val)) {
            $(".chart_display_area").css(dimension, val + "px");
        }
        chart.reflow();
    },

    margin: function margin(margins_arr, chart, all_chart_options) {

        $.each(chart.axes, function (i, e) {
            e.isDirty = true; //to tell axes to refresh
        });
        chart.margin = margins_arr;
        chart.redraw(false);
        all_chart_options.chart.setOption("margin", margins_arr, all_chart_options);
    }
};

module.exports = update_template;

},{}],20:[function(require,module,exports){
"use strict";

/** create and return an instance of all_chart_options */

var AllChartOptions = require("../constructors/charts/all_chart_options.js"),
    chartInit = require("./chart_init.js"),
    colorsInit = require("./colors_init.js"),
    creditsInit = require("./credits_init.js"),
    exportingInit = require("./exporting_init.js"),
    legendInit = require("./legend_init.js"),
    plotOptionsInit = require("./plot_options_init.js"),
    seriesInit = require("./series_init.js"),
    subtitleInit = require("./subtitle_init.js"),
    titleInit = require("./title_init.js"),
    tooltipInit = require("./tooltip_init.js"),
    xAxisInit = require("./x_axis_init.js"),
    yAxisInit = require("./y_axis_init.js");

var allChartOptionsInit = function allChartOptionsInit() {

    //get options from individual inits
    var options = {
        chart: chartInit(),
        colors: colorsInit(),
        credits: creditsInit(),
        // exportig: exportingInit(),
        legend: legendInit(),
        plotOptions: plotOptionsInit(),
        series: seriesInit(),
        subtitle: subtitleInit(),
        title: titleInit(),
        tooltip: tooltipInit(),
        xAxis: xAxisInit(),
        yAxis: yAxisInit()

    };

    var all_chart_options = new AllChartOptions(options);
    return all_chart_options;
};

module.exports = allChartOptionsInit;

},{"../constructors/charts/all_chart_options.js":2,"./chart_init.js":21,"./colors_init.js":22,"./credits_init.js":23,"./exporting_init.js":24,"./legend_init.js":25,"./plot_options_init.js":27,"./series_init.js":28,"./subtitle_init.js":29,"./title_init.js":30,"./tooltip_init.js":31,"./x_axis_init.js":32,"./y_axis_init.js":33}],21:[function(require,module,exports){
"use strict";

/** Initializer for "chart" options section of all_chart_options. Creates and returns a new instance */

var ChartOptions = require("../constructors/charts/chart.js");

var chartInit = function chartInit() {

    //load options from user inputs
    var options = {
        margin: [Number($("#top_margin_textinput").val()), Number($("#right_margin_textinput").val()), Number($("#bottom_margin_textinput").val()), Number($("#left_margin_textinput").val())],
        renderTo: $("#chart_id_textinput").val()
    };

    var chart_options = new ChartOptions(options);
    return chart_options;
};

module.exports = chartInit;

},{"../constructors/charts/chart.js":3}],22:[function(require,module,exports){
"use strict";

/** Initializer for "colors" options section of all_chart_options. Creates and returns a new instance */

var Colors = require("../constructors/charts/colors.js");

var colorsInit = function colorsInit() {

    //load options from user inputs
    var options = {};

    var colors = new Colors(options);
    return colors.colors;
};

module.exports = colorsInit;

},{"../constructors/charts/colors.js":4}],23:[function(require,module,exports){
"use strict";

/** Initializer for "credits" options section of all_chart_options. Creates and returns a new instance */

var Credits = require("../constructors/charts/credits.js");

var creditsInit = function creditsInit() {

    //load options from user inputs
    var options = {
        text: $("#chart_credits_text_textarea").val(),
        position: {
            y: Number($("#chart_credits_y_position_input").val())
        }

    };

    var credits = new Credits(options);
    return credits;
};

module.exports = creditsInit;

},{"../constructors/charts/credits.js":5}],24:[function(require,module,exports){
"use strict";

/** Initializer for "exporting" options section of all_chart_options. Creates and returns a new instance */

var Exporting = require("../constructors/charts/exporting.js");

var exportingInit = function exportingInit() {

    //load options from user inputs
    var options = {};

    var exporting = new Exporting(options);
    return exporting;
};

module.exports = exportingInit;

},{"../constructors/charts/exporting.js":6}],25:[function(require,module,exports){
"use strict";

/** Initializer for "legend" options section of all_chart_options. Creates and returns a new instance */

var Legend = require("../constructors/charts/legend.js");

var legendInit = function legendInit() {

    var getLegendLayout = function getLegendLayout() {
        var legend_layout_val = $("#legend_layout_select").val();
        return legend_layout_val !== "no_legend" ? legend_layout_val : undefined;
    };

    //load options from user inputs
    var options = {
        layout: getLegendLayout(),
        x: Number($("#legend_placement_x").val()),
        y: Number($("#legend_placement_y").val())

    };

    var legend = new Legend(options);
    return legend;
};

module.exports = legendInit;

//
///** legend options constructor. Info at http://api.highcharts.com/highcharts#legend */
//var utils_main = require("../../utils/utils_main.js");
//
//var Legend = function (o) {
//
//    this.align = o.align || 'center';
//    this.backgroundColor = o.backgroundColor || 'none';
//    this.borderColor = o.borderColor || 'none';
//    this.borderWidth = o.borderWidth || 0;
//    this.enabled = o.enabled || true;
//    this.floating = o.floating || false;
//    this.itemDistance = o.itemDistance || 30;
//    this.layout = o.layout || 'horizontal';
//    this.reversed = o.reversed || false;
//    this.shadow = o.shadow || false;
//    this.useHTML = o.useHTML || false;
//    this.verticalAlign = o.verticalAlign || 'top';
//    this.width = o.width;
//    this.x = o.x || 0;
//    this.y = o.y || 30;
//
//    this.itemStyle = {
//        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
//        color: '#000'
//    };
//    this.itemHiddenStyle = {
//        color: 'gray'
//    };
//    this.itemHoverStyle = {
//        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
//    }
//
//}
//
//
//Legend.prototype.setOption = utils_main.setOption;
//
//module.exports = Legend;

},{"../constructors/charts/legend.js":7}],26:[function(require,module,exports){
"use strict";

//inits
module.exports = function () {

    var navigation_setup = require("../navigation_setup.js");
    var keyboard_inputs = require("../keyboard_inputs");
}();

},{"../keyboard_inputs":34,"../navigation_setup.js":35}],27:[function(require,module,exports){
"use strict";

/** Initializer for "plotOptions" options section of all_chart_options. Creates and returns a new instance */

var PlotOptions = require("../constructors/charts/plot_options.js");

var plotOptionsInit = function plotOptionsInit() {

    //load options from user inputs
    var options = {};

    var plotOptions = new PlotOptions(options);
    return plotOptions;
};

module.exports = plotOptionsInit;

},{"../constructors/charts/plot_options.js":8}],28:[function(require,module,exports){
"use strict";

/** Initializer for "series" options section of all_chart_options. Creates and returns a new instance */

var Series = require("../constructors/charts/series.js");

var seriesInit = function seriesInit() {

    //load options from user inputs
    var options = {};

    var series = new Series(options);
    return series.series;
};

module.exports = seriesInit;

},{"../constructors/charts/series.js":9}],29:[function(require,module,exports){
"use strict";

/** Initializer for "subtitle" options section of all_chart_options. Creates and returns a new instance */

var Subtitle = require("../constructors/charts/subtitle.js");

var subtitleInit = function subtitleInit() {

    //load options from user inputs
    var options = {};

    var subtitle = new Subtitle(options);
    return subtitle;
};

module.exports = subtitleInit;

},{"../constructors/charts/subtitle.js":10}],30:[function(require,module,exports){
"use strict";

/** Initializer for "title" options section of all_chart_options. Creates and returns a new instance */

var Title = require("../constructors/charts/title.js");

var titleInit = function titleInit() {

    //load options from user inputs
    var options = {};

    var title = new Title(options);
    return title;
};

module.exports = titleInit;

},{"../constructors/charts/title.js":11}],31:[function(require,module,exports){
"use strict";

/** Initializer for "tooltip" options section of all_chart_options. Creates and returns a new instance */

var Tooltip = require("../constructors/charts/tooltip.js");

var tooltipInit = function tooltipInit() {

    //load options from user inputs
    var options = {};

    var tooltip = new Tooltip(options);
    return tooltip;
};

module.exports = tooltipInit;

},{"../constructors/charts/tooltip.js":12}],32:[function(require,module,exports){
"use strict";

/** Initializer for "xAxis" options section of all_chart_options. Creates and returns a new instance */

var XAxis = require("../constructors/charts/x_axis.js");

var xAxisInit = function xAxisInit() {

    //load options from user inputs
    var options = {};

    var xAxis = new XAxis(options);
    return xAxis;
};

module.exports = xAxisInit;

},{"../constructors/charts/x_axis.js":13}],33:[function(require,module,exports){
"use strict";

/** Initializer for "yAxis" options section of all_chart_options. Creates and returns a new instance */

var YAxis = require("../constructors/charts/y_axis.js");

var yAxisInit = function yAxisInit() {

    //load options from user inputs
    var options = {};

    var yAxis = new YAxis(options);
    return yAxis;
};

module.exports = yAxisInit;

},{"../constructors/charts/y_axis.js":14}],34:[function(require,module,exports){
"use strict";

module.exports = function () {

    var keyboard_inputs = {

        bindNumberEntryInputs: function bindNumberEntryInputs() {

            var adjValue = function adjValue(val, direction) {
                var val = Number(val);
                if (!isNaN(val)) {
                    return direction === "+" ? val + 10 : val - 10;
                } else {
                    return val;
                }
            };

            $(".number_entry").keyup(function (e) {
                if (e.keyCode === 38) {
                    //up pushed
                    $(this).val(adjValue($(this).val(), "+"));
                } else if (e.keyCode === 40) {
                    $(this).val(adjValue($(this).val(), "-"));
                }
            });
        }

    };

    keyboard_inputs.bindNumberEntryInputs();
}();

},{}],35:[function(require,module,exports){
"use strict";

/** object that contains functions for all the navigation, ie changing between options and chart types */
module.exports = function () {
    var navigation_setup = {

        /** when tabs on left side nav bar are clicked, options displayed are changed */
        sideNavTabsChange: function sideNavTabsChange() {

            $("#side_nav_tabs .tab").click(function () {
                //change selected menu tab
                $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
                $(this).addClass("selected_tab");

                //change display div showing
                var selectedID = "#" + $(this).attr("id").replace("tab", "display");
                $("#side_display .selected_display").removeClass("selected_display");
                $(selectedID).addClass("selected_display");
            });
        },

        /** when chart type icon is clicked and changed */
        chartTypeIconChange: function chartTypeIconChange() {

            $("#chart_type_icons .chart_type_icon").click(function () {
                //change selected icon
                $("#chart_type_icons .chart_type_icon").removeClass("selected_chart_type");
                $(this).addClass("selected_chart_type");
            });
        },

        /** when a help icon is clicked */

        helpIconClick: function helpIconClick() {

            $(".help_icon").click(function () {
                $(this).toggleClass("help_on");
                $(".notes", $(this).parents("div")).toggle();
            });
        },

        /** when a get code button is clicked */

        getCodeButtonClick: function getCodeButtonClick() {

            $("#get_code_button").click(function (e) {
                var $get_code_span = $("#get_code_text");
                $(this).toggleClass("code_on");
                $("#main_result_code_div").slideToggle(100);
                if ($get_code_span.text() === "Get code") {
                    $get_code_span.text("Hide code");
                } else {
                    $get_code_span.text("Get code");
                }
            });
        }
    };

    navigation_setup.sideNavTabsChange();
    navigation_setup.chartTypeIconChange();
    navigation_setup.helpIconClick();
    navigation_setup.getCodeButtonClick();
}();

},{}],36:[function(require,module,exports){
"use strict";

var jq_extensions = function () {

    jQuery.fn.extend({
        divVal: function divVal(string) {
            //extend so that we can get and set "value" with divs
            if (arguments.length === 0) {
                return $(this).attr("value");
            } else {

                $(this).attr("value", string);
                return $(this);
            }
        }
    });
}();

module.exports = jq_extensions;

},{}],37:[function(require,module,exports){
"use strict";

var utils_forms = {

    /* returns true if checkbox is checked, false if not */
    getCheckBoxValue: function getCheckBoxValue(elem) {
        return elem.is(':checked');
    },

    getClassValuesArray: function getClassValuesArray(className) {
        var arr = [];
        $("." + className).each(function () {
            arr.push(Number($(this).val()));
        });
        return arr;
    }

};

module.exports = utils_forms;

},{}],38:[function(require,module,exports){
"use strict";

/** Main utility object, contains functions that get reused often */
var utils_main = {

    /** shortcut for console.log **/
    log: function log(e) {
        return console.log(e);
    },

    /** turns objects into strings, including their methods */
    deepStringify: function deepStringify(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (typeof value === 'function') {
                return value.toString();
            } else {
                return value;
            }
        }).replace(/\\n/g, "");
    },

    /** sets an option to a given object. the chart options constructors use this in thier prototypes */
    setOption: function setOption(option, obj, all_chart_options) {
        this[option] = obj;
        utils_main.writeCode(all_chart_options);
    },

    writeCode: function writeCode(all_chart_options) {

        //place code in chart_output_code and reinit highlight
        var chart_options_js_string = utils_main.deepStringify(all_chart_options);
        $("#chart_output_code").text(chart_options_js_string).each(function (i, block) {
            hljs.highlightBlock(block);
        });
    }

};

module.exports = utils_main;

},{}],39:[function(require,module,exports){
"use strict";

/** function that writes chart or map code to "#chart_output_code" */
var utils_main = require("./utils/utils_main.js");

function writeCode(all_chart_options) {

    var chart_options_js_string = utils_main.deepStringify(all_chart_options);
    $("#chart_output_code").text(chart_options_js_string);
}

module.exports = writeCode;

},{"./utils/utils_main.js":38}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
