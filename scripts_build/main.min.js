(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {

    //utils
    var jq_extensions = require("./utils/jq_extensions.js");
    var utils_main = require("./utils/utils_main");

    //initial all chart options init
    var allChartOptionsInit = require("./initializers/charts/all_chart_options_init.js");
    var all_chart_options = allChartOptionsInit();

    //draw chart
    var draw_chart = require("./draw_chart.js");
    var chart = draw_chart.init(all_chart_options);

    //page init (navigation and keyboard entries)
    var navigation_setup = require("./navigation_setup.js");
    navigation_setup.firstNavInit();

    //all form updates - when updates are made, update the chart. this also calls some nav and keyboard input inits
    var allFormUpdates = require("./form_updates/all_form_updates.js");
    allFormUpdates(chart, all_chart_options);
});

},{"./draw_chart.js":15,"./form_updates/all_form_updates.js":16,"./initializers/charts/all_chart_options_init.js":28,"./navigation_setup.js":45,"./utils/jq_extensions.js":53,"./utils/utils_main":55}],2:[function(require,module,exports){
"use strict";

var utils_form = require("./utils/utils_forms.js");

/**
 * Contains functions that deal with chart (options selected and data loaded) saving and loading
 * @namespace
 */

var chart_recall = {

    /** reads all of the page's selectable options and loads values into an object **/

    saveValues: function saveValues() {
        //object to load each input's values and ID's into (textareas, selects, checkboxes, div icons etc )
        var saved_values = [];

        $("input, select, textarea, #chart_type_icons, #table_input_load_series_from_icons, #color_palettes, .series_type_div", $("#side_main")).each(function () {

            if (this.nodeName === "DIV") {
                var input_val = $(this).children("[class*='selected']").divVal();
            } else {
                var input_val = this.type === "checkbox" ? utils_form.getCheckBoxValue($(this)) : $(this).val();
            }

            saved_values.push({
                id: $(this).attr("id"),
                val: input_val
            });
        });
        //console.log(JSON.stringify(saved_values));
        return saved_values;
    },

    /** takes input (originally from #load_chart_textarea, parses it, and sets option values accordingly, to load a saved chart) **/

    loadValues: function loadValues(chart, all_chart_options, input) {
        var utils_main = require("./utils/utils_main.js");
        try {
            input = JSON.parse(input);
        } catch (e) {
            utils_main.showError("Sorry, the JSON parsing didn't work. Please double check your input. " + e);
        }

        /** goes through an array of objects with id / val, sets elements with a given ID to that value **/
        var setValues = function setValues(arr, set_individual_series /*bool*/) {
            var individual_series_options = []; //gets populated if series_color and line_style_select are found

            $.each(arr, function () {

                if (!set_individual_series && this.id.match(/series_color|line_style_select|series_type_div/)) {
                    //look if this id has to do with individual series options
                    individual_series_options.push(this);
                } else {

                    var element = document.getElementById(this.id);
                    if (element) {
                        if (element.nodeName === "DIV") {
                            $(element).children().removeClass("selected");
                            $(element).children("[value='" + this.val + "']").addClass("selected");
                            //   $(element).children("[type='" + this.val + "']").click();
                        } else if (element.type === "checkbox") {
                                element.checked = this.val;
                            } else {
                                element.value = this.val;
                            }
                    }
                }
            });

            return individual_series_options;
        }; //end setValues

        var individual_series_options = setValues(input, false); //false to not set indivdual series yet

        //initial all chart options init and redraw chart
        var allChartOptionsInit = require("./initializers/charts/all_chart_options_init.js");
        var draw_chart = require("./draw_chart.js");
        all_chart_options = allChartOptionsInit();
        chart = undefined;
        chart = draw_chart.init(all_chart_options);

        //reinit form updates bindings
        var allFormUpdates = require("./form_updates/all_form_updates.js");
        allFormUpdates(chart, all_chart_options);

        //re populate the individual series options forms
        var update_individual_series = require("./form_updates/update_individual_series.js");
        update_individual_series.populateForm(chart, all_chart_options);
        setValues(individual_series_options, true); //true to set indivdual series now

        /*  trigger changes to update chart  */

        //line style changes
        $(".line_style_select").each(function () {
            $(this).change();
        });

        //individual color changes
        $(".jscolor").each(function (i) {
            var color = "#" + $(this).val();
            update_individual_series.updateSeriesColor(chart, all_chart_options, i, color);
            $(this).focus().blur();
        });

        //add recession shading
        $("#chart_add_recession_shading_select").change();

        window.scrollTo(0, 0); //scrolls to top
    },

    /** when load_chart_button is clicked, load the input options from #load_chart_textarea and update the chart **/

    initLoad: function initLoad(chart, all_chart_options) {

        $("#load_chart_button").unbind().click(function () {
            var re = /"saved_values":(\[.+}\])/;
            var input = $("#load_chart_textarea").val().match(re)[1]; //separate all_chart_options obj from textarea

            $("#load_chart_div").hide(function () {
                //hide this area (makes loading much faster)
                if (input.length > 0) {
                    chart_recall.loadValues(chart, all_chart_options, input);
                    $("#show_load_chart_area_button").removeClass("load_chart_showing");
                };
            });
        });
    }

};

module.exports = chart_recall;

},{"./draw_chart.js":15,"./form_updates/all_form_updates.js":16,"./form_updates/update_individual_series.js":22,"./initializers/charts/all_chart_options_init.js":28,"./utils/utils_forms.js":54,"./utils/utils_main.js":55}],3:[function(require,module,exports){
"use strict";

/** 
* All Chart options constructor. Combines all other options into main options object. Info at http://api.highcharts.com/highcharts 
@constructor AllChartOptions
@param o {object} chart options object
*/
var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart;
    this.colors = o.colors;
    this.legend = o.legend;
    this.plotOptions = o.plotOptions;
    this.series = o.series;
    this.drilldown = o.drilldown;
    this.subtitle = o.subtitle;
    this.title = o.title;
    this.tooltip = o.tooltip;
    this.xAxis = o.xAxis;
    this.yAxis = o.yAxis;
    this.credits = o.credits;
    //  this.exporting = o.exporting;
};

module.exports = AllChartOptions;

},{}],4:[function(require,module,exports){
'use strict';

/** Chart options constructor. Info at http://api.highcharts.com/highcharts#chart
* @constructor ChartOptions 
*  @param o {object} chart options object
*/
var ChartOptions = function ChartOptions(o) {

    this.renderTo = o.renderTo || "chart_display_area";
    this.margin = [o.margin[0] || 90, o.margin[1] || 40, o.margin[2] || 80, o.margin[3] || 75]; //[top,right,bottom,left]
    this.borderWidth = o.borderWidth || 0;
    this.plotBorderColor = o.plotBorderColor || '#000';
    this.plotBorderWidth = o.plotBorderWidth || 0;
    this.type = o.type || 'line';
    this.zoomType = 'xy';
    this.alignTicks = o.alignTicks || false;
    this.ignoreHiddenSeries = o.ignoreHiddenSeries || true; //false for bubble charts so bubbles won't resize
};

module.exports = ChartOptions;

},{}],5:[function(require,module,exports){
"use strict";

/** Credits options constructor. Info at http://api.highcharts.com/highcharts#credits
* @constructor Credits 
*  @param o {object} credits options object
*/
var Credits = function Credits(o) {
    this.href = "http://www.bls.gov";

    this.position = {
        align: 'left',
        x: 10,
        y: o.position ? o.position.y || -20 : -20
    };

    this.style = {
        cursor: "default",
        color: "#2C2C2C"
    };

    this.text = o.text || "";
    this.useHTML = true;
};

module.exports = Credits;

},{}],6:[function(require,module,exports){
'use strict';

/** Exporting options constructor. Info at http://api.highcharts.com/highcharts#exporting
* @constructor Exporting 
* @param o {object} exporting options object
*/
var Exporting = function Exporting(o) {

    this.buttons = {
        contextButton: {
            enabled: true,
            verticalAlign: 'bottom',
            x: -10
        }
    };
};

module.exports = Exporting;

},{}],7:[function(require,module,exports){
'use strict';

/** Legend options constructor. Info at http://api.highcharts.com/highcharts#legend 
* @constructor Legend 
* @param o {object} legend options object
*/
var Legend = function Legend(o) {

    this.align = o.align || 'left';
    this.backgroundColor = o.backgroundColor || 'none';
    this.borderColor = o.borderColor || 'none';
    this.borderWidth = o.borderWidth || 0;
    this.enabled = o.enabled || true;
    this.floating = o.floating || false;
    this.itemDistance = o.itemDistance || 30;
    this.layout = o.layout || 'horizontal';
    this.reversed = o.reversed || false;
    this.shadow = o.shadow || false;
    this.useHTML = o.useHTML || false;
    this.verticalAlign = o.verticalAlign || 'top';
    this.width = o.width;
    this.x = o.x || 0;
    this.y = o.y || 30;

    this.itemStyle = {
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
        color: '#000'
    };
    this.itemHiddenStyle = {
        color: 'gray'
    };
    this.itemHoverStyle = {
        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
    };
};

module.exports = Legend;

},{}],8:[function(require,module,exports){
"use strict";

/** PlotOptions constructor. Info at http://api.highcharts.com/highcharts#plotOptions
* @constructor PlotOptions 
* @param o {object} PlotOptions options object
*/
var PlotOptions = function PlotOptions(o) {

    //for all chart types. values are undefined if not in o.
    this.series = {
        events: {
            legendItemClick: o.series.events.legendItemClick
        },
        dataLabels: {
            enabled: o.series.dataLabels.enabled || false
        },
        pointPlacement: o.series.pointPlacement,
        stacking: o.series.stacking,
        pointPadding: o.series.pointPadding,
        groupPadding: o.series.groupPadding,
        minPointLength: o.series.minPointLength,
        maxSize: o.series.maxSize,
        sizeBy: o.series.sizeBy,
        lineWidth: o.series.lineWidth,
        states: o.series.states,
        marker: o.series.marker

    };
};

module.exports = PlotOptions;

},{}],9:[function(require,module,exports){
"use strict";

/** series (an array of objs) options constructor. Info at http://api.highcharts.com/highcharts#series 
* @constructor Series 
* @param o {object} Series options object
*/
var Series = function Series(o) {

    this.series = o || [{}];
};

module.exports = Series;

},{}],10:[function(require,module,exports){
"use strict";

/** subtitle options constructor. Info at http://api.highcharts.com/highcharts#subtitle
* @constructor Subtitle 
* @param o {object} Subtitle options object
*/
var Subtitle = function Subtitle(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'normal',
        fontSize: '12px'
    };
};

module.exports = Subtitle;

},{}],11:[function(require,module,exports){
"use strict";

/** Title options constructor. Info at http://api.highcharts.com/highcharts#title
* @constructor Title 
* @param o {object} Title options object
*/
var Title = function Title(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'bold',
        fontSize: '14px'
    };
};

module.exports = Title;

},{}],12:[function(require,module,exports){
'use strict';

/** Tooltip options constructor. Info at http://api.highcharts.com/highcharts#tooltip
* @constructor Tooltip 
* @param o {object} Tooltip options object
*/

var Tooltip = function Tooltip(o) {
    this.backgroundColor = '#FEFFEF';
    this.crosshairs = o.crosshairs || [false, false];
    this.formatter = o.formatter;

    this.style = {
        color: '#000000',
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif'
    };

    this.useHTML = true;
};

module.exports = Tooltip;

},{}],13:[function(require,module,exports){
'use strict';

/** xAxis options constructor. Info at http://api.highcharts.com/highcharts#xAxis
 * @constructor XAxis 
 * @param o {object} XAxis options object
 */
var XAxis = function XAxis(o) {

    this.categories = o.categories;
    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 0;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter || undefined : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineWidth = o.lineWidth || 1.2;
    this.lineColor = o.lineColor || 'gray';
    this.plotBands = o.plotBands || [];
    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 0
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';

    this.title = {
        align: o.title.align,
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : '',
        rotation: 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        },
        x: o.title.x
    };

    this.type = o.type;
};

module.exports = XAxis;

},{}],14:[function(require,module,exports){
'use strict';

/** yAxis options constructor. Info at http://api.highcharts.com/highcharts#yAxis
* @constructor yAxis 
* @param o {object} yAxis options object
*/

var yAxis = function yAxis(o) {

    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 1;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {

        //   format: o.labels ? o.labels.format : {value},
        formatter: o.labels ? o.labels.formatter : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineColor = o.lineColor || 'gray';
    this.lineWidth = o.lineWidth || 1;
    this.max = o.max || null;
    this.min = o.min || null;
    this.opposite = o.opposite || false;
    this.plotBands = o.plotBands || [];

    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 1
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';
    this.tickWidth = o.tickWidth || 1;

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : 6,
        align: o.title ? o.title.align || 'middle' : 'middle',
        offset: 20,
        rotation: 0,
        x: o.title ? o.title.x || 35 : 35,
        y: o.title ? o.title.y || -15 : -15,

        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            fontSize: '13px'
        }
    };

    this.type = o.type || 'linear';
};

module.exports = yAxis;

},{}],15:[function(require,module,exports){
"use strict";

/** takes all_chart_options and prints a chart to the screen 
@namespace
*/

var draw_chart = {

    /** initialize function **/
    init: function init(all_chart_options) {

        $(".chart_display_area").attr("id", all_chart_options.chart.renderTo); //change ID of chart area to make sure it matches the renderTo value
        var chart = new Highcharts.Chart(all_chart_options);
        return chart;
    }

};

module.exports = draw_chart;

},{}],16:[function(require,module,exports){
"use strict";

var calculate_recession_dates = require("../utils/calculate_recession_dates.js");
var update_template = require("./update_template.js");
var updateChartType = require("./update_chart_type.js");
var updateColors = require("./update_colors.js");
var utils_forms = require("../utils/utils_forms.js");
var update_legend = require("./update_legend.js");
var update_x_axis = require("./update_x_axis.js");
var update_y_axis = require("./update_y_axis.js");
var update_tooltip = require("./update_tooltip.js");
var update_data = require("./update_data.js");
var update_credits = require("./update_credits.js");
var update_chart_options = require("./update_chart_options.js");
var chart_recall = require("../chart_recall.js");
var update_individual_series = require("./update_individual_series.js");

var map_init = require("../initializers/maps/map_init.js");
var map_colors_init = require("../initializers/maps/map_colors_init.js");

/** listens for any form updates and calls appropriate function 
@module
*/
var allFormUpdates = function allFormUpdates(chart, all_chart_options) {

    /* CHART TYPE CHANGES */

    /** highlights the icon clicked by adding 'selected' class **/
    allFormUpdates.selectChart = function (selected) {
        //change selected icon
        $("#chart_type_icons .chart_type_icon").removeClass("selected");
        $(selected).addClass("selected");
    };

    /* when chart type icon is clicked and changed */

    $('.chart_type_icon').unbind().click(function () {

        $(".chart_tab, .display_options>*").not(".notes").show(); //start showing all, and might hide later if map selected
        $(".just_map").hide(); //hide just map stuff

        allFormUpdates.selectChart(this);
        var chart_type = $(this).divVal();

        //hide stuff unrelated to that chart type (line, bar, column)
        if (["area", "line", "bar", "column", "stacked_column", "stacked_bar"].indexOf(chart_type) > -1) {
            //if one of these
            $(".show_line, .show_bar, .show_column").show();
        } else {
            $(".show_line, .show_bar, .show_column").hide();
        }

        $(".just_drilldown, .just_scatter").hide();
        if (["scatter", "drilldown"].indexOf(chart_type) > -1) {
            $(".just_" + chart_type).show();
        }

        updateChartType(chart_type, chart, all_chart_options);
        if (chart_type === "map") {
            $(".chart_display_area").hide();
            $(".map_display_area").show();

            map_init.loadNewMap();
        } else {
            $(".map_display_area").hide();
            $(".chart_display_area").show();
            chart.reflow();
        }
    });

    /* when map type icon is clicked */
    $('#chart_type_map').click(function () {
        allFormUpdates.selectChart(this);
        $(".chart_tab").not(".map_tab").hide();
        $(".display_options:gt(0)>*").not(".notes").not(".show_map").hide(); //hide everything except map relevent options
        $(".just_map").show();
    });

    /* TEMPLATE CHANGES */

    //chart ID
    $("#chart_id_textinput").unbind().keyup(function () {
        update_template.changeID($(this).val(), all_chart_options);
    });

    //chart width
    $("#chart_width_textinput").unbind().keyup(function () {
        update_template.resize($(this).val(), "width", chart, all_chart_options);
    });

    //chart height
    $("#chart_height_textinput").unbind().keyup(function () {
        update_template.resize($(this).val(), "height", chart, all_chart_options);
    });

    //inner chart margins
    $(".margin_input").unbind().keyup(function () {
        var margins_arr = utils_forms.getClassValuesArray("margin_input");
        update_template.margin(margins_arr, chart, all_chart_options);
    });

    /* CHART DATA CHANGES - (x-axis categories and series array) */

    //"series names loaded from" icon clicked
    $("#table_input_load_series_from_icons .load_series_from_icon").unbind().click(function () {
        //change selected icon
        $("#table_input_load_series_from_icons .selected").removeClass("selected");
        $(this).addClass("selected");
        update_data.updateData(chart, all_chart_options);
        update_individual_series.populateForm(chart, all_chart_options);
    });

    //table input textarea
    $("#table_input_textarea").unbind().bind('input propertychange', function () {

        if (all_chart_options.chart.type === "map") {
            //for maps
            map_init.loadNewMap();
        } else {
            update_data.updateData(chart, all_chart_options); //for charts
        }
    });

    /* COLOR PALETTE CHANGES - defined and initiated in navigation setup*/

    //chart color palettes
    allFormUpdates.colorPaletteRowClick = function () {
        $(".color_palette_row").unbind().click(function () {
            var chart_type = $("#chart_type_icons .selected").divVal(); //need chart type because drill is colored differently
            $(".color_palette_row").removeClass("selected");
            $(this).addClass("selected");
            updateColors(chart, all_chart_options, chart_type);
        });
    };

    //map color palettes
    $(".map_color_palette_row").unbind().click(function () {
        $(".map_color_palette_row").removeClass("selected");
        var color_palette = $(this);
        color_palette.addClass("selected");
        var selected_colors = map_colors_init.newColorArray(color_palette);
        var all_map_options = map_colors_init.getBoundaryMapColors(null, selected_colors); //this mods all_map_options.areas with color ranges and returns a cached all_map_options
        map_colors_init.colorPaths(all_map_options);
    });

    // when page loads, load the chart palettes

    if ($("#color_palettes").children().length < 1) {
        $("#color_palettes").load("./components/color_palettes.htm", function () {
            allFormUpdates.colorPaletteRowClick();
        });
    } else {
        allFormUpdates.colorPaletteRowClick(); // runs when this main function is called with chart_recall
    }

    /* LEGEND CHANGES */

    //legend layout changed
    $("#legend_layout_select").unbind().change(function () {
        update_legend.updateLayout($(this).val(), chart, all_chart_options);
    });

    //legend reverse ceckbox changed
    $("#legend_reverse_layout_checkbox").unbind().change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_legend.updateIsReversed(val, chart, all_chart_options);
    });

    //legend toggle (hide others) checkbox changed
    $("#legend_make_toggle_checkbox").unbind().change(function () {
        var toggle_enabled = utils_forms.getCheckBoxValue($(this));
        update_legend.updateToggle(toggle_enabled, chart, all_chart_options);
    });

    //legend X or Y placement values changed
    $("#legend_placement_x, #legend_placement_y").unbind().keyup(function () {
        var newX = Number($("#legend_placement_x").val());
        var newY = Number($("#legend_placement_y").val());

        update_legend.updateXYpositions(newX, newY, chart, all_chart_options);
    });

    /* X-AXIS CHANGES */

    //x-axis title textarea changed
    $("#chart_x_axis_title_textarea").unbind().keyup(function () {
        var newTitle = $(this).val();
        update_x_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //x-axis tickmark interval input changed
    $("#chart_x_axis_tickmark_interval_input").unbind().keyup(function () {
        var newInterval = Number($(this).val());
        update_x_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    /* Y-AXIS CHANGES */

    //y-axis title textarea changed
    $("#chart_y_axis_title_textarea").unbind().keyup(function () {
        var newTitle = $(this).val();
        update_y_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //y-axis title indent changed
    $("#chart_y_axis_x_position_input").unbind().keyup(function () {
        var newXPosition = Number($(this).val());
        update_y_axis.updateXPosition(newXPosition, chart, all_chart_options);
    });

    //y-axis tickmark interval input changed
    $("#chart_y_axis_tickmark_interval_input").unbind().keyup(function () {
        var newInterval = Number($(this).val());
        update_y_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    //y-axis max input changed
    $("#chart_y_axis_max_input").unbind().keyup(function () {
        var newMax = Number($(this).val());
        update_y_axis.updateMax(newMax, chart, all_chart_options);
    });

    //y-axis min input changed
    $("#chart_y_axis_min_input").unbind().keyup(function () {
        var newMin = Number($(this).val());
        update_y_axis.updateMin(newMin, chart, all_chart_options);
    });

    //y-axis opposite side ceckbox changed
    $("#chart_y_axis_opposite_checkbox").unbind().change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsOpposite(val, chart, all_chart_options);
    });

    //y-axis log ceckbox changed
    $("#chart_y_axis_log_checkbox").unbind().change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsLog(val, chart, all_chart_options);
    });

    //y-axis dollar / percent or decimal selects changed (format)
    $("#chart_y_axis_signs_select, #chart_y_axis_decimals_select, #chart_y_axis_divide_select").unbind().change(function () {
        var sign = $("#chart_y_axis_signs_select").val();
        var decimals = $("#chart_y_axis_decimals_select").val();
        var dividend = Number($("#chart_y_axis_divide_select").val());
        update_y_axis.updateFormatter(sign, decimals, dividend, chart, all_chart_options);
    });
    $("#chart_y_axis_signs_select").change(); //call once on load

    /* TOOLTIP CHANGES */

    //change shared tooltip checkbox, decimals, signs, or mulitplier selects
    $("#chart_tooltip_shared_checkbox, #chart_tooltip_force_decimals_select, #chart_tooltip_signs_select, #chart_tooltip_y_multiple_select").unbind().change(function () {

        update_tooltip.updateToolTip(chart, all_chart_options);
    });
    //call update tooltip after page and chart is loaded (has to be on a callback with the 'chart' object)
    $("#chart_tooltip_shared_checkbox").change();

    /* CREDITS CHANGES */

    $("#chart_credits_text_textarea").unbind().bind('input propertychange', function () {
        update_credits.updateCreditText(chart, all_chart_options);
    });

    /* EXTRA OPTIONS CHANGES */

    //Subtitle change
    $("#chart_subtitle_textarea").unbind().bind('input propertychange', function () {
        var new_title = $(this).val();
        update_chart_options.updateSubtitle(new_title, chart, all_chart_options);
    });

    //MLR style toggle
    $("#chart_mlr_styles_checkbox").unbind().change(function () {
        var is_checked = utils_forms.getCheckBoxValue($(this));
        update_x_axis.toggleMLRStyle(is_checked, chart, all_chart_options);
        update_y_axis.toggleMLRStyle(is_checked, chart, all_chart_options);
        update_chart_options.toggleMLRStyle(is_checked, all_chart_options); //draw_chart is called from here to update plotBorder
    });

    //Zoom type changed
    $("#chart_zoom_select").unbind().change(function () {
        var val = $(this).val();
        update_chart_options.changeZoomType(val, chart, all_chart_options);
    }).change(); //change once on init to make type null, because zoomtype must be xy to start to enable dynamic changing

    //data labels checkbox toggled
    $("#chart_show_data_labels_checkbox").unbind().change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_chart_options.toggleDataLabels(val, chart, all_chart_options);
    });

    //recession shading
    $("#chart_add_recession_shading_select").unbind().change(function () {
        var dates_type = $(this).val();
        var plot_bands_arr = calculate_recession_dates.createPlotBands(all_chart_options.xAxis.categories, dates_type);
        calculate_recession_dates.insertPlotBands(plot_bands_arr, chart, all_chart_options);
        update_credits.updateCreditText(chart, all_chart_options);
    });

    /* Initialize chart_recall (load saved chart button ) */

    chart_recall.initLoad(chart, all_chart_options);

    //bind nav clicks and keys
    var navigation_setup = require("../navigation_setup.js");
    navigation_setup.initNavWithChart(chart, all_chart_options); // rebinds chart and all_chart_options to form events
};

module.exports = allFormUpdates;

},{"../chart_recall.js":2,"../initializers/maps/map_colors_init.js":41,"../initializers/maps/map_init.js":42,"../navigation_setup.js":45,"../utils/calculate_recession_dates.js":52,"../utils/utils_forms.js":54,"./update_chart_options.js":17,"./update_chart_type.js":18,"./update_colors.js":19,"./update_credits.js":20,"./update_data.js":21,"./update_individual_series.js":22,"./update_legend.js":23,"./update_template.js":24,"./update_tooltip.js":25,"./update_x_axis.js":26,"./update_y_axis.js":27}],17:[function(require,module,exports){
"use strict";

var draw_chart = require("../draw_chart.js");
var utils_main = require("../utils/utils_main");

/** updaters for all_chart_options.chart
@namespace
**/
var update_chart_options = {

    /** when zoon type dropdown is changed **/
    changeZoomType: function changeZoomType(val, chart, all_chart_options) {

        var val_arr = utils_main.parseBoolsFromArray(val.split(",")); //array is [x-zoom {bool}, y-zoom {bool}, zoomtype {stiring: x, y, or xy}]

        chart.pointer.zoomX = val_arr[0];
        chart.pointer.zoomY = val_arr[1];
        chart.pointer.zoomHor = val_arr[0];
        chart.pointer.zoomVert = val_arr[1];

        all_chart_options.chart.zoomType = val_arr[2];
    },

    /** enable or disabled data labels. Called when chart_show_data_labels_checkbox is changed **/

    toggleDataLabels: function toggleDataLabels(val, chart, all_chart_options) {

        $(chart.series).each(function () {
            this.update({
                dataLabels: {
                    enabled: val
                }
            });
        });

        all_chart_options.plotOptions.series.dataLabels.enabled = val;
    },

    /** when Use MLR Styles checkbox is toggled **/
    toggleMLRStyle: function toggleMLRStyle(is_checked, all_chart_options) {
        //if or not using MLR styles
        all_chart_options.chart.plotBorderWidth = is_checked ? 1 : 0;

        //have to completely redraw chart to update plotBorderWidth - not accesible by HC's API - this messes up a lot, so for now I'm not.      
    },

    /** updates the subtitle (when that #chart_subtitle_textarea is updated) **/
    updateSubtitle: function updateSubtitle(new_title, chart, all_chart_options) {

        chart.setTitle(null, {
            text: new_title
        });

        all_chart_options.subtitle.text = new_title;
    }

};

module.exports = update_chart_options;

},{"../draw_chart.js":15,"../utils/utils_main":55}],18:[function(require,module,exports){
"use strict";

var draw_chart = require("../draw_chart");
var plotOptionsInit = require("../initializers/charts/plot_options_init.js");
var update_data = require("./update_data.js");
var update_tooltip = require("./update_tooltip.js");
var update_x_axis = require("./update_x_axis.js");

/** when a chart icon is clicked, this function is called - changes the chart type shown 
@module
*/
var updateChartType = function updateChartType(chart_type, chart, all_chart_options) {

    //if map
    if (chart_type === "map") {
        all_chart_options.chart.type = "map";
        return false;
    }

    //if not map
    var type = chart_type.replace("stacked_", "");

    if (type === "bar") {
        //fix y axis position
        chart.inverted = true;
        all_chart_options.yAxis.title.align = "middle";
        all_chart_options.xAxis.title.align = "high";
        all_chart_options.yAxis.title.x = 0;
        all_chart_options.yAxis.title.y = 8;
        all_chart_options.xAxis.title.y = -20;
        all_chart_options.xAxis.title.x = 40;

        //hide non-relevant elements
        $(".not_bar").hide();
    } else {
        //chart not bar
        chart.inverted = false;
        all_chart_options.yAxis.title.align = "high";
        all_chart_options.xAxis.title.align = "middle";
        all_chart_options.yAxis.title.x = Number($("#chart_y_axis_x_position_input").val());
        all_chart_options.yAxis.title.y = -20;
        all_chart_options.xAxis.title.y = 0;
        all_chart_options.xAxis.title.x = 0;

        $(".not_bar").show();
    }

    if (type === "drilldown") {
        type = "column";
    }

    chart.xAxis[0].update({
        plotLines: [{
            "value": 0,
            "color": "#c0c0c0",
            "dashStyle": "solid",
            "width": type === "scatter" || type === "bubble" ? 1 : 0
        }]
    }, false);

    chart.xAxis[0].setTitle({
        align: all_chart_options.xAxis.title.align,
        y: all_chart_options.xAxis.title.y,
        x: all_chart_options.xAxis.title.x
    }, false);

    chart.yAxis[0].setTitle({
        align: all_chart_options.yAxis.title.align,
        x: all_chart_options.yAxis.title.x,
        y: all_chart_options.yAxis.title.y
    }, false);

    //re parse data
    update_data.updateData(chart, all_chart_options);

    all_chart_options.chart.type = type;

    //update tooltip
    update_tooltip.updateToolTip(chart, all_chart_options);

    //update x-axis type
    update_x_axis.updateType(chart_type, chart, all_chart_options);
};

module.exports = updateChartType;

},{"../draw_chart":15,"../initializers/charts/plot_options_init.js":34,"./update_data.js":21,"./update_tooltip.js":25,"./update_x_axis.js":26}],19:[function(require,module,exports){
"use strict";

var colorsInit = require("../initializers/charts/colors_init.js");

/** updates the chart's colors - called when palette is changed. Calls colorsInit 
@module
@param chart {object} the main chart object, built when chart is loaded
@param all_chart_options {object} the main chart options that load into building of the chart and are turned to string for the output
**/
var updateColors = function updateColors(chart, all_chart_options, chart_type) {
    all_chart_options.colors = colorsInit();
    chart.options.colors = all_chart_options.colors;

    if (chart_type === "drilldown") {
        //drilldowns color by point

        $(chart.series[0].data).each(function (i) {
            //update chart
            this.update({
                color: all_chart_options.colors[i]
            }, false);
            //update all_chart_options.series.data colors
            all_chart_options.series[0].data[i].color = all_chart_options.colors[i];
        });
    } else {
        //other charts color by series

        $(chart.series).each(function (i) {
            //update chart
            this.update({
                color: all_chart_options.colors[i]
            }, false);
            //update all_chart_options.series colors
            all_chart_options.series[i].color = all_chart_options.colors[i];
        });
    }

    chart.redraw();
};

module.exports = updateColors;

},{"../initializers/charts/colors_init.js":30}],20:[function(require,module,exports){
"use strict";

var creditsInit = require("../initializers/charts/credits_init.js");

/** when credit options are changed in the side area 
@namespace
*/

var update_credits = {

    /** get and set the credits text **/
    updateCreditText: function updateCreditText(chart, all_chart_options) {

        all_chart_options.credits = creditsInit();

        var new_y = Number($("#chart_height_textinput").val()) + all_chart_options.credits.position.y - 26;
        chart.credits.element.setAttribute("y", new_y);

        //svg text elements don't use break; each new line must be wrapped in a new tspan
        var credits_text = all_chart_options.credits.text.split("<br>").map(function (line, i) {
            return '<tspan x="10" dy="12">' + line + "</tspan>";
        }).join("");

        $(chart.credits.element).html(credits_text);
    }

};

module.exports = update_credits;

},{"../initializers/charts/credits_init.js":31}],21:[function(require,module,exports){
"use strict";

var parseTableInput = require("../parsers/parse_table_input.js");
var utils_forms = require("../utils/utils_forms.js");

/** called when #chart_type_icons .selected or #table_input_textarea is changed - calls functions to reparse data
@namespace
*/

var update_data = {

    /** called when #chart_type_icons .selected or #table_input_textarea is changed - calls functions to reparse data */
    updateData: function updateData(chart, all_chart_options) {

        var chart_type = $("#chart_type_icons .selected").divVal();
        var input = $("#table_input_textarea").val();

        var legend_toggle_enabled = utils_forms.getCheckBoxValue($("#legend_make_toggle_checkbox"));
        var load_series_from = $("#table_input_load_series_from_icons .selected").divVal();
        var parsed_table_output = parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, all_chart_options.colors, all_chart_options);

        //update x-axis categories
        chart.xAxis[0].update({
            categories: parsed_table_output.x_axis_categories
        }, false);

        //remove existing series array
        $(chart.series).each(function () {
            this.remove(false); //false to not redraw yet
        });

        //add new series
        $(parsed_table_output.series).each(function () {
            chart.addSeries(this, false); //false to not redraw yet
        });

        //remove drilldown series
        $(chart.options.drilldown.series).each(function () {
            delete this;
        });

        //add drilldown series if applicable
        if (parsed_table_output.drilldown) {
            $(parsed_table_output.drilldown.series).each(function () {
                chart.options.drilldown.series.push(this);
            });
        }

        //update chart title
        chart.setTitle({
            text: parsed_table_output.title_text
        });

        //chart.options.drilldown.series = parsed_table_output.drilldown || {};
        chart.redraw(true);

        //update chart options for code output
        all_chart_options.series = parsed_table_output.series;
        all_chart_options.xAxis.categories = parsed_table_output.x_axis_categories;
        all_chart_options.drilldown = parsed_table_output.drilldown;
        all_chart_options.title.text = parsed_table_output.title_text;

        //update whether legend toggle is enabled
        $("#legend_make_toggle_checkbox").change();
    }

};

module.exports = update_data;

},{"../parsers/parse_table_input.js":51,"../utils/utils_forms.js":54}],22:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** methods for updating individual series options in  #display_series_options - called when its side nav tab is selected.
@module
@param chart {object} the main chart object, built when chart is loaded
@param all_chart_options {object} the main chart options that load into building of the chart and are turned to string for the output
**/

var update_individual_series = {

    /** called when the series type icons are clicked. Binded at the end of populateForm **/
    seriesTypeIconChange: function seriesTypeIconChange(chart, all_chart_options) {
        $(".series_type_icon").click(function () {
            //update series type
            var type = $(this).attr("type");
            var i = $(this).parents(".series_snippet").index();
            chart.series[i].update({
                type: type
            });

            //highlight clicked icon
            $(".selected", $(this).parent()).removeClass("selected");
            $(this).addClass("selected");

            //hide or show the line styles for that series
            type === "line" ? $(".line_style_div:eq(" + i + ")").show() : $(".line_style_div:eq(" + i + ")").hide();

            //update all_chart_options
            all_chart_options.series[i].type = type;
        });
    },

    /** called when the jscolor selector is changed (mouse still down). Updates the actual chart object and all_chart_options code output object***/
    updateSeriesColor: function updateSeriesColor(chart, all_chart_options, i, jscolor) {

        all_chart_options.colors[i] = typeof jscolor === "string" ? jscolor : jscolor.toRGBString();
        all_chart_options.series[i].color = all_chart_options.colors[i];
        chart.series[i].update({
            color: all_chart_options.series[i].color
        });
    },

    /** bound with populateForm. When the line style dropdown is changed, change that series **/
    lineStyleSelectChange: function lineStyleSelectChange(chart, all_chart_options) {
        $(".line_style_select").change(function () {
            var line_style = $(this).val();
            var i = $(this).parents(".series_snippet").index();
            chart.series[i].update({
                dashStyle: line_style
            });
        });
    },

    /** makes a color box, called from populateForm **/
    makeSeriesColorDiv: function makeSeriesColorDiv(chart, all_chart_options, i) {
        var series_color_div = document.createElement("div");
        series_color_div.className = "series_color_div";

        // make a color label
        var series_color_label = document.createElement("label");
        series_color_label.className = "series_color_label";
        series_color_label.textContent = "Color: ";

        //make color input box
        var series_color = document.createElement('input');
        $(series_color).addClass("jscolor {valueElement:null}");
        series_color.id = "series_color_" + i;

        //init with color, using jscolor.js
        var picker = new jscolor(series_color, {
            onFineChange: function onFineChange() {
                update_individual_series.updateSeriesColor(chart, all_chart_options, i, this);
            }

        });

        //convert rgb string into arrray
        var c = i < 15 ? i : i - 15;
        var color = all_chart_options.colors[c] || "#000";

        //create picker
        if (color.charAt(0) === "#") {
            //if hex
            picker.fromString(color);
        } else {
            //else color is rgb
            var rgb = utils_main.rgb2arr(color);
            picker.fromRGB(rgb[0], rgb[1], rgb[2]);
        }

        //make clear float div
        var clear_div = utils_main.makeClearFloatDiv();

        series_color_div.appendChild(series_color_label);
        series_color_div.appendChild(series_color);
        series_color_div.appendChild(clear_div);

        return series_color_div;
    },

    /** add line style option - shown only if type is line**/
    makeLineStyleDiv: function makeLineStyleDiv(i) {

        var line_style_div = document.createElement("div");
        line_style_div.className = "line_style_div";

        var line_style_label = document.createElement("label");
        line_style_label.className = "line_style_label";
        line_style_label.textContent = "Line style: ";

        var line_style_select = document.createElement("select");
        line_style_select.className = "line_style_select";
        line_style_select.id = "line_style_select_" + i;

        var line_style_option_solid = document.createElement("option");
        line_style_option_solid.textContent = "Solid";
        line_style_option_solid.value = "Solid";

        var line_style_option_dash = document.createElement("option");
        line_style_option_dash.textContent = "Dash";
        line_style_option_dash.value = "Dash";

        var line_style_option_dot = document.createElement("option");
        line_style_option_dot.textContent = "Dot";
        line_style_option_dot.value = "Dot";

        var line_style_option_long_dash = document.createElement("option");
        line_style_option_long_dash.textContent = "Long dash";
        line_style_option_long_dash.value = "LongDash";

        var line_style_option_dash_dot = document.createElement("option");
        line_style_option_dash_dot.textContent = "Dash-dot";
        line_style_option_dash_dot.value = "DashDot";

        line_style_select.appendChild(line_style_option_solid);
        line_style_select.appendChild(line_style_option_dash);
        line_style_select.appendChild(line_style_option_dot);
        line_style_select.appendChild(line_style_option_long_dash);
        line_style_select.appendChild(line_style_option_dash_dot);

        line_style_div.appendChild(line_style_label);
        line_style_div.appendChild(line_style_select);

        return line_style_div;
    },

    makeSeriesTypeDiv: function makeSeriesTypeDiv(chart, all_chart_options, i) {
        var series_type_div = document.createElement("div");
        series_type_div.className = "series_type_div";
        series_type_div.id = "series_type_div_" + i;

        var series_type_label = document.createElement("label");
        series_type_label.className = "series_type_label";
        series_type_label.textContent = "Type: ";

        var series_type_column = document.createElement("div");
        $(series_type_column).addClass("series_type_icon series_type_column").attr("type", "column");
        if (chart.series[i].type === "column") {
            $(series_type_column).addClass("selected");
        }

        var series_type_line = document.createElement("div");
        $(series_type_line).addClass("series_type_icon series_type_line").attr("type", "line");
        if (chart.series[i].type === "line") {
            $(series_type_line).addClass("selected");
        }

        var clear_div = utils_main.makeClearFloatDiv();

        series_type_div.appendChild(series_type_label);
        series_type_div.appendChild(series_type_line);
        series_type_div.appendChild(series_type_column);
        series_type_div.appendChild(clear_div);

        return series_type_div;
    },

    /** populates #display_series_options with options for each series. Called when its side nav tab is selected. **/
    populateForm: function populateForm(chart, all_chart_options) {

        var display_series_options_inner_div = $("#display_series_options_inner_div");
        display_series_options_inner_div.empty();

        $(chart.series).each(function (i) {

            //make series name header
            var series_name = document.createElement('h5');
            series_name.textContent = this.name;

            //make series color input
            var series_color_div = update_individual_series.makeSeriesColorDiv(chart, all_chart_options, i);

            //make outer snippet p tag
            var series_snippet = document.createElement('p');
            series_snippet.className = "series_snippet";

            series_snippet.appendChild(series_name);
            series_snippet.appendChild(series_color_div);

            //make series type div if applicable
            if (["line", "column"].indexOf(all_chart_options.chart.type) > -1) {
                var series_type_div = update_individual_series.makeSeriesTypeDiv(chart, all_chart_options, i);
                series_snippet.appendChild(series_type_div);
            }

            //make line style div
            var line_style_div = update_individual_series.makeLineStyleDiv(i);
            series_snippet.appendChild(line_style_div);

            //append all
            $(display_series_options_inner_div).append(series_snippet);

            if (all_chart_options.chart.type === "line") {
                $(".line_style_div").show();
            }
        });

        //bind series type changes
        update_individual_series.seriesTypeIconChange(chart, all_chart_options);
        //bind line style changes
        update_individual_series.lineStyleSelectChange(chart, all_chart_options);
    }

};

module.exports = update_individual_series;

},{"../utils/utils_main.js":55}],23:[function(require,module,exports){
"use strict";

/** when legend options are changed in the side area 
@namespace
*/

var update_legend = {

    /** decide if the legend should be reverse order **/
    updateIsReversed: function updateIsReversed(val, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.reversed = val;
        legend.render();

        all_chart_options.legend.reversed = val;
    },

    /** if 'no legend' is selected, hide the legend, and set options, else, show it with the correct layout */
    updateLayout: function updateLayout(val, chart, all_chart_options) {

        var legend = chart.legend;
        if (val === "no_legend") {
            legend.group.hide();
            legend.box.hide();
            legend.display = false;
            legend.options.enabled = false;
            legend.render(false);

            val = undefined;
        } else {

            legend.options.layout = val;
            legend.render(false);
            legend.group.show();
            legend.box.show();
            legend.display = true;
            legend.options.enabled = true;
        }

        all_chart_options.legend.layout = val;
        all_chart_options.legend.enabled = legend.options.enabled;
    },

    /** set if when one legend item is clicked, the others hide */
    updateToggle: function updateToggle(toggle_enabled, chart, all_chart_options) {

        //update all_chart_options
        if (toggle_enabled) {

            var legendItemClick = function legendItemClick(event) {
                var selected = this.index;
                var allSeries = this.chart.series;
                $.each(allSeries, function (index, series) {
                    selected == index ? series.show() : series.hide();
                });
                return false;
            };
        } else {
            var legendItemClick = function legendItemClick(event) {};
        }

        if (!chart) {
            return legendItemClick;
        } else {
            all_chart_options.plotOptions.series.events.legendItemClick = legendItemClick;
        }

        //update in current chart
        $(chart.series).each(function (i) {
            this.update({
                visible: i > 0 && toggle_enabled === true ? false : true,
                events: {
                    legendItemClick: all_chart_options.plotOptions.series.events.legendItemClick
                }
            });
        });
    },

    /** update X and Y positions on legend */

    updateXYpositions: function updateXYpositions(newX, newY, chart, all_chart_options) {
        var legend = chart.legend;
        legend.options.x = newX;
        legend.options.y = newY;
        legend.render(false);

        all_chart_options.legend.x = newX;
        all_chart_options.legend.y = newY;
    }

};

module.exports = update_legend;

},{}],24:[function(require,module,exports){
"use strict";

/** when template are changed in the side area, these methods are called 
@namespace
*/
var update_template = {

    /** change the chart's RenderTo ID (the div ID that the chart is loaded into)  **/
    changeID: function changeID(new_ID, all_chart_options) {

        new_ID = $.trim(new_ID).replace(/^[^a-zA-Z_]+/g, "");
        if (!all_chart_options) {
            return new_ID;
        } else {
            all_chart_options.chart.renderTo = new_ID;
        }
    },

    /** change the chart height and witdh **/
    resize: function resize(val, dimension, chart, all_chart_options) {
        val = Number(val);
        if (!isNaN(val)) {
            $(".chart_display_area, .map_display_area").css(dimension, val + "px");
        }

        if (all_chart_options.chart.type !== "map") {
            chart.reflow();
        }
    },

    /** change the chart's inner margins **/
    margin: function margin(margins_arr, chart, all_chart_options) {

        $.each(chart.axes, function (i, e) {
            e.isDirty = true; //to tell axes to refresh
        });
        chart.margin = margins_arr;
        chart.redraw(false);

        all_chart_options.chart.margin = margins_arr;
    }
};

module.exports = update_template;

},{}],25:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");
var utils_forms = require("../utils/utils_forms");

/** when tooltip options are changed in the side area, these methods are called 
@namespace
*/
var update_tooltip = {

    /** gets a tooltip for bubble charts. Called from updateToolTip **/
    getBubbleTooltip: function getBubbleTooltip(chart, decimals, signs_arr, multiplier, chart_type, z_title) {

        var newTooltip = function newTooltip() {
            var y_axis_title = this.series.yAxis.axisTitle ? this.series.yAxis.axisTitle.textStr : "Y-Axis";
            var x_axis_title = this.series.xAxis.axisTitle ? this.series.xAxis.axisTitle.textStr : "X-Axis";

            var s = "<b>" + this.series.name + "</b><br>" + y_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1] + "</b><br/>" + x_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.x * multiplier, decimals) + signs_arr[1] + "</b><br/>" + z_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.x * multiplier, decimals) + signs_arr[1] + "</b>";

            return s.replace(/\$-/g, "-$");
        };

        return newTooltip;
    },

    /** gets a tooltip for scatter charts. Called from updateToolTip**/
    getScatterTooltip: function getScatterTooltip(chart, decimals, signs_arr, multiplier, chart_type) {

        var newTooltip = function newTooltip() {
            var y_axis_title = this.series.yAxis.axisTitle ? this.series.yAxis.axisTitle.textStr : "Y-Axis";
            var x_axis_title = this.series.xAxis.axisTitle ? this.series.xAxis.axisTitle.textStr : "X-Axis";

            var s = "<b>" + this.series.name + "</b><br>" + y_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1] + "</b><br/>" + x_axis_title + ": <b>" + signs_arr[0] + Highcharts.numberFormat(this.x * multiplier, decimals) + signs_arr[1] + "<br/>";

            return s.replace(/\$-/g, "-$");
        };

        return newTooltip;
    },

    /** gets a tooltip for typical charts (line, area, bar etc). Called from updateToolTip**/
    getTypicalTooltip: function getTypicalTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type) {

        var newTooltip;

        if (is_shared) {
            //SHARED TOOLTIP

            if (decimals > 0) {
                //use decimal formatter

                newTooltip = function newTooltip() {

                    var shared_tooltip_arr = [];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push("<b>" + this.name + "</b> <br>" + this.points[point.x].x + ": " + signs_arr[0] + Highcharts.numberFormat(this.points[point.x].y * multiplier, decimals) + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>').replace(/\$-/g, "-$");
                };
            } else {
                //don't use decimal formatter

                newTooltip = function newTooltip() {

                    var shared_tooltip_arr = ["<b>" + this.key + "</b>"];
                    var point = this.point;

                    $.each(chart.series, function () {
                        shared_tooltip_arr.push(this.name + ": " + signs_arr[0] + $(this.points[point.x].y * multiplier).addCommas() + signs_arr[1]);
                    });
                    return shared_tooltip_arr.join('<br/>').replace(/\$-/g, "-$");
                };
            }
        } else {
            //NOT SHARED TOOLTIP

            if (decimals > 0) {
                //use decimal formatter
                newTooltip = function newTooltip() {
                    var s = "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + Highcharts.numberFormat(this.y * multiplier, decimals) + signs_arr[1];
                    return s.replace(/\$-/g, "-$");
                };
            } else {
                //don't use decimal formatter
                newTooltip = function newTooltip() {
                    var s = "<b>" + this.series.name + "</b><br>" + this.x + ": " + signs_arr[0] + $(this.y * multiplier).addCommas() + signs_arr[1];
                    return s.replace(/\$-/g, "-$");
                };
            }
        }

        return newTooltip;
    },

    /** update tooltip - decide which kind of chart and call that get tooltip function **/
    updateToolTip: function updateToolTip(chart, all_chart_options) {

        var newTooltip,
            //will be the returned function
        is_shared = utils_forms.getCheckBoxValue($("#chart_tooltip_shared_checkbox")),
            decimals = Number($("#chart_tooltip_force_decimals_select").val()),
            signs = $("#chart_tooltip_signs_select").val(),
            multiplier = Number($("#chart_tooltip_y_multiple_select").val()),
            chart_type = all_chart_options.chart.type,
            signs_arr = [signs === "$" ? "$" : "", signs === "%" ? "%" : ""],
            z_title = "Test Z title";

        //IF A TYPICAL CHART
        if (["area", "line", "bar", "stacked_bar", "column", "stacked_column"].indexOf(chart_type) > -1) {
            newTooltip = update_tooltip.getTypicalTooltip(chart, is_shared, decimals, signs_arr, multiplier, chart_type);
        }

        //IF A SCATTER CHART
        else if (chart_type === "scatter") {
                newTooltip = update_tooltip.getScatterTooltip(chart, decimals, signs_arr, multiplier, chart_type);
            }

            //IF A BUBBLE CHART
            else if (chart_type === "bubble") {
                    newTooltip = update_tooltip.getBubbleTooltip(chart, decimals, signs_arr, multiplier, chart_type, z_title);
                }

        if (!chart) {
            //for use in tooltip_init
            return newTooltip;
        }

        chart.tooltip.options.formatter = newTooltip;

        update_tooltip.replacement_obj = {
            decimals: decimals,
            multiplier: multiplier,
            signs_arr: signs_arr,
            z_title: z_title
        };

        //   all_chart_options.tooltip.formatter = utils_main.stringifyFormatter(newTooltip, replacement_obj);

        all_chart_options.tooltip.formatter = newTooltip;
    }

};

module.exports = update_tooltip;

},{"../utils/utils_forms":54,"../utils/utils_main.js":55}],26:[function(require,module,exports){
"use strict";

/** when X-axis options are changed in the side area, these methods are called 
@namespace
*/

var update_x_axis = {

    /**makes x-axis MLR or standard style **/
    toggleMLRStyle: function toggleMLRStyle(is_checked, chart, all_chart_options) {

        //if using MLR styles
        if (is_checked) {
            all_chart_options.xAxis.tickPosition = "inside";
            all_chart_options.xAxis.tickColor = "#000";
        } else {
            //using standard styles
            all_chart_options.xAxis.tickPosition = "outside";
            all_chart_options.xAxis.tickColor = "#C0D0E0";
        }

        chart.xAxis[0].update({
            tickPosition: all_chart_options.xAxis.tickPosition,
            tickColor: all_chart_options.xAxis.tickColor
        });
    },

    /** update the x axis title */
    updateTitle: function updateTitle(new_title, chart, all_chart_options) {
        chart.xAxis[0].setTitle({
            text: new_title
        });

        all_chart_options.xAxis.title.text = new_title;
    },

    /** update x-axis type */
    updateType: function updateType(chart_type, chart, all_chart_options) {
        chart.xAxis[0].update({
            type: chart_type === "drilldown" ? "category" : "linear"
        });

        all_chart_options.xAxis.type = chart_type === "drilldown" ? "category" : "linear";
    },

    /** update x axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        if (isNaN(newInterval) || newInterval === 0) {
            newInterval = undefined;
        };

        if (!chart) {
            // called when this is used in x_axis_init
            return newInterval;
        }

        if (newInterval > chart.xAxis[0].dataMax) {
            newInterval = chart.xAxis[0].dataMax;
        }

        chart.xAxis[0].update({
            tickInterval: newInterval
        });
        all_chart_options.xAxis.tickInterval = newInterval;
    }

};

module.exports = update_x_axis;

},{}],27:[function(require,module,exports){
'use strict';

var utils_main = require("../utils/utils_main.js");

/** when Y-axis options are changed in the side area, these methods are called 
@namespace
*/
var update_y_axis = {

    /**makes y-axis MLR or standard style **/
    toggleMLRStyle: function toggleMLRStyle(is_checked, chart, all_chart_options) {

        //if using MLR styles
        if (is_checked) {
            all_chart_options.yAxis.tickWidth = 0;
            all_chart_options.yAxis.gridLineDashStyle = 'Solid';
        } else {
            //using standard styles
            all_chart_options.yAxis.tickWidth = 1;
            all_chart_options.yAxis.gridLineDashStyle = 'Dot';
        }

        chart.yAxis[0].update({
            tickWidth: all_chart_options.yAxis.tickWidth,
            gridLineDashStyle: all_chart_options.yAxis.gridLineDashStyle
        });
    },

    /** update format when dollar / percent signs select is changed */
    updateFormatter: function updateFormatter(sign, y_decimals, dividend, chart, all_chart_options) {

        var y_signs_arr = [sign === "$" ? "$" : "", sign === "%" ? "%" : ""];

        if (y_decimals !== "null") {
            //if decimals are not null  

            var newYFormat = function newYFormat() {
                var s = Highcharts.numberFormat(this.value / dividend, y_decimals);
                return y_signs_arr[0] + s.replace(/\$-/g, "-$") + y_signs_arr[1];
            };
        } else {
            //if decimals are null

            var newYFormat = function newYFormat() {
                var s = this.value / dividend == parseInt(this.value / dividend) ? Highcharts.numberFormat(this.value, 0) : Highcharts.numberFormat(this.value / dividend, 1);
                return y_signs_arr[0] + s.replace(/\$-/g, "-$") + y_signs_arr[1];
            };
        }

        if (!chart) {
            // called when this is used in y_axis_init
            return newYFormat;
        }

        chart.yAxis[0].update({
            labels: {
                formatter: newYFormat
            }
        });

        update_y_axis.replacement_obj = {
            y_decimals: y_decimals,
            dividend: dividend,
            y_signs_arr: y_signs_arr
        };

        all_chart_options.yAxis.formatter = newYFormat;
    },

    /** update if y-axis is log */
    updateIsLog: function updateIsLog(val, chart, all_chart_options) {

        var type = val === true ? "logarithmic" : "linear";
        if (!chart) {
            // called when this is used in y_axis_init
            return type;
        }

        chart.yAxis[0].update({
            type: type
        });
        all_chart_options.yAxis.type = type;
    },

    /** update if y axis labels are on opposite side */
    updateIsOpposite: function updateIsOpposite(val, chart, all_chart_options) {
        chart.yAxis[0].update({
            opposite: val
        });
        all_chart_options.yAxis.opposite = val;
    },

    /** update y-axis max */
    updateMax: function updateMax(newMax, chart, all_chart_options) {
        newMax = utils_main.checkforUndefined(newMax);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMax;
        }

        chart.yAxis[0].update({
            max: newMax
        });

        all_chart_options.yAxis.max = newMax;
    },

    /** update y-axis min */
    updateMin: function updateMin(newMin, chart, all_chart_options) {
        newMin = utils_main.checkforUndefined(newMin);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMin;
        }

        chart.yAxis[0].update({
            min: newMin
        });

        all_chart_options.yAxis.min = newMin;
    },

    /** update the y axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.yAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.yAxis.title.text = newTitle;
    },

    /** update y axis x-position (title.x) */

    updateXPosition: function updateXPosition(newXPosition, chart, all_chart_options) {

        newXPosition = utils_main.checkforUndefined(newXPosition);

        chart.yAxis[0].setTitle({
            x: newXPosition
        });

        all_chart_options.yAxis.title.x = newXPosition;
    },

    /** update y axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        newInterval = utils_main.checkforUndefined(newInterval);

        if (!chart) {
            // called when this is used in y_axis_init
            return newInterval;
        }

        if (newInterval > chart.yAxis[0].dataMax) {
            newInterval = chart.yAxis[0].dataMax;
        }

        chart.yAxis[0].update({
            tickInterval: newInterval

        });
        all_chart_options.yAxis.tickInterval = newInterval;
    }

};

module.exports = update_y_axis;

},{"../utils/utils_main.js":55}],28:[function(require,module,exports){
"use strict";

var AllChartOptions = require("../../constructors/charts/all_chart_options.js"),
    chartInit = require("./chart_init.js"),
    colorsInit = require("./colors_init.js"),
    creditsInit = require("./credits_init.js"),
    exportingInit = require("./exporting_init.js"),
    legendInit = require("./legend_init.js"),
    plotOptionsInit = require("./plot_options_init.js"),
    seriesInit = require("./series_init.js"),
    subtitleInit = require("./subtitle_init.js"),
    titleInit = require("./title_init.js"),
    tooltipInit = require("./tooltip_init.js"),
    xAxisInit = require("./x_axis_init.js"),
    yAxisInit = require("./y_axis_init.js"),
    parseTableInput = require("../../parsers/parse_table_input.js"),
    utils_forms = require("../../utils/utils_forms.js");

/** create and return an instance of all_chart_options 
@module
**/
var allChartOptionsInit = function allChartOptionsInit() {
    var chart_type = $("#chart_type_icons .selected").divVal();
    var load_series_from = $("#table_input_load_series_from_icons .selected").divVal();
    var legend_toggle_enabled = utils_forms.getCheckBoxValue($("#legend_make_toggle_checkbox"));
    var input = $("#table_input_textarea").val();
    var colors = colorsInit();

    var parsed_table_output = parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, colors);

    //get options from individual inits
    var options = {
        chart: chartInit(chart_type),
        credits: creditsInit(),
        colors: colors,
        // exporting: exportingInit(),
        legend: legendInit(),
        plotOptions: plotOptionsInit(legend_toggle_enabled),
        series: parsed_table_output.series, //removed seriesInit(parsed_table_output.series)
        drilldown: parsed_table_output.drilldown || {},
        subtitle: subtitleInit(),
        title: titleInit(parsed_table_output.title_text),
        tooltip: tooltipInit(),
        xAxis: xAxisInit(parsed_table_output.x_axis_categories, chart_type),
        yAxis: yAxisInit(chart_type)

    };

    var all_chart_options = new AllChartOptions(options);
    return all_chart_options;
};

module.exports = allChartOptionsInit;

},{"../../constructors/charts/all_chart_options.js":3,"../../parsers/parse_table_input.js":51,"../../utils/utils_forms.js":54,"./chart_init.js":29,"./colors_init.js":30,"./credits_init.js":31,"./exporting_init.js":32,"./legend_init.js":33,"./plot_options_init.js":34,"./series_init.js":35,"./subtitle_init.js":36,"./title_init.js":37,"./tooltip_init.js":38,"./x_axis_init.js":39,"./y_axis_init.js":40}],29:[function(require,module,exports){
"use strict";

var ChartOptions = require("../../constructors/charts/chart.js");
var update_template = require("../../form_updates/update_template.js");

/** Initializer for "chart" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var chartInit = function chartInit(chart_type) {

    if (chart_type === "drilldown") {
        chart_type = "column";
    }

    //load options from user inputs
    var options = {
        margin: [Number($("#top_margin_textinput").val()), Number($("#right_margin_textinput").val()), Number($("#bottom_margin_textinput").val()), Number($("#left_margin_textinput").val())],
        renderTo: update_template.changeID($("#chart_id_textinput").val()),
        type: chart_type
    };

    var chart_options = new ChartOptions(options);
    return chart_options;
};

module.exports = chartInit;

},{"../../constructors/charts/chart.js":4,"../../form_updates/update_template.js":24}],30:[function(require,module,exports){
"use strict";

/** Initializer for "colors" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var colorsInit = function colorsInit() {
    var color_arr = [];
    $("#color_palettes .selected .color_palette_cell").each(function () {
        color_arr.push($(this).css("background-color"));
    });

    if (color_arr.length < 1) {
        color_arr = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
    }

    return color_arr;
};

module.exports = colorsInit;

},{}],31:[function(require,module,exports){
"use strict";

var Credits = require("../../constructors/charts/credits.js");

/** Initializer for "credits" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var creditsInit = function creditsInit() {

    var credits_text = $("#chart_credits_text_textarea").val().replace(/\n/g, "<br>");
    /** calculate vertical y position of credits, depending on how many lines it has 
    @param text {string} the credits text, originally from #chart_credits_text_textarea
    */
    var calculateCreditsPosition = function calculateCreditsPosition(text) {
        var new_y_pos = text.split("<br>").length * -11;
        return new_y_pos;
    };

    //load options from user inputs
    var options = {
        text: credits_text,
        position: {
            y: calculateCreditsPosition(credits_text)
        }
    };

    var credits = new Credits(options);
    return credits;
};

module.exports = creditsInit;

},{"../../constructors/charts/credits.js":5}],32:[function(require,module,exports){
"use strict";

var Exporting = require("../../constructors/charts/exporting.js");

/** Initializer for "exporting" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var exportingInit = function exportingInit() {

    //load options from user inputs
    var options = {};

    var exporting = new Exporting(options);
    return exporting;
};

module.exports = exportingInit;

},{"../../constructors/charts/exporting.js":6}],33:[function(require,module,exports){
"use strict";

var Legend = require("../../constructors/charts/legend.js");

/** Initializer for "legend" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var legendInit = function legendInit() {

    var getLegendLayout = function getLegendLayout() {
        var legend_layout_val = $("#legend_layout_select").val();
        return legend_layout_val !== "no_legend" ? legend_layout_val : undefined;
    };

    //load options from user inputs
    var options = {
        layout: getLegendLayout(),
        x: Number($("#legend_placement_x").val()),
        y: Number($("#legend_placement_y").val())

    };

    var legend = new Legend(options);
    return legend;
};

module.exports = legendInit;

},{"../../constructors/charts/legend.js":7}],34:[function(require,module,exports){
"use strict";

var PlotOptions = require("../../constructors/charts/plot_options.js");
var update_legend = require("../../form_updates/update_legend.js");
var utils_forms = require("../../utils/utils_forms.js");

/** Initializer for "plotOptions" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var plotOptionsInit = function plotOptionsInit(legend_toggle_enabled) {

    //load options from user inputs
    var options = {
        series: {
            events: {
                // when one legend item is clicked, the others hide
                legendItemClick: update_legend.updateToggle(legend_toggle_enabled)
            },

            dataLabels: {
                enabled: utils_forms.getCheckBoxValue($("#chart_show_data_labels_checkbox"))
            },

            lineWidth: 1.5,
            marker: {
                enabled: false,
                states: {
                    hover: {
                        enabled: true,
                        radius: 5
                    }
                }
            },
            states: {
                hover: {
                    lineWidth: 4
                }
            }

        }

    };

    /* unique chart options (choosing to keep these with every chart so I don't have to reload them with individual series when chart types are updated) */

    //bar or column options
    options.series.groupPadding = 0.2;
    options.series.pointPadding = 0.1;
    options.series.pointPlacement = null;
    options.series.stacking = null;
    options.series.minPointLength = 2;

    //just for bubble charts
    options.series.maxSize = 50;
    options.series.sizeBy = 'width'; //instead of 'area', seems more accurate

    var plotOptions = new PlotOptions(options);
    return plotOptions;
};

module.exports = plotOptionsInit;

},{"../../constructors/charts/plot_options.js":8,"../../form_updates/update_legend.js":23,"../../utils/utils_forms.js":54}],35:[function(require,module,exports){
"use strict";

var Series = require("../../constructors/charts/series.js");

/** Initializer for "series" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var seriesInit = function seriesInit(series) {

    //load options from user inputs
    var options = series;

    var series = new Series(options);
    return series.series;
};

module.exports = seriesInit;

},{"../../constructors/charts/series.js":9}],36:[function(require,module,exports){
"use strict";

var Subtitle = require("../../constructors/charts/subtitle.js");

/** Initializer for "subtitle" options section of all_chart_options. Creates and returns a new instance
@module
*/

var subtitleInit = function subtitleInit() {

    //load options from user inputs
    var options = {
        text: $("#chart_subtitle_textarea").val()
    };

    var subtitle = new Subtitle(options);
    return subtitle;
};

module.exports = subtitleInit;

},{"../../constructors/charts/subtitle.js":10}],37:[function(require,module,exports){
"use strict";

var Title = require("../../constructors/charts/title.js");

/** Initializer for "title" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var titleInit = function titleInit(title_text) {

    //load options from user inputs
    var options = {
        text: title_text
    };

    var title = new Title(options);
    return title;
};

module.exports = titleInit;

},{"../../constructors/charts/title.js":11}],38:[function(require,module,exports){
"use strict";

var Tooltip = require("../../constructors/charts/tooltip.js");
var utils_forms = require("../../utils/utils_forms.js");

/** Initializer for "tooltip" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var tooltipInit = function tooltipInit() {

    //load options from user inputs
    var options = {

        formatter: undefined ///formatter is created with update_tooltip as a callback (needs chart to exist first)

    };

    var tooltip = new Tooltip(options);
    return tooltip;
};

module.exports = tooltipInit;

},{"../../constructors/charts/tooltip.js":12,"../../utils/utils_forms.js":54}],39:[function(require,module,exports){
"use strict";

var update_x_axis = require("../../form_updates/update_x_axis.js");
var XAxis = require("../../constructors/charts/x_axis.js");

/** Initializer for "xAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var xAxisInit = function xAxisInit(categories, chart_type) {

    //load options from user inputs
    var options = {

        categories: categories || undefined,
        plotLines: [{
            "value": 0,
            "color": "#c0c0c0",
            "dashStyle": "solid",
            "width": chart_type === "scatter" || chart_type === "bubble" ? 1 : 0
        }],
        title: {
            align: chart_type === "bar" || chart_type === "stacked_bar" ? "high" : "middle",
            text: $("#chart_x_axis_title_textarea").val(),
            x: chart_type === "bar" || chart_type === "stacked_bar" ? 40 : 0
        },
        tickInterval: update_x_axis.updateTickmarkInterval(Number($("#chart_x_axis_tickmark_interval_input").val())),
        type: chart_type === "drilldown" ? "category" : "linear"

    };

    var xAxis = new XAxis(options);
    return xAxis;
};

module.exports = xAxisInit;

},{"../../constructors/charts/x_axis.js":13,"../../form_updates/update_x_axis.js":26}],40:[function(require,module,exports){
"use strict";

var utils_main = require("../../utils/utils_main.js");
var YAxis = require("../../constructors/charts/y_axis.js");
var update_y_axis = require("../../form_updates/update_y_axis.js");
var utils_forms = require("../../utils/utils_forms.js");

/** Initializer for "yAxis" options section of all_chart_options. Creates and returns a new instance 
@module
*/
var yAxisInit = function yAxisInit(chart_type) {

    /** load options from user inputs */
    var options = {

        labels: {
            formatter: undefined //fomatter is made on call back in all_form_updates.js
        },

        max: update_y_axis.updateMax(Number($("#chart_y_axis_max_input").val())),
        min: update_y_axis.updateMin(Number($("#chart_y_axis_min_input").val())),
        type: update_y_axis.updateIsLog(utils_forms.getCheckBoxValue($("#chart_y_axis_log_checkbox"))),
        opposite: utils_forms.getCheckBoxValue($("#chart_y_axis_opposite_checkbox")),
        tickInterval: update_y_axis.updateTickmarkInterval(Number($("#chart_y_axis_tickmark_interval_input").val())),

        title: {
            text: $("#chart_y_axis_title_textarea").val(),
            align: chart_type === "bar" ? "middle" : "high",
            x: chart_type === "bar" || chart_type === "stacked_bar" ? 0 : Number($("#chart_y_axis_x_position_input").val()),
            y: chart_type === "bar" || chart_type === "stacked_bar" ? 8 : -20
        }

    };

    var yAxis = new YAxis(options);
    return yAxis;
};

module.exports = yAxisInit;

},{"../../constructors/charts/y_axis.js":14,"../../form_updates/update_y_axis.js":27,"../../utils/utils_forms.js":54,"../../utils/utils_main.js":55}],41:[function(require,module,exports){
"use strict";

/** Given an array of map areas, this sorts them by value and decides which colors they should have 
@module
**/

var colors_init = {

    cached_map_options: {},

    /** colors existing svg paths - used when chart is updated  **/
    colorPaths: function colorPaths(all_map_options) {

        $.each(all_map_options.areas, function () {

            $(".map_display_area path[loc_name='" + this.loc_name + "'], .map_display_area circle[loc_name='" + this.loc_name + "']").attr("fill", this.color);
        });
    },

    getBoundaryMapColors: function getBoundaryMapColors(all_map_options, colors) {

        all_map_options = all_map_options || colors_init.cached_map_options; //used cached if all_map_options not passed

        //if a all_map_options is passed, calculate new value ranges, else used the cached array

        //get all values in order
        var values_arr = [];
        $.each(all_map_options.areas, function () {
            if (this.value) {
                values_arr.push(this.value);
            }
        });
        values_arr.sort();

        //divide values into ranges
        var value_ranges = []; //to be used to color areas
        for (var i = .2; i < 1; i = i + .2) {
            value_ranges.push(values_arr[Math.floor(values_arr.length * i)]);
        }

        colors_init.cached_value_ranges = value_ranges; //set new cached array

        //add color property to each obj in map_objs depending on its value
        $.each(all_map_options.areas, function () {
            if (this.value === null || this.value === "N/A") {
                this.color = "rgb(223, 223, 223)"; //gray
            } else if (this.value <= value_ranges[0]) {
                    this.color = colors[0];
                } else if (this.value > value_ranges[0] && this.value <= value_ranges[1]) {
                    this.color = colors[1];
                } else if (this.value > value_ranges[1] && this.value <= value_ranges[2]) {
                    this.color = colors[2];
                } else if (this.value > value_ranges[2] && this.value <= value_ranges[3]) {
                    this.color = colors[3];
                } else if (this.value > value_ranges[3]) {
                    this.color = colors[4];
                }
        });

        colors_init.cached_map_options = all_map_options;
        //    console.log("values", values_arr);
        //    console.log("map", map_objs);

        return all_map_options;
    },

    //make and return an array of colors from a color palette
    newColorArray: function newColorArray(color_palette) {
        var selected_colors = [];
        $.each($(".map_color_palette_cell", color_palette), function () {
            selected_colors.push($(this).css("background-color"));
        });

        return selected_colors;
    }

};

module.exports = colors_init;

},{}],42:[function(require,module,exports){
"use strict";

var parseForBoundaryMap = require("../../parsers/parse_for_boundary_map.js");
var map_colors_init = require("./map_colors_init.js");
var mapTitleInit = require("./map_title_init.js");

/** 
Map initialization object
@namespace
**/

var map_init = {

    createAllMapOptions: function createAllMapOptions(areas) {

        //setup empty all_map_options
        var all_map_options = {
            title: "",
            subtitle: "",
            areas: areas,
            legend: ""

        };

        var table_input = $("#table_input_textarea").val();
        all_map_options.title = mapTitleInit(table_input);

        parseForBoundaryMap(all_map_options, table_input); //mods areas with values depending on table input

        var colors = map_colors_init.newColorArray($(".map_color_palette_row.selected")); //gets array of colors depending on what is selected
        map_colors_init.getBoundaryMapColors(all_map_options, colors); //mods all_map_options.areas to include fill colors depending on values

        return all_map_options;
    },

    /** converts all_map_options (actually an array of objects by now after the .get() auto conversion) to svg and puts it on page **/
    convertMapOptionsToSVG: function convertMapOptionsToSVG(all_map_options) {

        var map_display_area = $(".map_display_area");
        map_display_area.empty();

        var map_outer_div = map_init.getMapOuterDiv(); //creates and returns outer map div

        var map_outer_svg = map_init.getMapOuterSVG(); //creates and returns empty map svg tag
        map_init.populateSVG(all_map_options, map_outer_svg); //colorizes paths, sets circle attributes, appends g elements to svg

        var map_title = map_init.getMapTitle(all_map_options.title); //creates and returns a styled map h2 title with text
        var tooltip_div = map_init.getMapTooltip(); //creates and returns an empty tooltip div template

        //put elements together
        map_outer_div.appendChild(tooltip_div);
        map_outer_div.appendChild(map_title);
        map_outer_div.appendChild(map_outer_svg); //put svg in outer div
        map_display_area.append($(map_outer_div)); //put map on page

        map_init.resizeMap(); //adjust map_display_area size

        //init tooltip and highlighting
        map_init.setUpMapHover();
    },

    /** creates and returns an empty map outer div. This will hold the map svg, tooltip box, legend, title, etc. **/

    getMapOuterDiv: function getMapOuterDiv() {
        var div = document.createElement("div");
        div.setAttribute("style", "position: relative; width: 695px; min-height: 480px; margin: auto; background-color:#FFFFFF;");
        div.setAttribute("class", "map_outer_div");

        return div;
    },

    /** creates and returns an empty map svg element **/
    getMapOuterSVG: function getMapOuterSVG() {

        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.setAttribute("height", 450);
        svg.setAttribute("width", 680);
        svg.setAttribute("class", "map_svg");
        svg.setAttribute("viewBox", "180 0 620 620");
        svg.setAttribute("style", "z-index: 400; position: relative; left: 13px; top: 0px; background-color: #fff;");

        return svg;
    },

    /** creates and returns an empty tooltip div template **/
    getMapTooltip: function getMapTooltip() {

        var tooltip_div = document.createElement("div");
        tooltip_div.className = "map_tooltip";
        tooltip_div.setAttribute("style", "min-width: 251px; min-height: 94px; background-color: #FCF8E3; border: solid 1px #395463; position: absolute; left: 373px; top: 5px; z-index: 500; display: none;");

        var tooltip_title = document.createElement("h2");
        tooltip_title.className = "tooltip_title";
        tooltip_title.setAttribute("style", "color: #000; font-family: sans-serif; font-weight: bold; font-size:14px; margin: 5px 0px 0px 5px; ");

        var tooltip_main_value = document.createElement("h4");
        tooltip_main_value.className = "tooltip_main_value";
        tooltip_main_value.setAttribute("style", "color: #395463; font-family: sans-serif; font-weight: bold; font-size:38px; margin-left: 5px; margin-top: 0px;");

        tooltip_div.appendChild(tooltip_title);
        tooltip_div.appendChild(tooltip_main_value);

        return tooltip_div;
    },

    /** creates and returns a styled map h2 title with text **/
    getMapTitle: function getMapTitle(title) {
        var map_title = document.createElement("h2");
        map_title.textContent = title.text;
        map_title.setAttribute("style", title.style);

        return map_title;
    },

    /** loads and returns map json **/
    loadMapJSON: function loadMapJSON(filename, convertMapJSONtoSVG) {
        $.get(filename, function (areas) {
            var all_map_options = map_init.createAllMapOptions(areas);
            map_init.convertMapOptionsToSVG(all_map_options);
        });
    },

    /** Initial Function (called from map icon click) - calls functions to loads the map json, convert it to svg, loads options and displays map in .map_display_area **/
    loadNewMap: function loadNewMap() {

        map_init.loadMapJSON("json/maps/state_map.json", map_init.convertMapJSONtoSVG);
    },

    /** resizes chart_display_area by changind input values and triggering keyup **/
    resizeMap: function resizeMap() {
        $("#chart_width_textinput").val(710).keyup();
        $("#chart_height_textinput").val(550).keyup();
    },

    /** populates map svg (creates paths and circles) with options from all_map_options.areas **/

    populateSVG: function populateSVG(all_map_options, map_outer_svg) {

        $.each(all_map_options.areas, function () {

            var g = document.createElementNS("http://www.w3.org/2000/svg", "g");

            if (this.d) {
                //state outline

                var el = document.createElementNS("http://www.w3.org/2000/svg", "path");
                el.setAttributeNS(null, "d", this.d); //sets path outline

                if (this.loc_name) {
                    //if it's a named area, set value and color
                    el.setAttributeNS(null, "loc_value", this.value);
                    el.setAttributeNS(null, "fill", this.color || "#E0E0E0");
                }
            } else {
                //circle (DC or metro area)

                var el = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                el.setAttributeNS(null, "r", this.r); //radius
                el.setAttributeNS(null, "cx", this.cx); //x pos
                el.setAttributeNS(null, "cy", this.cy); //y pos
            }

            el.setAttribute("style", this.style);
            el.setAttribute("class", this.class);
            el.setAttribute("loc_name", this.loc_name || "");

            g.appendChild(el);
            map_outer_svg.appendChild(g);
        });
    },

    /** sets up hover functionality for the map **/
    setUpMapHover: function setUpMapHover() {

        //other areas fade out when an area is hovered
        $(".map_svg path[loc_name], .map_svg circle[loc_name]").hover(function () {

            //gray out other states
            $(".map_svg path[loc_name], .map_svg circle[loc_name]").not($(this)).attr("fill-opacity", ".1");

            //populate and show tooltip
            var this_tooltip = $(".map_tooltip", $(this).parents(".map_outer_div"));
            //set title
            $(".tooltip_title", this_tooltip).text($(this).attr("loc_name") || "");
            //set main value
            $(".tooltip_main_value", this_tooltip).text($(Number($(this).attr("loc_value"))).addCommas() || "");

            $(this_tooltip).show(); //show just this map's tooltip
        }, function () {

            //return to all previous fill opacity
            $(".map_svg path[loc_name], .map_svg circle[loc_name]").attr("fill-opacity", "1");

            //hide tooltip
            $(".map_tooltip").hide();
        });
    }

};

module.exports = map_init;

},{"../../parsers/parse_for_boundary_map.js":46,"./map_colors_init.js":41,"./map_title_init.js":43}],43:[function(require,module,exports){
"use strict";

/** Gets title from a table and returns it
@module
*/
var mapTitleInit = function titleInit(table_input) {
    var map_title = {
        text: $.trim($("caption", $(table_input)).text()),
        style: "color: #000; font-family: sans-serif; font-weight: bold; font-size:14px; padding: 10px;"
    };
    return map_title;
};

module.exports = mapTitleInit;

},{}],44:[function(require,module,exports){
"use strict";

var update_individual_series = require("./form_updates/update_individual_series.js");

/**
 * Contains functions that deal with keyboard inputs
 * @namespace
 */
var keyboard_inputs = {

    adjValue: function adjValue(val, direction) {
        var val = Number(val);
        if (!isNaN(val)) {
            return direction === "+" ? val + 10 : val - 10;
        } else {
            return val;
        }
    },

    /** clicks the next element of a given classname than the one selected
    @param classname {string} the class name of each of the elements
    @param selected_classname {string} the name of the selected element
    **/
    clickNext: function clickNext(classname, selected_classname, prev) {
        var only_visible = classname === "tab" ? ":visible" : "";

        var next = 0;
        var len = $("." + classname + only_visible).length;

        $("." + classname + only_visible).each(function (i) {
            if ($(this).hasClass(selected_classname)) {

                next = prev ? i + prev : i + 1; //if a prev exists, go backwards
                if (next === len) {
                    //if end is reached, go to first
                    next = 0;
                }
            }
        });
        $("." + classname + only_visible + ":eq(" + next + ")").click();
    },

    /** when nothing is selected, pressing up or downchanges which side nav tab is selected */
    sideNavTabShortcuts: function sideNavTabShortcuts() {
        var keys = keyboard_inputs,
            $h = $("#chart_height_textinput"),
            $w = $("#chart_width_textinput"),
            $rm = $("#right_margin_textinput"),
            $lm = $("#left_margin_textinput"),
            $tm = $("#top_margin_textinput"),
            $bm = $("#bottom_margin_textinput");

        $(document).unbind().keydown(function (e) {

            //chart resizing keys
            if (e.shiftKey && e.keyCode === 40) {
                //shift + down
                e.preventDefault();
                $h.val(keys.adjValue($h.val(), "+")).keyup();
            } else if (e.shiftKey && e.keyCode === 38) {
                //shift + up
                e.preventDefault();
                $h.val(keys.adjValue($h.val(), "-")).keyup();
            } else if (e.shiftKey && e.keyCode === 37) {
                //shift + left
                e.preventDefault();
                $w.val(keys.adjValue($w.val(), "-")).keyup();
            } else if (e.shiftKey && e.keyCode === 39) {
                //shift + right
                e.preventDefault();
                $w.val(keys.adjValue($w.val(), "+")).keyup();
            }

            //margin resizing keys (up and right margins)
            else if ((event.ctrlKey || event.metaKey) && e.keyCode === 39) {
                    //ctrl/cmd + right
                    e.preventDefault();
                    $rm.val(keys.adjValue($rm.val(), "-")).keyup();
                } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 37) {
                    //ctrl/cmd + left
                    e.preventDefault();
                    $rm.val(keys.adjValue($rm.val(), "+")).keyup();
                } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 38) {
                    //ctrl/cmd + up
                    e.preventDefault();
                    $tm.val(keys.adjValue($tm.val(), "-")).keyup();
                } else if ((event.ctrlKey || event.metaKey) && e.keyCode === 40) {
                    //ctrl/cmd + down
                    e.preventDefault();
                    $tm.val(keys.adjValue($tm.val(), "+")).keyup();
                }

                //margin resizing keys (bottom and left margins
                else if (event.altKey && e.keyCode === 39) {
                        //alt + right
                        e.preventDefault();
                        $lm.val(keys.adjValue($lm.val(), "+")).keyup();
                    } else if (event.altKey && e.keyCode === 37) {
                        //alt + left
                        e.preventDefault();
                        $lm.val(keys.adjValue($lm.val(), "-")).keyup();
                    } else if (event.altKey && e.keyCode === 38) {
                        //alt + up
                        e.preventDefault();
                        $bm.val(keys.adjValue($bm.val(), "+")).keyup();
                    } else if (event.altKey && e.keyCode === 40) {
                        //alt + down
                        e.preventDefault();
                        $bm.val(keys.adjValue($bm.val(), "-")).keyup();
                    }

                    //side nav up and down keys
                    else if (e.keyCode === 38) {
                            //up
                            e.preventDefault();
                            keys.clickNext("tab", "selected_tab", -1); //-1 for prev
                        } else if (e.keyCode === 40) {
                                //down
                                e.preventDefault();
                                keys.clickNext("tab", "selected_tab");
                            }

                            //chart type (cycle through)   
                            else if (e.shiftKey && e.keyCode === 67) {
                                    //shift + c
                                    e.preventDefault();
                                    keys.clickNext("chart_type_icon", "selected");
                                }

                                //data load - series names from columns / rows
                                else if (e.keyCode === 9) {
                                        //tab
                                        e.preventDefault();
                                        keys.clickNext("load_series_from_icon", "selected");
                                    }

                                    //color template (cycle through)   
                                    else if (e.keyCode === 67) {
                                            //c
                                            e.preventDefault();

                                            if ($(".map_display_area").is(":visible")) {
                                                keys.clickNext("map_color_palette_row", "selected"); //map colors
                                            } else {
                                                    keys.clickNext("color_palette_row", "selected"); //chart colors
                                                }
                                        }

                                        //side nav shortcut keys
                                        else if (e.keyCode === 83) {
                                                //s
                                                $("#tab_chart_template").click();
                                            } else if (e.keyCode === 68) {
                                                //d
                                                $("#tab_data").click();
                                            } else if (e.keyCode === 73) {
                                                //i
                                                $("#tab_series_options").click();
                                            } else if (e.keyCode === 76) {
                                                //l
                                                $("#tab_chart_legend").click();
                                            } else if (e.keyCode === 88) {
                                                //x
                                                $("#tab_chart_x_axis").click();
                                            } else if (e.keyCode === 89) {
                                                //y
                                                $("#tab_chart_y_axis").click();
                                            } else if (e.keyCode === 84) {
                                                //t
                                                $("#tab_chart_tooltip").click();
                                            } else if (e.keyCode === 78) {
                                                //n
                                                $("#tab_chart_credits").click();
                                            } else if (e.keyCode === 69) {
                                                //69
                                                $("#tab_chart_extra_options").click();
                                            }
        });
    },

    /** in number entry inputs, pressing up or down will adjust value */
    numberChange: function numberChange(e) {
        if (e.keyCode === 38) {
            //up
            $(this).val(keyboard_inputs.adjValue($(this).val(), "+"));
        } else if (e.keyCode === 40) {
            //down
            $(this).val(keyboard_inputs.adjValue($(this).val(), "-"));
        }
    },

    /** initialize listenters 
    when a number entry input is focused on, attach those event listeners
    when it leaves to main document, attach those. called from navigation_setup.InitNavWithChart()
    **/
    initListeners: function initListeners() {
        $("input, textarea").focus(function () {
            $(document).unbind();
            $(this).off("keydown"); //so it doesnt duplicate when moving from one entry to another
            $(".number_entry").on("keydown", keyboard_inputs.numberChange);
        });
        $("input, textarea").blur(function () {
            $(this).off("keydown");
            //reinit side tab nav shortcuts
            keyboard_inputs.sideNavTabShortcuts();
        });

        //unbind nav quick keys when over the code result area
        $("#main_result_code_div").hover(function () {
            $(document).unbind();
        }, function () {
            keyboard_inputs.sideNavTabShortcuts();
        });
    }

};

module.exports = keyboard_inputs;

},{"./form_updates/update_individual_series.js":22}],45:[function(require,module,exports){
"use strict";

var utils_main = require("./utils/utils_main.js");
var update_individual_series = require("./form_updates/update_individual_series.js");
var keyboard_inputs = require("./keyboard_inputs.js");

/** object that contains functions for all the navigation, ie changing between options and chart types 
@namespace
*/
var navigation_setup = {

    /** when tabs on left side nav bar are clicked, options displayed are changed **/
    sideNavTabsChange: function sideNavTabsChange(chart, all_chart_options) {

        $("#side_nav_tabs .tab").unbind().click(function () {
            //change selected menu tab
            $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
            $(this).addClass("selected_tab");

            //change display div showing
            var selectedID = "#" + $(this).attr("id").replace("tab", "display");
            $("#side_display .selected_display").removeClass("selected_display");
            $(selectedID).addClass("selected_display");

            //if this is "Individual Series Options", run that setup function
            if (selectedID === "#display_series_options") {
                update_individual_series.populateForm(chart, all_chart_options);
            }
        });
    },

    /** when chart code is hovered over, update **/
    chartOutputCodeFocus: function chartOutputCodeFocus(all_chart_options) {
        $("#chart_output_code").unbind().hover(function () {
            utils_main.writeCode(all_chart_options);
        });
    },

    /** when clear next text area button (X) is clicked, find and clear the text of the next textarea */
    clearNextTextareaClick: function clearNextTextareaClick() {
        $(".clear_next_textarea_button").click(function () {
            $(this).next("textarea").val("");
        });
    },

    /** when #color_palette_reverse_icon is clicked, reverse the orders of each palette */
    colorPaletteReverseIconClick: function colorPaletteReverseIconClick() {
        $("#color_palette_reverse_icon").click(function () {
            $(".color_palette_row, .map_color_palette_row").each(function () {
                var this_row = $(this);
                var color_cells = this_row.children('.color_palette_cell, .map_color_palette_cell');
                this_row.prepend(color_cells.get().reverse());
            });
            $("#color_palettes .selected, .map_color_palette_row.selected").click(); //click to change colors in chart
        });
    },

    /** when a get code button is clicked, update and show the code area. */
    getCodeButtonClick: function getCodeButtonClick(all_chart_options) {

        $("#get_code_button").unbind().click(function (e) {
            $(".load_chart_showing").removeClass("load_chart_showing"); //hide the load saved chart area if it's showing
            $("#load_chart_div").hide();

            var $get_code_span = $("#get_code_text");

            if ($get_code_span.text() === "Get code") {
                $("#main_result_code_div").slideDown(50, function () {
                    //write all_chart_options
                    utils_main.writeCode(all_chart_options);
                    $get_code_span.text("Hide code");
                });
            } else {
                $("#main_result_code_div").slideUp(50);
                $get_code_span.text("Get code");
            }

            $(this).toggleClass("code_on");
            $(".chart_display_area").toggleClass("fixed");
        });
    },

    /** when a help icon is clicked */
    helpIconClick: function helpIconClick() {

        $(".help_icon").click(function () {
            $(this).toggleClass("help_on");

            $(".notes", $(this).parents(".display, #main_result_code_div, #load_chart_div, #side_nav_top")).toggle();
        });
    },

    /** when show_load_chart_area_button is clicked, show that entry area **/

    loadChartButtonClick: function loadChartButtonClick(chart, all_chart_options) {
        $("#show_load_chart_area_button").unbind().click(function () {
            $("#main_result_code_div").slideUp(50, function () {
                //hide the get code area if it's showing
                $("#load_chart_div").slideToggle(50);
                $(".code_on").removeClass("code_on");
                $("#get_code_text").text("Get code");
                $(".chart_display_area").toggleClass("fixed");
            });

            $(this).toggleClass("load_chart_showing");
        });
    },

    /** INIT ALL NAVIGATION that needs parameters, called from all_form_updates when page is loaded, and whenever a saved chart is loaded **/
    initNavWithChart: function initNavWithChart(chart, all_chart_options) {

        navigation_setup.chartOutputCodeFocus(all_chart_options);
        navigation_setup.getCodeButtonClick(all_chart_options);
        navigation_setup.loadChartButtonClick(chart, all_chart_options);
        navigation_setup.sideNavTabsChange(chart, all_chart_options);

        keyboard_inputs.initListeners(chart, all_chart_options);
        keyboard_inputs.sideNavTabShortcuts(chart, all_chart_options);
    },

    /** FIRST NAVIGATION INIT, called from app.js when page is loaded. These never need to be re-initialized **/
    firstNavInit: function firstNavInit() {

        navigation_setup.clearNextTextareaClick();
        navigation_setup.colorPaletteReverseIconClick();
        navigation_setup.helpIconClick();
    }

};

module.exports = navigation_setup;

},{"./form_updates/update_individual_series.js":22,"./keyboard_inputs.js":44,"./utils/utils_main.js":55}],46:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for boundary-type maps 
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @returns {object} modded map object with path d's and fill colors
 */

var parseForBoundaryMap = function parseForBoundaryMap(all_map_options, table_input) {

    $("tbody tr", $(table_input)).each(function () {
        //get location name and value from table input

        var thisRow = this;
        var row_loc_name = $.trim($("th", thisRow).text());
        var row_val = $("td:eq(0)", thisRow).getNumber();

        //assign values on objs in all_map_options.areas array
        for (var i = 0, len = all_map_options.areas.length; i < len; i++) {
            if (all_map_options.areas[i].loc_name === row_loc_name) {
                all_map_options.areas[i].value = row_val;
                break;
            }
        }
    });
};

module.exports = parseForBoundaryMap;

},{}],47:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for bubble charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForBubble = function parseForBubble(input, chart_type, colors) {
    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            color: colors[i],
            _symbolIndex: i
        };

        //get data values from each row's td cells (every third cell for xyz groups)
        $("td:nth-child(3n - 1)", this_row).each(function (i) {
            var x = Number($.trim($(this).text()));
            var y = Number($.trim($(this).next().text()));
            var z = Number($.trim($(this).next().next().text()));
            var xyz_arr = [x, y, z];
            seriesObj.data.push(xyz_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForBubble;

},{}],48:[function(require,module,exports){
"use strict";

/** Parsing function for drilldown charts. See http://api.highcharts.com/highcharts#drilldown for more.
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (column or bar)
 * @param colors {array}
 * @returns {object} Object with series array and drilldown series array of objects*/
var parseForDrilldown = function parseForDrilldown(input, chart_type, colors) {
    var output = {};
    output.x_axis_categories = undefined;

    output.series = [{
        name: "test",
        colorByPoint: true,
        data: [],
        type: "column"
    }];

    output.drilldown = {};
    output.drilldown.series = [];

    $("tbody th p", input).each(function (i) {

        var next_sub = $(this).attr("class") ? Number($(this).attr("class").replace("sub", "")) + 1 : 1; //to get the class of the next level sub
        var this_name = $.trim($(this).text());
        var this_drilldown = $("tbody th:eq(" + (i + 1) + ") p", input).is('[class*="' + next_sub + '"]') ? this_name : undefined;
        var this_val = $(this).parent().next().getNumber();

        if (!$(this).is('[class*="sub"]')) {
            //if this doesn't countain "sub" as a class, it's a top level

            //make top level series
            output.series[0].data.push({
                name: this_name,
                y: this_val,
                color: colors[output.series[0].data.length],
                drilldown: this_drilldown
            });
        } else if ($(this).is('[class*="sub"]')) {
            //if this is a sub1 sub2 etc

            output.drilldown.series[output.drilldown.series.length - 1].data.push({ //push to last drilldown series in array (last one made).
                name: this_name,
                y: this_val,
                drilldown: this_drilldown
            });
        } //end if sub or not

        //make drilldown series for those that have a sub under them
        if (this_drilldown) {
            output.drilldown.series.push({
                name: this_name,
                id: this_name,
                data: []
            });
        }
    });

    return output;
};

module.exports = parseForDrilldown;

},{}],49:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for scatter charts
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */
var parseForScatter = function parseForScatter(input, chart_type, colors) {
    var output = {};
    output.x_axis_categories = undefined; //resets this in case there were previous categories

    //load series names from row heads, and data from row tds
    output.series = [];
    $("tbody tr", input).each(function (i) {

        var this_row = $(this);

        var seriesObj = {
            name: $.trim($("th:eq(0)", this_row).text()),
            data: [],
            type: chart_type,
            lineWidth: 0,
            marker: {
                enabled: true
            },
            color: colors[i],
            _symbolIndex: i
        };

        //get data values from each row's td cells
        $("td:even", this_row).each(function (i) {
            var x = Number($.trim($(this).text()));
            var y = Number($.trim($(this).next().text()));
            var xy_arr = [x, y];
            seriesObj.data.push(xy_arr);
        });

        output.series.push(seriesObj);
    });

    return output;
};

module.exports = parseForScatter;

},{}],50:[function(require,module,exports){
"use strict";

/** 
 * Parsing function for typical chart types (line, bar, column) 
 * @module
 * @param input {element} input jquery table element retrieved from textarea
 * @param load_series_from {string} column_heads or column_rows
 * @param chart_type {string} type of chart (line, bar etc.)
 * @returns {object} Object with chart title, X-axis categories and series array of objects
 */

var parseForTypicalChart = function parseForTypicalChart(input, load_series_from, chart_type, legend_toggle_enabled, colors, all_chart_options) {

    var type = chart_type.replace("stacked_", "");

    var output = {};
    output.series = [];

    /** If loading series names from column heads is selected*/
    if (load_series_from === "column_heads") {
        //load x-axis categories from row heads
        output.x_axis_categories = [];
        $("tbody th", input).each(function () {
            output.x_axis_categories.push($.trim($(this).text()));
        });

        //load series object names from column heads, and data from each column tds

        $("thead tr:last th:gt(0)", input).each(function (i) {
            var seriesObj = {
                name: $.trim($.trim($(this).text())),
                data: [],
                //                dataLabels: {
                //                    enabled: all_chart_options ? all_chart_options.plotOptions.series.dataLabels.enabled : false
                //                },
                type: type,
                color: colors[i],
                _symbolIndex: i,
                stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null,
                visible: i > 0 && legend_toggle_enabled === true ? false : true

            };

            //data from each column's tds
            $("tbody tr", input).each(function () {
                var this_row = $(this);
                $("td:eq(" + i + ")", this_row).each(function () {
                    seriesObj.data.push($(this).getNumber());
                });
            });

            output.series.push(seriesObj);
        });

        /** Else if loading series names from row heads is selected*/
    } else {

            //load x-axis categories from column heads
            output.x_axis_categories = [];
            $("thead th:gt(0)", input).each(function () {
                output.x_axis_categories.push($.trim($(this).text()));
            });

            //load series object names from row heads, and data from row tds
            $("tbody tr", input).each(function (i) {

                var this_row = $(this);

                var seriesObj = {
                    name: $.trim($("th:eq(0)", this_row).text()),
                    data: [],
                    //                dataLabels: {
                    //                    enabled: all_chart_options ? all_chart_options.plotOptions.series.dataLabels.enabled : false
                    //                },
                    type: type,
                    color: colors[i],
                    _symbolIndex: i,
                    stacking: ["area", "stacked_bar", "stacked_column"].indexOf(chart_type) > -1 ? "stacked" : null,
                    visible: i > 0 && legend_toggle_enabled === true ? false : true
                };

                //get data values from each row's td cells
                $("td", this_row).each(function () {
                    seriesObj.data.push($(this).getNumber());
                });

                output.series.push(seriesObj);
            });
        }

    return output;
};

module.exports = parseForTypicalChart;

},{}],51:[function(require,module,exports){
"use strict";

/* takes the table html from a given textarea and parses it into an object, depending on useer-selected inputs */

/* parsing function for typical chart types (line, bar, column) */
var parseForTypicalChart = require("./parse_for_typical_chart.js");

/* parsing function for scatter charts */
var parseForScatter = require("./parse_for_scatter.js");

/* parsing function for bubble charts */
var parseForBubble = require("./parse_for_bubble.js");

/* parsing function for drilldown charts */
var parseForDrilldown = require("./parse_for_drilldown.js");

/** 
* Function that decides which parse function to run, depending on chart type
* @module
* @param input {element} input jquery table element retrieved from textarea
* @param load_series_from {string} column_heads or column_rows
* @param chart_type {string} type of chart (line, bar etc.)
* @returns {object} Object with chart title, X-axis categories and series array of objects
*/

var parseTableInput = function parseTableInput(input, load_series_from, chart_type, legend_toggle_enabled, colors, all_chart_options) {

    var output;
    /** Depending on the chart type, start that parsing */
    if (["area", "line", "bar", "stacked_bar", "column", "stacked_column"].indexOf(chart_type) > -1) {
        output = parseForTypicalChart(input, load_series_from, chart_type, legend_toggle_enabled, colors, all_chart_options);
    } else if (chart_type == "bubble") {
        output = parseForBubble(input, chart_type, colors);
    } else if (chart_type == "scatter") {
        output = parseForScatter(input, chart_type, colors);
    } else if (chart_type == "drilldown") {
        output = parseForDrilldown(input, chart_type, colors);
    }

    //add chart title (same for all types of charts)
    output.title_text = $("caption", input).text();

    return output;
};

module.exports = parseTableInput;

},{"./parse_for_bubble.js":47,"./parse_for_drilldown.js":48,"./parse_for_scatter.js":49,"./parse_for_typical_chart.js":50}],52:[function(require,module,exports){
"use strict";

var utils_main = require("../utils/utils_main.js");

/** calculate recession dates function 
@namespace
**/

var calculate_recession_dates = {

    /** calculate recession dates function  **/
    createPlotBands: function createPlotBands(x_axis_categories, dates_type) {

        //load new plotbands
        var plot_bands_arr = [];

        if (dates_type === "no_recession") {
            return plot_bands_arr;
        }

        if (dates_type === "quarterly_recession") {
            ///quarterly dates
            var recessionDateStartsArray = ["Q2 1953", "Q3 1957", "Q2 1960", "Q4 1969", "Q4 1973", "Q1 1980", "Q3 1981", "Q3 1990", "Q1 2001", "Q4 2007"];
            var recessionDateEndsArray = ["Q2 1954", "Q2 1958", "Q1 1961", "Q4 1970", "Q1 1975", "Q3 1980", "Q4 1982", "Q1 1991", "Q4 2001", "Q2 2009"];
        }

        if (dates_type === "monthly_recession") {
            //monthly dates
            var recessionDateStartsArray = ["Jul 1953", "Aug 1957", "Apr 1960", "Dec 1969", "Nov 1973", "Jan 1980", "Jul 1981", "Jul 1990", "Mar 2001", "Dec 2007"];
            var recessionDateEndsArray = ["May 1954", "Apr 1958", "Feb 1961", "Nov 1970", "Mar 1975", "Jul 1980", "Nov 1982", "Mar 1991", "Nov 2001", "Jun 2009"];
        }

        if (dates_type === "eci_recession") {
            //ECI dates
            var recessionDateStartsArray = ["Jun 1953", "Sep 1957", "Jun 1960", "Dec 1969", "Dec 1973", "Mar 1980", "Sep 1981", "Sep 1990", "Mar 2001", "Dec 2007"];
            var recessionDateEndsArray = ["Jun 1954", "Jun 1958", "Mar 1961", "Dec 1970", "Mar 1975", "Sep 1980", "Dec 1982", "Mar 1991", "Dec 2001", "Jun 2009"];
        }

        var plotBandStart = 0;
        var plotBandEnd = 0;
        var plot_band_starts_arr = [];
        var plot_band_ends_arr = [];

        ///get start indexes
        for (var i = 0, len = recessionDateStartsArray.length; i < len; i++) {
            var foundStartIndex = x_axis_categories.indexOf(recessionDateStartsArray[i]);
            if (foundStartIndex >= 0) {
                plot_band_starts_arr.push(foundStartIndex);
            }
        }

        ///get ends indexes
        for (var i = 0, len = recessionDateEndsArray.length; i < len; i++) {
            var foundEndIndex = x_axis_categories.indexOf(recessionDateEndsArray[i]);
            if (foundEndIndex >= 0) {
                plot_band_ends_arr.push(foundEndIndex);
            }
        }

        //fix if lengths aren't the same
        if (plot_band_starts_arr[0] > plot_band_ends_arr[0]) {
            plot_band_starts_arr.unshift(0);
        }
        if (plot_band_ends_arr.length < plot_band_starts_arr.length) {
            plot_band_ends_arr.push(x_axis_categories.length - 1);
        }

        ///alert if not found
        if (plot_band_starts_arr.length == 0) {
            utils_main.showError("There are no matching recession dates, or your dates aren't formatted in the needed style.");
        } else {
            for (var i = 0, len = plot_band_starts_arr.length; i < len; i++) {
                var newPlotBand = {
                    color: 'rgb(222, 222, 222)',
                    from: plot_band_starts_arr[i],
                    to: plot_band_ends_arr[i]
                };
                plot_bands_arr.push(newPlotBand);
            }
        }
        return plot_bands_arr;
    },

    /** add the recession plot bands array to the actual chart **/
    insertPlotBands: function insertPlotBands(plot_bands_arr, chart, all_chart_options) {

        chart.xAxis[0].update({
            plotBands: plot_bands_arr
        });

        //add note about recession shading if applicable
        if (plot_bands_arr.length > 1) {
            var credits = "Shaded areas represent recessions as determined by the National Bureau of Economic Research.\nClick legend items to change data display. Hover over chart to view data.\nSource: U.S. Bureau of Labor Statistics.";
        } else {
            var credits = "Click legend items to change data display. Hover over chart to view data.\nSource: U.S. Bureau of Labor Statistics.";
        }
        $("#chart_credits_text_textarea").val(credits);

        all_chart_options.xAxis.plotBands = plot_bands_arr;
    }

};

module.exports = calculate_recession_dates;

},{"../utils/utils_main.js":55}],53:[function(require,module,exports){
"use strict";

/** 
* custom jQuery extensions
* @module
*/
var jq_extensions = function () {

    jQuery.fn.extend({

        /** extend so that we can get and set "value" with divs */
        divVal: function divVal(string) {
            if (arguments.length === 0) {
                return $(this).attr("value") || $(this).attr("type") || $(this).index();
            } else {
                $(this).attr("value", string);
                return $(this);
            }
        },

        /** puts commas in a number */
        addCommas: function addCommas() {
            var val = this[0];
            if (isNaN(val)) {
                return val;
            } else if (val > 999 || val < -999) {
                while (/(\d+)(\d{3})/.test(val.toString())) {
                    val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
                }
            }
            return val;
        },

        /** takes an element's text string and returns a number, trimming spaces and removing non-numbers (good for numbers with commas etc.)*/
        getNumber: function getNumber() {
            var val = $.trim($(this).text().replace(/\(.*\)/, "").replace(/[^0-9\.\-]+/g, ''));

            return val === "" || isNaN(Number(val)) ? null : Number(val);
        }

    });
}();

module.exports = jq_extensions;

},{}],54:[function(require,module,exports){
"use strict";

/**
 * Forms utility object, contains functions that work with form elements
 * @namespace
 */
var utils_forms = {

    /** returns true if checkbox is checked, false if not 
    @param elem {element} checkbox element
    @returns {bool}
    */
    getCheckBoxValue: function getCheckBoxValue(elem) {
        return elem.is(':checked');
    },

    /** gets an array of values from a given class 
    @param class_name {string}
    @returns {array}
    */
    getClassValuesArray: function getClassValuesArray(class_name) {
        var arr = [];
        $("." + class_name).each(function () {
            arr.push(Number($(this).val()));
        });
        return arr;
    },

    /** When clipboard icon is clicked, this copies the next <pre> text to a clipboard via a hidden textarea **/
    copyToClipBoard: function () {
        $(".copy_to_clipboard_button").click(function () {

            var copied_text = $(this).nextAll("pre:eq(0)").text();
            var copy_message_span = $(this).next().children(".copy_message");
            $(this).nextAll("textarea:eq(0)").val(copied_text).select(); //move text to hidden text area so it can be selected and copied

            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'Copied!' : 'Not copied!';
                copy_message_span.text(msg);

                setTimeout(function () {
                    //hide message after a bit
                    copy_message_span.text("");
                }, 2000);
            } catch (err) {
                alert("Your browser won't allow this to copy - please do it manually");
            }
        });
    }()

};

module.exports = utils_forms;

var copyToClipBoard = function copyToClipBoard(button) {
    try {
        var successful = document.execCommand('copy');
        var msg = successful ? 'Copied!' : 'Not copied!';

        copy_message;

        button.value = msg;
        setTimeout(function () {
            button.value = "Copy All";
        }, 2000);
    } catch (err) {
        alert("Your browser won't allow this to copy - please do it manually");
    }
};

},{}],55:[function(require,module,exports){
"use strict";

var chart_recall = require("../chart_recall.js");

/**
 * Main utility object, contains functions that get reused often, including the code writing
 * @namespace
 */
var utils_main = {

    /** check value - if 0 or not a number, return undefined **/
    checkforUndefined: function checkforUndefined(val) {
        return val === 0 || isNaN(val) ? undefined : val;
    },

    /** 
    turns objects into strings, methods are stringified and put in an array to replace placeholders in the JSON later
    @returns {string} JSON
    */
    deepStringify: function deepStringify(obj) {
        var update_tooltip = require("../form_updates/update_tooltip.js");
        var update_y_axis = require("../form_updates/update_y_axis.js");

        var fn_count = 0;

        var stringified_obj = {
            string: "",
            functions_arr: []
        };

        stringified_obj.string = JSON.stringify(obj, function (key, value) {

            //functions are named "function1, function2" and later replaced with the real function after the rest of the json has been stringified
            if (typeof value === 'function') {

                //combine y axis and tooltip replacement objs
                var replacements_obj = $.extend({}, update_tooltip.replacement_obj, update_y_axis.replacement_obj);

                //put these string functions in the array for later
                stringified_obj.functions_arr.push(utils_main.stringifyFormatter(value, replacements_obj));

                // use a placeholder text in this json
                var fn_placeholder = "function" + fn_count;

                fn_count++;
                return fn_placeholder;
            } else {
                return value;
            }
        }).replace(/\\n/g, "");

        return stringified_obj;
    },

    /** 
    creates and returns a clearfloat class div
    @returns {element} div with "clearfloat" class
    */
    makeClearFloatDiv: function makeClearFloatDiv() {
        var clear_div = document.createElement("div");
        clear_div.className = "clearfloat";
        return clear_div;
    },

    /** looks at an array, takes string "false" or "null" and returns false or null **/
    parseBoolsFromArray: function parseBoolsFromArray(arr) {
        return arr.map(function (e) {
            if (e === "true") {
                return true;
            } else if (e === "false") {
                return false;
            } else if (e === "null") {
                return null;
            } else {
                return e;
            }
        });
    },

    /** Converts an rgb string to an array of 3 values**/
    rgb2arr: function rgb2arr(rgb) {
        return rgb.replace(/[^0-9\,]+/g, '').split(",").map(function (item) {
            return parseInt(item, 10);
        });
    },

    /** Displays an error message for a few seconds**/
    showError: function showError(string) {
        $(".alert-danger").text(string);
        setTimeout(function () {
            $(".alert-danger").text("");
        }, 8000);
    },

    /** stringify tooltip / y-axis formatter function **/
    stringifyFormatter: function stringifyFormatter(formatter, replacement_obj) {

        var formatter_str = formatter.toString();

        for (name in replacement_obj) {
            var re = new RegExp("\\b" + name, "g");

            if (isNaN(Number(replacement_obj[name]))) {
                //replace strings with quotes
                formatter_str = formatter_str.replace(re, '"' + replacement_obj[name] + '"');
            } else {
                formatter_str = formatter_str.replace(re, replacement_obj[name]); //replace numbers without quotes
            }

            if (replacement_obj.y_signs_arr) {
                //replace signs array (["$","%"]) with symbols
                formatter_str = formatter_str.replace(/y_signs_arr\[0\]/g, '"' + replacement_obj.y_signs_arr[0] + '"').replace(/y_signs_arr\[1\]/g, '"' + replacement_obj.y_signs_arr[1] + '"');
            }

            if (replacement_obj.signs_arr) {
                //replace signs array (["$","%"]) with symbols
                formatter_str = formatter_str.replace(/signs_arr\[0\]/g, '"' + replacement_obj.signs_arr[0] + '"').replace(/signs_arr\[1\]/g, '"' + replacement_obj.signs_arr[1] + '"');
            }

            formatter_str = formatter_str.replace('+ ""', "").replace('"" +', "").replace(/y \* 1(?!0)/g, "y").replace(/value \/ 1(?!0)/g, "value"); //replace empty strings and remove divide or times by 1
        }

        return formatter_str;
    },

    /** calls code writing functions */
    writeCode: function writeCode(all_chart_options) {
        utils_main.writeHTMLCode(all_chart_options);
        utils_main.writeJSCode(all_chart_options);
    },

    /** write HTML code **/
    writeHTMLCode: function writeHTMLCode(all_chart_options) {
        if (all_chart_options.chart.type !== "map") {
            //not map

            var width = $("#chart_width_textinput").val();
            var height = $("#chart_height_textinput").val();
            var id = all_chart_options.chart.renderTo;
            var html_string = '<div id="' + id + '" style = "width: ' + width + 'px; height: ' + height + 'px; margin: auto; padding: 0px;"> </div>';
        }

        $("#chart_html_code").text(html_string).each(function (i, block) {
            //put code in the <code> and init code coloring
            hljs.highlightBlock(block);
        });
    },

    /** place code in chart_output_code and reinit highlight */
    writeJSCode: function writeJSCode(all_chart_options) {

        //save chart input values
        all_chart_options.saved_values = chart_recall.saveValues();

        var chart_options_js = utils_main.deepStringify(all_chart_options);

        chart_options_js.string = chart_options_js.string.replace(/"function(\d+)"/g, function (match, i) {
            return chart_options_js.functions_arr[i];
        }) // replace function place holders with their function string from its index in the array
        .replace(/headers=\\"rowHead\d+ columnHead\d+\\"/g, "") //trim down table alt output to make it smaller
        .replace(/id=\\"(rowHead|columnHead)\d+\\"/g, "").replace(/\s{2,} /g, " ").replace(/"null"/g, "null"); //replace "null" with null

        //add surrounding JS (doc ready, render chart, jq extensions...)
        chart_options_js.string = '$(document).ready(function(){\n\
             var all_chart_options = ' + chart_options_js.string + ';\n\
    var ' + all_chart_options.chart.renderTo + ' = new Highcharts.Chart(all_chart_options);\n\
});\n\
jQuery.fn.extend({addCommas:' + $("string").addCommas.toString() + ' });';

        $("#chart_output_code").text(chart_options_js.string).each(function (i, block) {
            hljs.highlightBlock(block); //init code coloring
        });
    }

};

module.exports = utils_main;

},{"../chart_recall.js":2,"../form_updates/update_tooltip.js":25,"../form_updates/update_y_axis.js":27}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
