(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {

    //utils
    var jq_extensions = require("./utils/jq_extensions.js");
    var utils_main = require("./utils/utils_main");

    //initial all chart options init
    var allChartOptionsInit = require("./initializers/all_chart_options_init.js");
    var all_chart_options = allChartOptionsInit();

    //draw chart
    var draw_chart = require("./draw_chart.js");
    var chart = draw_chart.init(all_chart_options);

    //write code to "#chart_output_code" function
    utils_main.writeCode(all_chart_options);

    //page init (navigation and keyboard entries)
    var navigation_setup = require("./navigation_setup.js");
    navigation_setup.sideNavTabsChange();
    navigation_setup.chartTypeIconChange();
    navigation_setup.helpIconClick();
    navigation_setup.getCodeButtonClick(all_chart_options);
    navigation_setup.chartOutputCodeFocus(all_chart_options);

    var keyboard_inputs = require("./keyboard_inputs");

    //all form updates - when updates are made, update the chart
    var allFormUpdates = require("./form_updates/all_form_updates.js");
    allFormUpdates(chart, all_chart_options);
});

},{"./draw_chart.js":15,"./form_updates/all_form_updates.js":16,"./initializers/all_chart_options_init.js":22,"./keyboard_inputs":35,"./navigation_setup.js":36,"./utils/jq_extensions.js":37,"./utils/utils_main":39}],2:[function(require,module,exports){
"use strict";

/** All Chart options constructor. combines all other options into main options object. Info at http://api.highcharts.com/highcharts */
var utils_main = require("../../utils/utils_main.js");

var AllChartOptions = function AllChartOptions(o) {
    this.chart = o.chart;
    this.colors = o.colors;
    this.credits = o.credits;
    this.exporting = o.exporting;
    this.legend = o.legend;
    this.plot_options = o.plot_options;
    this.series = o.series;
    this.subtitle = o.subtitle;
    this.title = o.title;
    this.tooltip = o.tooltip;
    this.xAxis = o.xAxis;
    this.yAxis = o.yAxis;
};

module.exports = AllChartOptions;

},{"../../utils/utils_main.js":39}],3:[function(require,module,exports){
"use strict";

/** Chart options constructor. Info at http://api.highcharts.com/highcharts#chart */
var utils_main = require("../../utils/utils_main.js");

var ChartOptions = function ChartOptions(o) {

    this.renderTo = o.renderTo || "chart_display_area";
    this.margin = [o.margin[0] || 90, o.margin[1] || 40, o.margin[2] || 80, o.margin[3] || 75]; //[top,right,bottom,left]
    this.borderWidth = o.borderWidth || 0;
    this.plotBorderColor = o.plotBorderColor || '#fff';
    this.plotBorderWidth = o.plotBorderWidth || 0;
    this.type = o.type || 'line';
    this.zoomType = o.zoomType || null;
    this.alignTicks = o.alignTicks || false;
    this.inverted = o.inverted || false;
    this.ignoreHiddenSeries = o.ignoreHiddenSeries || true; //false for bubble charts so bubbles won't resize
};

module.exports = ChartOptions;

},{"../../utils/utils_main.js":39}],4:[function(require,module,exports){
'use strict';

/** Colors options constructor. Info at http://api.highcharts.com/highcharts#colors */
var utils_main = require("../../utils/utils_main.js");

var Colors = function Colors(o) {

    this.colors = o.colors || ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1', '#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'];
};

module.exports = Colors;

},{"../../utils/utils_main.js":39}],5:[function(require,module,exports){
"use strict";

/** Credits options constructor. Info at http://api.highcharts.com/highcharts#credits */
var utils_main = require("../../utils/utils_main.js");

var Credits = function Credits(o) {
    this.href = "http://www.bls.gov";

    this.position = {
        align: 'left',
        x: 10,
        y: o.position ? o.position.y || -20 : -20
    };

    this.style = {
        cursor: "default",
        color: "#2C2C2C"
    };

    this.text = o.text || "";
    this.useHTML = true;
};

module.exports = Credits;

},{"../../utils/utils_main.js":39}],6:[function(require,module,exports){
"use strict";

/** Exporting options constructor. Info at http://api.highcharts.com/highcharts#exporting */
var utils_main = require("../../utils/utils_main.js");

var Exporting = function Exporting(o) {

    this.buttons = {
        contextButton: {
            enabled: true,
            verticalAlign: 'bottom',
            x: -10
        }
    };
};

module.exports = Exporting;

},{"../../utils/utils_main.js":39}],7:[function(require,module,exports){
'use strict';

/** legend options constructor. Info at http://api.highcharts.com/highcharts#legend */
var utils_main = require("../../utils/utils_main.js");

var Legend = function Legend(o) {

    this.align = o.align || 'left';
    this.backgroundColor = o.backgroundColor || 'none';
    this.borderColor = o.borderColor || 'none';
    this.borderWidth = o.borderWidth || 0;
    this.enabled = o.enabled || true;
    this.floating = o.floating || false;
    this.itemDistance = o.itemDistance || 30;
    this.layout = o.layout || 'horizontal';
    this.reversed = o.reversed || false;
    this.shadow = o.shadow || false;
    this.useHTML = o.useHTML || false;
    this.verticalAlign = o.verticalAlign || 'top';
    this.width = o.width;
    this.x = o.x || 0;
    this.y = o.y || 30;

    this.itemStyle = {
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
        color: '#000'
    };
    this.itemHiddenStyle = {
        color: 'gray'
    };
    this.itemHoverStyle = {
        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
    };
};

module.exports = Legend;

},{"../../utils/utils_main.js":39}],8:[function(require,module,exports){
"use strict";

/** PlotOptions constructor. Info at http://api.highcharts.com/highcharts#plotOptions*/
var utils_main = require("../../utils/utils_main.js");

var PlotOptions = function PlotOptions(o) {

    //for all chart types
    if (o.series) {
        this.series = {
            events: {
                legendItemClick: o.series.events.legendItemClick
            },
            dataLabels: {
                enabled: o.series.dataLabels.enabled || false
            },
            pointPlacement: o.series.pointPlacement || null
        };
    }
    //just for column and bar charts
    if (o.column || o.bar) {
        this.series.stacking = o.series.stacking || null;
        this.series.pointPadding = o.series.pointPadding || 0.1; //0 is tight, 1 is loose
        this.series.groupPadding = o.series.groupPadding || 0.2;
        this.series.minPointLength = o.series.minPointLength || 2;
    }

    //just for bubble charts
    if (o.bubble) {
        this.bubble = {
            maxSize: o.bubble.maxSize || 50,
            sizeBy: o.bubble.sizeBy || 'width' //instead of 'area', seems more accurate
        };
    }

    //just for line charts
    if (o.line) {
        this.line = {
            lineWidth: o.line.lineWidth || 1.5,
            states: {
                hover: {
                    lineWidth: o.line.hover.lineWidth || 4
                }
            },
            marker: {
                enabled: o.line.marker.enabled || false,
                states: {
                    hover: {
                        enabled: o.line.marker.hover.enabled || true,
                        radius: o.line.marker.hover.radius || 5
                    }
                }
            }
        };
    }
};

module.exports = PlotOptions;

},{"../../utils/utils_main.js":39}],9:[function(require,module,exports){
"use strict";

/** series (an array of objs) options constructor. Info at http://api.highcharts.com/highcharts#series */
var utils_main = require("../../utils/utils_main.js");

var Series = function Series(o) {

    this.series = o.series || [{
        name: "Series 1",
        data: [1000, 2000, 3000, 4000]
    }, {
        name: "Series 2",
        data: [2000, 4000, 6000, 8000]
    }];
};

module.exports = Series;

},{"../../utils/utils_main.js":39}],10:[function(require,module,exports){
"use strict";

/** subtitle options constructor. Info at http://api.highcharts.com/highcharts#subtitle */
var utils_main = require("../../utils/utils_main.js");

var Subtitle = function Subtitle(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'normal',
        fontSize: '12px'
    };
};

module.exports = Subtitle;

},{"../../utils/utils_main.js":39}],11:[function(require,module,exports){
"use strict";

/** title options constructor. Info at http://api.highcharts.com/highcharts#title */
var utils_main = require("../../utils/utils_main.js");

var Title = function Title(o) {

    this.text = o.text || "";
    this.align = o.align || "left";

    this.style = {
        color: '#000000',
        fontFamily: 'sans-serif',
        fontWeight: 'bold',
        fontSize: '14px'
    };
};

module.exports = Title;

},{"../../utils/utils_main.js":39}],12:[function(require,module,exports){
'use strict';

/** tooltip options constructor. Info at http://api.highcharts.com/highcharts#tooltip */
var utils_main = require("../../utils/utils_main.js");

var Tooltip = function Tooltip(o) {
    this.backgroundColor = '#FEFFEF';
    this.crosshairs = o.crosshairs || [false, false];
    this.formatter = o.formatter;
    this.shared = o.shared || false;

    this.style = {
        color: '#000000',
        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif'
    };

    this.useHTML = true;
    this.valueDecimals = o.valueDecimals;
    this.valuePrefix = o.valuePrefix || "";
    this.valueSuffix = o.valueSuffix || "";
};

module.exports = Tooltip;

},{"../../utils/utils_main.js":39}],13:[function(require,module,exports){
'use strict';

/** xAxis options constructor. Info at http://api.highcharts.com/highcharts#xAxis */
var utils_main = require("../../utils/utils_main.js");

var XAxis = function XAxis(o) {

    this.categories = o.categories;
    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 0;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter || undefined : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineWidth = o.lineWidth || 1.2;
    this.lineColor = o.lineColor || 'gray';
    this.plotBands = o.plotBands || [];
    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : '',
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };
};

module.exports = XAxis;

},{"../../utils/utils_main.js":39}],14:[function(require,module,exports){
'use strict';

/** yAxis options constructor. Info at http://api.highcharts.com/highcharts#yAxis */
var utils_main = require("../../utils/utils_main.js");

var yAxis = function yAxis(o) {

    this.gridLineColor = o.gridLineColor || '#c0c0c0';
    this.gridLineWidth = o.gridLineWidth || 1;
    this.gridLineDashStyle = o.gridLineDashStyle || 'Dot';

    this.labels = {
        formatter: o.labels ? o.labels.formatter : undefined,
        rotation: o.labels ? o.labels.rotation || 0 : 0,
        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '12px'
        }

    };

    this.lineColor = o.lineColor || 'gray';
    this.lineWidth = o.lineWidth || 1;
    this.max = o.max || null;
    this.min = o.min || null;
    this.opposite = o.opposite || false;
    this.plotBands = o.plotBands || [];

    this.plotLines = o.plotLines || [{
        "value": 0,
        "color": "#c0c0c0",
        "dashStyle": "solid",
        "width": 1
    }];

    this.tickInterval = o.tickInterval || null;
    this.tickmarkPlacement = o.tickmarkPlacement || 'on';
    this.tickPosition = o.tickPosition || 'outside';
    this.tickColor = o.tickColor || '#C0D0E0';
    this.tickWidth = o.tickWidth || 1;

    this.title = {
        useHTML: true,
        text: o.title ? o.title.text || '' : '',
        margin: o.title ? o.title.margin || 6 : 6,
        align: o.title ? o.title.align || 'middle' : 'middle',
        offset: 20,
        rotation: 0,
        x: o.title ? o.title.x || 35 : 35,
        y: -15,

        style: {
            color: '#000000',
            fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
            fontWeight: 'normal',
            backgroundColor: '#fff',
            fontSize: '13px'
        }
    };

    this.type = o.type || 'linear';
};

module.exports = yAxis;

},{"../../utils/utils_main.js":39}],15:[function(require,module,exports){
"use strict";

/** takes all_chart_options and prints a chart to the screen */

var draw_chart = {

    init: function init(all_chart_options) {
        var chart = new Highcharts.Chart(all_chart_options);
        return chart;
    }

};

module.exports = draw_chart;

},{}],16:[function(require,module,exports){
"use strict";

/** listens for any form updates and calls appropriate function */
var update_template = require("./update_template.js");
var updateChartType = require("./update_chart_type.js");
var utils_forms = require("../utils/utils_forms");
var update_legend = require("./update_legend.js");
var update_x_axis = require("./update_x_axis.js");
var update_y_axis = require("./update_y_axis.js");

var allFormUpdates = function allFormUpdates(chart, all_chart_options) {

    /** TEMPLATE CHANGES */

    //chart width
    $("#chart_width_textinput").keyup(function () {
        update_template.resize($(this).val(), "width", chart);
    });

    //chart height
    $("#chart_height_textinput").keyup(function () {
        update_template.resize($(this).val(), "height", chart);
    });

    //inner chart margins
    $(".margin_input").keyup(function () {

        var margins_arr = utils_forms.getClassValuesArray("margin_input");

        update_template.margin(margins_arr, chart, all_chart_options);
    });

    /** CHART TYPE CHANGES */

    //chart type changed
    $.each(['line', 'bar', 'column', 'bubble', 'scatter', "drilldown"], function (i, type) {
        $('#chart_type_' + type).click(function () {
            updateChartType(i, type, chart, all_chart_options);
        });
    });

    //legend layout changed
    $("#legend_layout_select").change(function () {
        update_legend.updateLayout($(this).val(), chart, all_chart_options);
    });

    /** LEGEND CHANGES */

    //legend reverse ceckbox changed
    $("#legend_reverse_layout_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_legend.updateIsReversed(val, chart, all_chart_options);
    });

    //legend X or Y placement values changed
    $("#legend_placement_x, #legend_placement_y").keyup(function () {
        var newX = Number($("#legend_placement_x").val());
        var newY = Number($("#legend_placement_y").val());

        update_legend.updateXYpositions(newX, newY, chart, all_chart_options);
    });

    /** X-AXIS CHANGES */

    //x-axis title textarea changed
    $("#chart_x_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_x_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //x-axis tickmark interval input changed
    $("#chart_x_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_x_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    /** Y-AXIS CHANGES */

    //x-axis title textarea changed
    $("#chart_y_axis_title_textarea").keyup(function () {
        var newTitle = $(this).val();
        update_y_axis.updateTitle(newTitle, chart, all_chart_options);
    });

    //y-axis title indent changed
    $("#chart_y_axis_x_position_input").keyup(function () {
        var newXPosition = Number($(this).val());
        update_y_axis.updateXPosition(newXPosition, chart, all_chart_options);
    });

    //y-axis tickmark interval input changed
    $("#chart_y_axis_tickmark_interval_input").keyup(function () {
        var newInterval = Number($(this).val());
        update_y_axis.updateTickmarkInterval(newInterval, chart, all_chart_options);
    });

    //y-axis max input changed
    $("#chart_y_axis_max_input").keyup(function () {
        var newMax = Number($(this).val());
        update_y_axis.updateMax(newMax, chart, all_chart_options);
    });

    //y-axis min input changed
    $("#chart_y_axis_min_input").keyup(function () {
        var newMin = Number($(this).val());
        update_y_axis.updateMin(newMin, chart, all_chart_options);
    });

    //y-axis opposite side ceckbox changed
    $("#chart_y_axis_opposite_checkbox").change(function () {
        var val = utils_forms.getCheckBoxValue($(this));
        update_y_axis.updateIsOpposite(val, chart, all_chart_options);
    });
};

module.exports = allFormUpdates;

},{"../utils/utils_forms":38,"./update_chart_type.js":17,"./update_legend.js":18,"./update_template.js":19,"./update_x_axis.js":20,"./update_y_axis.js":21}],17:[function(require,module,exports){
"use strict";

/** when a chart icon is clicked, this function is called - changes the chart type shown */

var updateChartType = function updateChartType(i, type, chart, all_chart_options) {

    var y_axis_title_align;

    if (type === "bar") {
        //fix y axis position
        chart.inverted = true;
        y_axis_title_align = "middle";
        //hide non-relevant elements
        $(".not_bar").hide();
    } else {
        chart.inverted = false;
        y_axis_title_align = "high";
        $(".not_bar").show();
    }

    if (type === "drilldown") {
        type = "column";
    }

    chart.xAxis[0].update({}, false);
    chart.yAxis[0].update({}, false);

    $.each(chart.series, function () {
        this.update({
            type: type
        });
    });

    chart.yAxis[0].setTitle({
        align: y_axis_title_align
    });

    all_chart_options.chart.type = type;
    all_chart_options.yAxis.title.align = y_axis_title_align;
};

module.exports = updateChartType;

},{}],18:[function(require,module,exports){
"use strict";

/** when legend options are changed in the side area */

var update_legend = {

    /* decide if the legend should be reverse order */
    updateIsReversed: function updateIsReversed(val, chart, all_chart_options) {

        var legend = chart.legend;
        legend.options.reversed = val;
        legend.render();

        all_chart_options.legend.reversed = val;
    },

    /** if 'no legend' is selected, hide the legend, and set options, else, show it with the correct layout */
    updateLayout: function updateLayout(val, chart, all_chart_options) {

        var legend = chart.legend;
        if (val === "no_legend") {
            legend.group.hide();
            legend.box.hide();
            legend.display = false;
            legend.options.enabled = false;
            legend.render(false);

            val = undefined;
        } else {

            legend.options.layout = val;
            legend.render(false);
            legend.group.show();
            legend.box.show();
            legend.display = true;
            legend.options.enabled = true;
        }

        all_chart_options.legend.layout = val;
        all_chart_options.legend.enabled = legend.options.enabled;
    },

    /** update X and Y positions on legend */

    updateXYpositions: function updateXYpositions(newX, newY, chart, all_chart_options) {
        var legend = chart.legend;
        legend.options.x = newX;
        legend.options.y = newY;
        legend.render(false);

        all_chart_options.legend.x = newX;
        all_chart_options.legend.y = newY;
    }

};

module.exports = update_legend;

},{}],19:[function(require,module,exports){
"use strict";

var update_template = {
    resize: function resize(val, dimension, chart) {
        val = Number(val);
        if (!isNaN(val)) {
            $(".chart_display_area").css(dimension, val + "px");
        }
        chart.reflow();
    },

    margin: function margin(margins_arr, chart, all_chart_options) {

        $.each(chart.axes, function (i, e) {
            e.isDirty = true; //to tell axes to refresh
        });
        chart.margin = margins_arr;
        chart.redraw(false);

        all_chart_options.chart.margin = margins_arr;
    }
};

module.exports = update_template;

},{}],20:[function(require,module,exports){
"use strict";

/** when X-axis options are changed in the side area, these methods are called */

var update_x_axis = {

    /** update the x axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.xAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.xAxis.title.text = newTitle;
    },

    /** update x axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        if (isNaN(newInterval) || newInterval === 0) {
            newInterval = undefined;
        };

        if (!chart) {
            // called when this is used in x_axis_init
            return newInterval;
        }

        if (newInterval > chart.xAxis[0].dataMax) {
            newInterval = chart.xAxis[0].dataMax;
        }

        chart.xAxis[0].update({
            tickInterval: newInterval

        });
        all_chart_options.xAxis.tickInterval = newInterval;
    }

};

module.exports = update_x_axis;

},{}],21:[function(require,module,exports){
"use strict";

/** when Y-axis options are changed in the side area, these methods are called */
var utils_main = require("../utils/utils_main.js");

var update_y_axis = {

    /** update if y axis labels are on opposite side */
    updateIsOpposite: function updateIsOpposite(val, chart, all_chart_options) {
        chart.yAxis[0].update({
            opposite: val
        });
        all_chart_options.yAxis.opposite = val;
    },

    /** update y-axis max */
    updateMax: function updateMax(newMax, chart, all_chart_options) {
        newMax = utils_main.checkforUndefined(newMax);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMax;
        }

        chart.yAxis[0].update({
            max: newMax
        });

        all_chart_options.yAxis.max = newMax;
    },

    /** update y-axis min */
    updateMin: function updateMin(newMin, chart, all_chart_options) {
        newMin = utils_main.checkforUndefined(newMin);
        if (!chart) {
            // called when this is used in y_axis_init
            return newMin;
        }

        chart.yAxis[0].update({
            min: newMin
        });

        all_chart_options.yAxis.min = newMin;
    },

    /** update the y axis title */
    updateTitle: function updateTitle(newTitle, chart, all_chart_options) {
        chart.yAxis[0].setTitle({
            text: newTitle
        });

        all_chart_options.yAxis.title.text = newTitle;
    },

    /** update y axis x-position (title.x) */

    updateXPosition: function updateXPosition(newXPosition, chart, all_chart_options) {

        newXPosition = utils_main.checkforUndefined(newXPosition);

        chart.yAxis[0].setTitle({
            x: newXPosition
        });

        all_chart_options.yAxis.title.x = newXPosition;
    },

    /** update y axis tickmark interval */
    updateTickmarkInterval: function updateTickmarkInterval(newInterval, chart, all_chart_options) {

        newInterval = utils_main.checkforUndefined(newInterval);

        if (!chart) {
            // called when this is used in y_axis_init
            return newInterval;
        }

        if (newInterval > chart.yAxis[0].dataMax) {
            newInterval = chart.yAxis[0].dataMax;
        }

        chart.yAxis[0].update({
            tickInterval: newInterval

        });
        all_chart_options.yAxis.tickInterval = newInterval;
    }

    //
    //
    //        if (isNaN(newInterval) || newInterval === 0) {
    //            newInterval = undefined;
    //        };
    //
    //        if (!chart) { // called when this is used in x_axis_init
    //            return newInterval;
    //        }
    //
    //        if (newInterval > chart.xAxis[0].dataMax) {
    //            newInterval = chart.xAxis[0].dataMax;
    //        }
    //
    //        chart.xAxis[0].update({
    //            tickInterval: newInterval
    //
    //        });
    //        all_chart_options.xAxis.tickInterval = newInterval;
    //
    //
    //    }

};

module.exports = update_y_axis;

},{"../utils/utils_main.js":39}],22:[function(require,module,exports){
"use strict";

/** create and return an instance of all_chart_options */

var AllChartOptions = require("../constructors/charts/all_chart_options.js"),
    chartInit = require("./chart_init.js"),
    colorsInit = require("./colors_init.js"),
    creditsInit = require("./credits_init.js"),
    exportingInit = require("./exporting_init.js"),
    legendInit = require("./legend_init.js"),
    plotOptionsInit = require("./plot_options_init.js"),
    seriesInit = require("./series_init.js"),
    subtitleInit = require("./subtitle_init.js"),
    titleInit = require("./title_init.js"),
    tooltipInit = require("./tooltip_init.js"),
    xAxisInit = require("./x_axis_init.js"),
    yAxisInit = require("./y_axis_init.js");

var allChartOptionsInit = function allChartOptionsInit() {

    //get options from individual inits
    var options = {
        chart: chartInit(),
        colors: colorsInit(),
        credits: creditsInit(),
        // exportig: exportingInit(),
        legend: legendInit(),
        plotOptions: plotOptionsInit(),
        series: seriesInit(),
        subtitle: subtitleInit(),
        title: titleInit(),
        tooltip: tooltipInit(),
        xAxis: xAxisInit(),
        yAxis: yAxisInit()

    };

    var all_chart_options = new AllChartOptions(options);
    return all_chart_options;
};

module.exports = allChartOptionsInit;

},{"../constructors/charts/all_chart_options.js":2,"./chart_init.js":23,"./colors_init.js":24,"./credits_init.js":25,"./exporting_init.js":26,"./legend_init.js":27,"./plot_options_init.js":28,"./series_init.js":29,"./subtitle_init.js":30,"./title_init.js":31,"./tooltip_init.js":32,"./x_axis_init.js":33,"./y_axis_init.js":34}],23:[function(require,module,exports){
"use strict";

/** Initializer for "chart" options section of all_chart_options. Creates and returns a new instance */

var ChartOptions = require("../constructors/charts/chart.js");

var chartInit = function chartInit() {

    var chart_type = $(".selected_chart_type").divVal();
    if (chart_type === "drilldown") {
        chart_type = "column";
    }

    //load options from user inputs
    var options = {
        margin: [Number($("#top_margin_textinput").val()), Number($("#right_margin_textinput").val()), Number($("#bottom_margin_textinput").val()), Number($("#left_margin_textinput").val())],
        renderTo: $("#chart_id_textinput").val(),

        type: chart_type
    };

    var chart_options = new ChartOptions(options);
    return chart_options;
};

module.exports = chartInit;

},{"../constructors/charts/chart.js":3}],24:[function(require,module,exports){
"use strict";

/** Initializer for "colors" options section of all_chart_options. Creates and returns a new instance */

var Colors = require("../constructors/charts/colors.js");

var colorsInit = function colorsInit() {

    //load options from user inputs
    var options = {};

    var colors = new Colors(options);
    return colors.colors;
};

module.exports = colorsInit;

},{"../constructors/charts/colors.js":4}],25:[function(require,module,exports){
"use strict";

/** Initializer for "credits" options section of all_chart_options. Creates and returns a new instance */

var Credits = require("../constructors/charts/credits.js");

var creditsInit = function creditsInit() {

    //load options from user inputs
    var options = {
        text: $("#chart_credits_text_textarea").val(),
        position: {
            y: Number($("#chart_credits_y_position_input").val())
        }

    };

    var credits = new Credits(options);
    return credits;
};

module.exports = creditsInit;

},{"../constructors/charts/credits.js":5}],26:[function(require,module,exports){
"use strict";

/** Initializer for "exporting" options section of all_chart_options. Creates and returns a new instance */

var Exporting = require("../constructors/charts/exporting.js");

var exportingInit = function exportingInit() {

    //load options from user inputs
    var options = {};

    var exporting = new Exporting(options);
    return exporting;
};

module.exports = exportingInit;

},{"../constructors/charts/exporting.js":6}],27:[function(require,module,exports){
"use strict";

/** Initializer for "legend" options section of all_chart_options. Creates and returns a new instance */

var Legend = require("../constructors/charts/legend.js");

var legendInit = function legendInit() {

    var getLegendLayout = function getLegendLayout() {
        var legend_layout_val = $("#legend_layout_select").val();
        return legend_layout_val !== "no_legend" ? legend_layout_val : undefined;
    };

    //load options from user inputs
    var options = {
        layout: getLegendLayout(),
        x: Number($("#legend_placement_x").val()),
        y: Number($("#legend_placement_y").val())

    };

    var legend = new Legend(options);
    return legend;
};

module.exports = legendInit;

//
///** legend options constructor. Info at http://api.highcharts.com/highcharts#legend */
//var utils_main = require("../../utils/utils_main.js");
//
//var Legend = function (o) {
//
//    this.align = o.align || 'center';
//    this.backgroundColor = o.backgroundColor || 'none';
//    this.borderColor = o.borderColor || 'none';
//    this.borderWidth = o.borderWidth || 0;
//    this.enabled = o.enabled || true;
//    this.floating = o.floating || false;
//    this.itemDistance = o.itemDistance || 30;
//    this.layout = o.layout || 'horizontal';
//    this.reversed = o.reversed || false;
//    this.shadow = o.shadow || false;
//    this.useHTML = o.useHTML || false;
//    this.verticalAlign = o.verticalAlign || 'top';
//    this.width = o.width;
//    this.x = o.x || 0;
//    this.y = o.y || 30;
//
//    this.itemStyle = {
//        fontFamily: 'Calibri, Verdana, Arial, Helvetica, sans-serif',
//        color: '#000'
//    };
//    this.itemHiddenStyle = {
//        color: 'gray'
//    };
//    this.itemHoverStyle = {
//        cursor: o.itemHoverStyle ? o.itemHoverStyle.cursor || "pointer" : "pointer"
//    }
//
//}
//
//
//Legend.prototype.setOption = utils_main.setOption;
//
//module.exports = Legend;

},{"../constructors/charts/legend.js":7}],28:[function(require,module,exports){
"use strict";

/** Initializer for "plotOptions" options section of all_chart_options. Creates and returns a new instance */

var PlotOptions = require("../constructors/charts/plot_options.js");

var plotOptionsInit = function plotOptionsInit() {

    //load options from user inputs
    var options = {};

    var plotOptions = new PlotOptions(options);
    return plotOptions;
};

module.exports = plotOptionsInit;

},{"../constructors/charts/plot_options.js":8}],29:[function(require,module,exports){
"use strict";

/** Initializer for "series" options section of all_chart_options. Creates and returns a new instance */

var Series = require("../constructors/charts/series.js");

var seriesInit = function seriesInit() {

    //load options from user inputs
    var options = {};

    var series = new Series(options);
    return series.series;
};

module.exports = seriesInit;

},{"../constructors/charts/series.js":9}],30:[function(require,module,exports){
"use strict";

/** Initializer for "subtitle" options section of all_chart_options. Creates and returns a new instance */

var Subtitle = require("../constructors/charts/subtitle.js");

var subtitleInit = function subtitleInit() {

    //load options from user inputs
    var options = {};

    var subtitle = new Subtitle(options);
    return subtitle;
};

module.exports = subtitleInit;

},{"../constructors/charts/subtitle.js":10}],31:[function(require,module,exports){
"use strict";

/** Initializer for "title" options section of all_chart_options. Creates and returns a new instance */

var Title = require("../constructors/charts/title.js");

var titleInit = function titleInit() {

    //load options from user inputs
    var options = {};

    var title = new Title(options);
    return title;
};

module.exports = titleInit;

},{"../constructors/charts/title.js":11}],32:[function(require,module,exports){
"use strict";

/** Initializer for "tooltip" options section of all_chart_options. Creates and returns a new instance */

var Tooltip = require("../constructors/charts/tooltip.js");

var tooltipInit = function tooltipInit() {

    //load options from user inputs
    var options = {};

    var tooltip = new Tooltip(options);
    return tooltip;
};

module.exports = tooltipInit;

},{"../constructors/charts/tooltip.js":12}],33:[function(require,module,exports){
"use strict";

/** Initializer for "xAxis" options section of all_chart_options. Creates and returns a new instance */
var update_x_axis = require("../form_updates/update_x_axis.js");

var XAxis = require("../constructors/charts/x_axis.js");

var xAxisInit = function xAxisInit() {

    //load options from user inputs
    var options = {
        title: {
            text: $("#chart_x_axis_title_textarea").val()
        },
        tickInterval: update_x_axis.updateTickmarkInterval(Number($("#chart_x_axis_tickmark_interval_input").val()))

    };

    var xAxis = new XAxis(options);
    return xAxis;
};

module.exports = xAxisInit;

},{"../constructors/charts/x_axis.js":13,"../form_updates/update_x_axis.js":20}],34:[function(require,module,exports){
"use strict";

/** Initializer for "yAxis" options section of all_chart_options. Creates and returns a new instance */
var utils_main = require("../utils/utils_main.js");
var YAxis = require("../constructors/charts/y_axis.js");
var update_y_axis = require("../form_updates/update_y_axis.js");
var utils_forms = require("../utils/utils_forms.js");

var yAxisInit = function yAxisInit() {

    //load options from user inputs
    var options = {

        max: update_y_axis.updateMax(Number($("#chart_y_axis_max_input").val())),
        min: update_y_axis.updateMin(Number($("#chart_y_axis_min_input").val())),
        opposite: utils_forms.getCheckBoxValue($("#chart_y_axis_opposite_checkbox")),
        tickInterval: update_y_axis.updateTickmarkInterval(Number($("#chart_y_axis_tickmark_interval_input").val())),

        title: {
            text: $("#chart_y_axis_title_textarea").val(),
            align: $(".selected_chart_type").divVal() === "bar" ? "middle" : "high",
            x: Number($("#chart_y_axis_x_position_input").val())
        }

    };

    var yAxis = new YAxis(options);
    return yAxis;
};

module.exports = yAxisInit;

//   
//                    align: 'high',
//
//                            offset: 0,
//							
//							rotation: 0,
//
//                            y: -15,
//
//                            x: 35,

},{"../constructors/charts/y_axis.js":14,"../form_updates/update_y_axis.js":21,"../utils/utils_forms.js":38,"../utils/utils_main.js":39}],35:[function(require,module,exports){
"use strict";

module.exports = function () {

    var keyboard_inputs = {

        bindNumberEntryInputs: function bindNumberEntryInputs() {

            var adjValue = function adjValue(val, direction) {
                var val = Number(val);
                if (!isNaN(val)) {
                    return direction === "+" ? val + 10 : val - 10;
                } else {
                    return val;
                }
            };

            $(".number_entry").keyup(function (e) {
                if (e.keyCode === 38) {
                    //up pushed
                    $(this).val(adjValue($(this).val(), "+"));
                } else if (e.keyCode === 40) {
                    $(this).val(adjValue($(this).val(), "-"));
                }
            });
        }

    };

    keyboard_inputs.bindNumberEntryInputs();
}();

},{}],36:[function(require,module,exports){
"use strict";

var utils_main = require("./utils/utils_main.js");

/** object that contains functions for all the navigation, ie changing between options and chart types */
var navigation_setup = {

    /** when tabs on left side nav bar are clicked, options displayed are changed */
    sideNavTabsChange: function sideNavTabsChange() {

        $("#side_nav_tabs .tab").click(function () {
            //change selected menu tab
            $("#side_nav_tabs .selected_tab").removeClass("selected_tab");
            $(this).addClass("selected_tab");

            //change display div showing
            var selectedID = "#" + $(this).attr("id").replace("tab", "display");
            $("#side_display .selected_display").removeClass("selected_display");
            $(selectedID).addClass("selected_display");
        });
    },

    /** when chart type icon is clicked and changed */
    chartTypeIconChange: function chartTypeIconChange() {

        $("#chart_type_icons .chart_type_icon").click(function () {
            //change selected icon
            $("#chart_type_icons .chart_type_icon").removeClass("selected_chart_type");
            $(this).addClass("selected_chart_type");
        });
    },

    /** when a help icon is clicked */

    helpIconClick: function helpIconClick() {

        $(".help_icon").click(function () {
            $(this).toggleClass("help_on");
            $(".notes", $(this).parents("div")).toggle();
        });
    },

    /** when a get code button is clicked, update and show the code area. */

    getCodeButtonClick: function getCodeButtonClick(all_chart_options) {

        $("#get_code_button").click(function (e) {

            var $get_code_span = $("#get_code_text");
            $(this).toggleClass("code_on");
            $("#main_result_code_div").slideToggle(100);
            if ($get_code_span.text() === "Get code") {
                utils_main.writeCode(all_chart_options);
                $get_code_span.text("Hide code");
            } else {
                $get_code_span.text("Get code");
            }
        });
    },

    /** when chart code is entered, update */
    chartOutputCodeFocus: function chartOutputCodeFocus(all_chart_options) {
        $("#chart_output_code").click(function () {
            utils_main.writeCode(all_chart_options);
        });
    }

};

module.exports = navigation_setup;

},{"./utils/utils_main.js":39}],37:[function(require,module,exports){
"use strict";

var jq_extensions = function () {

    jQuery.fn.extend({
        divVal: function divVal(string) {
            //extend so that we can get and set "value" with divs
            if (arguments.length === 0) {
                return $(this).attr("value");
            } else {

                $(this).attr("value", string);
                return $(this);
            }
        }
    });
}();

module.exports = jq_extensions;

},{}],38:[function(require,module,exports){
"use strict";

var utils_forms = {

    /** returns true if checkbox is checked, false if not */
    getCheckBoxValue: function getCheckBoxValue(elem) {
        return elem.is(':checked');
    },

    /** gets an array of values from a given class */
    getClassValuesArray: function getClassValuesArray(className) {
        var arr = [];
        $("." + className).each(function () {
            arr.push(Number($(this).val()));
        });
        return arr;
    }

};

module.exports = utils_forms;

},{}],39:[function(require,module,exports){
"use strict";

/** Main utility object, contains functions that get reused often */
var utils_main = {

    checkforUndefined: function checkforUndefined(val) {
        return val === 0 || isNaN(val) ? undefined : val;
    },

    /** shortcut for console.log **/
    log: function log(e) {
        return console.log(e);
    },

    /** turns objects into strings, including their methods */
    deepStringify: function deepStringify(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (typeof value === 'function') {
                return value.toString();
            } else {
                return value;
            }
        }).replace(/\\n/g, "");
    },

    writeCode: function writeCode(all_chart_options) {

        //place code in chart_output_code and reinit highlight
        var chart_options_js_string = utils_main.deepStringify(all_chart_options);
        $("#chart_output_code").text(chart_options_js_string).each(function (i, block) {
            hljs.highlightBlock(block);
        });
    }

};

module.exports = utils_main;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzY3JpcHRzX3NyYy9hcHAuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL2FsbF9jaGFydF9vcHRpb25zLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9jaGFydC5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvY29sb3JzLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9jcmVkaXRzLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9leHBvcnRpbmcuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL2xlZ2VuZC5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvcGxvdF9vcHRpb25zLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy9zZXJpZXMuanMiLCJzY3JpcHRzX3NyYy9jb25zdHJ1Y3RvcnMvY2hhcnRzL3N1YnRpdGxlLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy90aXRsZS5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMvdG9vbHRpcC5qcyIsInNjcmlwdHNfc3JjL2NvbnN0cnVjdG9ycy9jaGFydHMveF9heGlzLmpzIiwic2NyaXB0c19zcmMvY29uc3RydWN0b3JzL2NoYXJ0cy95X2F4aXMuanMiLCJzY3JpcHRzX3NyYy9kcmF3X2NoYXJ0LmpzIiwic2NyaXB0c19zcmMvZm9ybV91cGRhdGVzL2FsbF9mb3JtX3VwZGF0ZXMuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX2NoYXJ0X3R5cGUuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX2xlZ2VuZC5qcyIsInNjcmlwdHNfc3JjL2Zvcm1fdXBkYXRlcy91cGRhdGVfdGVtcGxhdGUuanMiLCJzY3JpcHRzX3NyYy9mb3JtX3VwZGF0ZXMvdXBkYXRlX3hfYXhpcy5qcyIsInNjcmlwdHNfc3JjL2Zvcm1fdXBkYXRlcy91cGRhdGVfeV9heGlzLmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL2FsbF9jaGFydF9vcHRpb25zX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvY2hhcnRfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9jb2xvcnNfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy9jcmVkaXRzX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvZXhwb3J0aW5nX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvbGVnZW5kX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvcGxvdF9vcHRpb25zX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvc2VyaWVzX2luaXQuanMiLCJzY3JpcHRzX3NyYy9pbml0aWFsaXplcnMvc3VidGl0bGVfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy90aXRsZV9pbml0LmpzIiwic2NyaXB0c19zcmMvaW5pdGlhbGl6ZXJzL3Rvb2x0aXBfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy94X2F4aXNfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2luaXRpYWxpemVycy95X2F4aXNfaW5pdC5qcyIsInNjcmlwdHNfc3JjL2tleWJvYXJkX2lucHV0cy5qcyIsInNjcmlwdHNfc3JjL25hdmlnYXRpb25fc2V0dXAuanMiLCJzY3JpcHRzX3NyYy91dGlscy9qcV9leHRlbnNpb25zLmpzIiwic2NyaXB0c19zcmMvdXRpbHMvdXRpbHNfZm9ybXMuanMiLCJzY3JpcHRzX3NyYy91dGlscy91dGlsc19tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxFQUFFLFFBQUYsRUFBWSxLQUFaLENBQWtCLFlBQVk7OztBQUcxQixRQUFJLGdCQUFnQixRQUFRLDBCQUFSLENBQWhCLENBSHNCO0FBSTFCLFFBQUksYUFBYSxRQUFRLG9CQUFSLENBQWI7OztBQUpzQixRQVN0QixzQkFBc0IsUUFBUSwwQ0FBUixDQUF0QixDQVRzQjtBQVUxQixRQUFJLG9CQUFvQixxQkFBcEI7OztBQVZzQixRQWF0QixhQUFhLFFBQVEsaUJBQVIsQ0FBYixDQWJzQjtBQWMxQixRQUFJLFFBQVEsV0FBVyxJQUFYLENBQWdCLGlCQUFoQixDQUFSOzs7QUFkc0IsY0FpQjFCLENBQVcsU0FBWCxDQUFxQixpQkFBckI7OztBQWpCMEIsUUFvQnRCLG1CQUFtQixRQUFRLHVCQUFSLENBQW5CLENBcEJzQjtBQXFCMUIscUJBQWlCLGlCQUFqQixHQXJCMEI7QUFzQjFCLHFCQUFpQixtQkFBakIsR0F0QjBCO0FBdUIxQixxQkFBaUIsYUFBakIsR0F2QjBCO0FBd0IxQixxQkFBaUIsa0JBQWpCLENBQW9DLGlCQUFwQyxFQXhCMEI7QUF5QjFCLHFCQUFpQixvQkFBakIsQ0FBc0MsaUJBQXRDLEVBekIwQjs7QUEyQjFCLFFBQUksa0JBQWtCLFFBQVEsbUJBQVIsQ0FBbEI7OztBQTNCc0IsUUErQnRCLGlCQUFpQixRQUFRLG9DQUFSLENBQWpCLENBL0JzQjtBQWdDMUIsbUJBQWUsS0FBZixFQUFzQixpQkFBdEIsRUFoQzBCO0NBQVosQ0FBbEI7Ozs7OztBQ0NBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBRUosSUFBSSxrQkFBa0IsU0FBbEIsZUFBa0IsQ0FBVSxDQUFWLEVBQWE7QUFDL0IsU0FBSyxLQUFMLEdBQWEsRUFBRSxLQUFGLENBRGtCO0FBRS9CLFNBQUssTUFBTCxHQUFjLEVBQUUsTUFBRixDQUZpQjtBQUcvQixTQUFLLE9BQUwsR0FBZSxFQUFFLE9BQUYsQ0FIZ0I7QUFJL0IsU0FBSyxTQUFMLEdBQWlCLEVBQUUsU0FBRixDQUpjO0FBSy9CLFNBQUssTUFBTCxHQUFjLEVBQUUsTUFBRixDQUxpQjtBQU0vQixTQUFLLFlBQUwsR0FBb0IsRUFBRSxZQUFGLENBTlc7QUFPL0IsU0FBSyxNQUFMLEdBQWMsRUFBRSxNQUFGLENBUGlCO0FBUS9CLFNBQUssUUFBTCxHQUFnQixFQUFFLFFBQUYsQ0FSZTtBQVMvQixTQUFLLEtBQUwsR0FBYSxFQUFFLEtBQUYsQ0FUa0I7QUFVL0IsU0FBSyxPQUFMLEdBQWUsRUFBRSxPQUFGLENBVmdCO0FBVy9CLFNBQUssS0FBTCxHQUFhLEVBQUUsS0FBRixDQVhrQjtBQVkvQixTQUFLLEtBQUwsR0FBYSxFQUFFLEtBQUYsQ0Faa0I7Q0FBYjs7QUFnQnRCLE9BQU8sT0FBUCxHQUFpQixlQUFqQjs7Ozs7O0FDbEJBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBR0osSUFBSSxlQUFlLFNBQWYsWUFBZSxDQUFVLENBQVYsRUFBYTs7QUFFNUIsU0FBSyxRQUFMLEdBQWdCLEVBQUUsUUFBRixJQUFjLG9CQUFkLENBRlk7QUFHNUIsU0FBSyxNQUFMLEdBQWMsQ0FBQyxFQUFFLE1BQUYsQ0FBUyxDQUFULEtBQWUsRUFBZixFQUFtQixFQUFFLE1BQUYsQ0FBUyxDQUFULEtBQWUsRUFBZixFQUFtQixFQUFFLE1BQUYsQ0FBUyxDQUFULEtBQWUsRUFBZixFQUFtQixFQUFFLE1BQUYsQ0FBUyxDQUFULEtBQWUsRUFBZixDQUF4RTtBQUg0QixRQUk1QixDQUFLLFdBQUwsR0FBbUIsRUFBRSxXQUFGLElBQWlCLENBQWpCLENBSlM7QUFLNUIsU0FBSyxlQUFMLEdBQXVCLEVBQUUsZUFBRixJQUFxQixNQUFyQixDQUxLO0FBTTVCLFNBQUssZUFBTCxHQUF1QixFQUFFLGVBQUYsSUFBcUIsQ0FBckIsQ0FOSztBQU81QixTQUFLLElBQUwsR0FBWSxFQUFFLElBQUYsSUFBVSxNQUFWLENBUGdCO0FBUTVCLFNBQUssUUFBTCxHQUFnQixFQUFFLFFBQUYsSUFBYyxJQUFkLENBUlk7QUFTNUIsU0FBSyxVQUFMLEdBQWtCLEVBQUUsVUFBRixJQUFnQixLQUFoQixDQVRVO0FBVTVCLFNBQUssUUFBTCxHQUFnQixFQUFFLFFBQUYsSUFBYyxLQUFkLENBVlk7QUFXNUIsU0FBSyxrQkFBTCxHQUEwQixFQUFFLGtCQUFGLElBQXdCLElBQXhCO0FBWEUsQ0FBYjs7QUFlbkIsT0FBTyxPQUFQLEdBQWlCLFlBQWpCOzs7Ozs7QUNsQkEsSUFBSSxhQUFhLFFBQVEsMkJBQVIsQ0FBYjs7QUFFSixJQUFJLFNBQVMsU0FBVCxNQUFTLENBQVUsQ0FBVixFQUFhOztBQUV0QixTQUFLLE1BQUwsR0FBYyxFQUFFLE1BQUYsSUFBWSxDQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCLFNBQXZCLEVBQWtDLFNBQWxDLEVBQTZDLFNBQTdDLEVBQzNCLFNBRDJCLEVBQ2hCLFNBRGdCLEVBQ0wsU0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFFM0IsU0FGMkIsRUFFaEIsU0FGZ0IsRUFFTCxTQUZLLEVBRU0sU0FGTixFQUVpQixTQUZqQixDQUFaLENBRlE7Q0FBYjs7QUFPYixPQUFPLE9BQVAsR0FBaUIsTUFBakI7Ozs7OztBQ1RBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBRUosSUFBSSxVQUFVLFNBQVYsT0FBVSxDQUFVLENBQVYsRUFBYTtBQUN2QixTQUFLLElBQUwsR0FBWSxvQkFBWixDQUR1Qjs7QUFHdkIsU0FBSyxRQUFMLEdBQWdCO0FBQ1osZUFBTyxNQUFQO0FBQ0EsV0FBRyxFQUFIO0FBQ0EsV0FBRyxFQUFFLFFBQUYsR0FBYSxFQUFFLFFBQUYsQ0FBVyxDQUFYLElBQWdCLENBQUMsRUFBRCxHQUFNLENBQUMsRUFBRDtLQUgxQyxDQUh1Qjs7QUFTdkIsU0FBSyxLQUFMLEdBQWE7QUFDVCxnQkFBUSxTQUFSO0FBQ0EsZUFBTyxTQUFQO0tBRkosQ0FUdUI7O0FBY3ZCLFNBQUssSUFBTCxHQUFZLEVBQUUsSUFBRixJQUFVLEVBQVYsQ0FkVztBQWV2QixTQUFLLE9BQUwsR0FBZSxJQUFmLENBZnVCO0NBQWI7O0FBbUJkLE9BQU8sT0FBUCxHQUFpQixPQUFqQjs7Ozs7O0FDckJBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBR0osSUFBSSxZQUFZLFNBQVosU0FBWSxDQUFVLENBQVYsRUFBYTs7QUFFekIsU0FBSyxPQUFMLEdBQWU7QUFDWCx1QkFBZTtBQUNYLHFCQUFTLElBQVQ7QUFDQSwyQkFBZSxRQUFmO0FBQ0EsZUFBRyxDQUFDLEVBQUQ7U0FIUDtLQURKLENBRnlCO0NBQWI7O0FBWWhCLE9BQU8sT0FBUCxHQUFpQixTQUFqQjs7Ozs7O0FDZkEsSUFBSSxhQUFhLFFBQVEsMkJBQVIsQ0FBYjs7QUFFSixJQUFJLFNBQVMsU0FBVCxNQUFTLENBQVUsQ0FBVixFQUFhOztBQUV0QixTQUFLLEtBQUwsR0FBYSxFQUFFLEtBQUYsSUFBVyxNQUFYLENBRlM7QUFHdEIsU0FBSyxlQUFMLEdBQXVCLEVBQUUsZUFBRixJQUFxQixNQUFyQixDQUhEO0FBSXRCLFNBQUssV0FBTCxHQUFtQixFQUFFLFdBQUYsSUFBaUIsTUFBakIsQ0FKRztBQUt0QixTQUFLLFdBQUwsR0FBbUIsRUFBRSxXQUFGLElBQWlCLENBQWpCLENBTEc7QUFNdEIsU0FBSyxPQUFMLEdBQWUsRUFBRSxPQUFGLElBQWEsSUFBYixDQU5PO0FBT3RCLFNBQUssUUFBTCxHQUFnQixFQUFFLFFBQUYsSUFBYyxLQUFkLENBUE07QUFRdEIsU0FBSyxZQUFMLEdBQW9CLEVBQUUsWUFBRixJQUFrQixFQUFsQixDQVJFO0FBU3RCLFNBQUssTUFBTCxHQUFjLEVBQUUsTUFBRixJQUFZLFlBQVosQ0FUUTtBQVV0QixTQUFLLFFBQUwsR0FBZ0IsRUFBRSxRQUFGLElBQWMsS0FBZCxDQVZNO0FBV3RCLFNBQUssTUFBTCxHQUFjLEVBQUUsTUFBRixJQUFZLEtBQVosQ0FYUTtBQVl0QixTQUFLLE9BQUwsR0FBZSxFQUFFLE9BQUYsSUFBYSxLQUFiLENBWk87QUFhdEIsU0FBSyxhQUFMLEdBQXFCLEVBQUUsYUFBRixJQUFtQixLQUFuQixDQWJDO0FBY3RCLFNBQUssS0FBTCxHQUFhLEVBQUUsS0FBRixDQWRTO0FBZXRCLFNBQUssQ0FBTCxHQUFTLEVBQUUsQ0FBRixJQUFPLENBQVAsQ0FmYTtBQWdCdEIsU0FBSyxDQUFMLEdBQVMsRUFBRSxDQUFGLElBQU8sRUFBUCxDQWhCYTs7QUFrQnRCLFNBQUssU0FBTCxHQUFpQjtBQUNiLG9CQUFZLGdEQUFaO0FBQ0EsZUFBTyxNQUFQO0tBRkosQ0FsQnNCO0FBc0J0QixTQUFLLGVBQUwsR0FBdUI7QUFDbkIsZUFBTyxNQUFQO0tBREosQ0F0QnNCO0FBeUJ0QixTQUFLLGNBQUwsR0FBc0I7QUFDbEIsZ0JBQVEsRUFBRSxjQUFGLEdBQW1CLEVBQUUsY0FBRixDQUFpQixNQUFqQixJQUEyQixTQUEzQixHQUF1QyxTQUExRDtLQURaLENBekJzQjtDQUFiOztBQStCYixPQUFPLE9BQVAsR0FBaUIsTUFBakI7Ozs7OztBQ2pDQSxJQUFJLGFBQWEsUUFBUSwyQkFBUixDQUFiOztBQUdKLElBQUksY0FBYyxTQUFkLFdBQWMsQ0FBVSxDQUFWLEVBQWE7OztBQUczQixRQUFJLEVBQUUsTUFBRixFQUFVO0FBQ1YsYUFBSyxNQUFMLEdBQWM7QUFDVixvQkFBUTtBQUNKLGlDQUFpQixFQUFFLE1BQUYsQ0FBUyxNQUFULENBQWdCLGVBQWhCO2FBRHJCO0FBR0Esd0JBQVk7QUFDUix5QkFBUyxFQUFFLE1BQUYsQ0FBUyxVQUFULENBQW9CLE9BQXBCLElBQStCLEtBQS9CO2FBRGI7QUFHQSw0QkFBZ0IsRUFBRSxNQUFGLENBQVMsY0FBVCxJQUEyQixJQUEzQjtTQVBwQixDQURVO0tBQWQ7O0FBSDJCLFFBZXZCLEVBQUUsTUFBRixJQUFZLEVBQUUsR0FBRixFQUFPO0FBQ25CLGFBQUssTUFBTCxDQUFZLFFBQVosR0FBdUIsRUFBRSxNQUFGLENBQVMsUUFBVCxJQUFxQixJQUFyQixDQURKO0FBRW5CLGFBQUssTUFBTCxDQUFZLFlBQVosR0FBMkIsRUFBRSxNQUFGLENBQVMsWUFBVCxJQUF5QixHQUF6QjtBQUZSLFlBR25CLENBQUssTUFBTCxDQUFZLFlBQVosR0FBMkIsRUFBRSxNQUFGLENBQVMsWUFBVCxJQUF5QixHQUF6QixDQUhSO0FBSW5CLGFBQUssTUFBTCxDQUFZLGNBQVosR0FBNkIsRUFBRSxNQUFGLENBQVMsY0FBVCxJQUEyQixDQUEzQixDQUpWO0tBQXZCOzs7QUFmMkIsUUF1QnZCLEVBQUUsTUFBRixFQUFVO0FBQ1YsYUFBSyxNQUFMLEdBQWM7QUFDVixxQkFBUyxFQUFFLE1BQUYsQ0FBUyxPQUFULElBQW9CLEVBQXBCO0FBQ1Qsb0JBQVEsRUFBRSxNQUFGLENBQVMsTUFBVCxJQUFtQixPQUFuQjtBQUZFLFNBQWQsQ0FEVTtLQUFkOzs7QUF2QjJCLFFBK0J2QixFQUFFLElBQUYsRUFBUTtBQUNSLGFBQUssSUFBTCxHQUFZO0FBQ1IsdUJBQVcsRUFBRSxJQUFGLENBQU8sU0FBUCxJQUFvQixHQUFwQjtBQUNYLG9CQUFRO0FBQ0osdUJBQU87QUFDSCwrQkFBVyxFQUFFLElBQUYsQ0FBTyxLQUFQLENBQWEsU0FBYixJQUEwQixDQUExQjtpQkFEZjthQURKO0FBS0Esb0JBQVE7QUFDSix5QkFBUyxFQUFFLElBQUYsQ0FBTyxNQUFQLENBQWMsT0FBZCxJQUF5QixLQUF6QjtBQUNULHdCQUFRO0FBQ0osMkJBQU87QUFDSCxpQ0FBUyxFQUFFLElBQUYsQ0FBTyxNQUFQLENBQWMsS0FBZCxDQUFvQixPQUFwQixJQUErQixJQUEvQjtBQUNULGdDQUFRLEVBQUUsSUFBRixDQUFPLE1BQVAsQ0FBYyxLQUFkLENBQW9CLE1BQXBCLElBQThCLENBQTlCO3FCQUZaO2lCQURKO2FBRko7U0FQSixDQURRO0tBQVo7Q0EvQmM7O0FBc0RsQixPQUFPLE9BQVAsR0FBaUIsV0FBakI7Ozs7OztBQ3pEQSxJQUFJLGFBQWEsUUFBUSwyQkFBUixDQUFiOztBQUVKLElBQUksU0FBUyxTQUFULE1BQVMsQ0FBVSxDQUFWLEVBQWE7O0FBRXRCLFNBQUssTUFBTCxHQUFjLEVBQUUsTUFBRixJQUFZLENBQUM7QUFDbkIsY0FBTSxVQUFOO0FBQ0EsY0FBTSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixDQUFOO0tBRmtCLEVBSXRCO0FBQ0ksY0FBTSxVQUFOO0FBQ0EsY0FBTSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixDQUFOO0tBTmtCLENBQVosQ0FGUTtDQUFiOztBQWNiLE9BQU8sT0FBUCxHQUFpQixNQUFqQjs7Ozs7O0FDaEJBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBRUosSUFBSSxXQUFXLFNBQVgsUUFBVyxDQUFVLENBQVYsRUFBYTs7QUFFeEIsU0FBSyxJQUFMLEdBQVksRUFBRSxJQUFGLElBQVUsRUFBVixDQUZZO0FBR3hCLFNBQUssS0FBTCxHQUFhLEVBQUUsS0FBRixJQUFXLE1BQVgsQ0FIVzs7QUFLeEIsU0FBSyxLQUFMLEdBQWE7QUFDVCxlQUFPLFNBQVA7QUFDQSxvQkFBWSxZQUFaO0FBQ0Esb0JBQVksUUFBWjtBQUNBLGtCQUFVLE1BQVY7S0FKSixDQUx3QjtDQUFiOztBQWVmLE9BQU8sT0FBUCxHQUFpQixRQUFqQjs7Ozs7O0FDakJBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBRUosSUFBSSxRQUFRLFNBQVIsS0FBUSxDQUFVLENBQVYsRUFBYTs7QUFFckIsU0FBSyxJQUFMLEdBQVksRUFBRSxJQUFGLElBQVUsRUFBVixDQUZTO0FBR3JCLFNBQUssS0FBTCxHQUFhLEVBQUUsS0FBRixJQUFXLE1BQVgsQ0FIUTs7QUFLckIsU0FBSyxLQUFMLEdBQWE7QUFDVCxlQUFPLFNBQVA7QUFDQSxvQkFBWSxZQUFaO0FBQ0Esb0JBQVksTUFBWjtBQUNBLGtCQUFVLE1BQVY7S0FKSixDQUxxQjtDQUFiOztBQWVaLE9BQU8sT0FBUCxHQUFpQixLQUFqQjs7Ozs7O0FDakJBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBRUosSUFBSSxVQUFVLFNBQVYsT0FBVSxDQUFVLENBQVYsRUFBYTtBQUN2QixTQUFLLGVBQUwsR0FBdUIsU0FBdkIsQ0FEdUI7QUFFdkIsU0FBSyxVQUFMLEdBQWtCLEVBQUUsVUFBRixJQUFnQixDQUFDLEtBQUQsRUFBUSxLQUFSLENBQWhCLENBRks7QUFHdkIsU0FBSyxTQUFMLEdBQWlCLEVBQUUsU0FBRixDQUhNO0FBSXZCLFNBQUssTUFBTCxHQUFjLEVBQUUsTUFBRixJQUFZLEtBQVosQ0FKUzs7QUFNdkIsU0FBSyxLQUFMLEdBQWE7QUFDVCxlQUFPLFNBQVA7QUFDQSxvQkFBWSxnREFBWjtLQUZKLENBTnVCOztBQVd2QixTQUFLLE9BQUwsR0FBZSxJQUFmLENBWHVCO0FBWXZCLFNBQUssYUFBTCxHQUFxQixFQUFFLGFBQUYsQ0FaRTtBQWF2QixTQUFLLFdBQUwsR0FBbUIsRUFBRSxXQUFGLElBQWlCLEVBQWpCLENBYkk7QUFjdkIsU0FBSyxXQUFMLEdBQW1CLEVBQUUsV0FBRixJQUFpQixFQUFqQixDQWRJO0NBQWI7O0FBbUJkLE9BQU8sT0FBUCxHQUFpQixPQUFqQjs7Ozs7O0FDckJBLElBQUksYUFBYSxRQUFRLDJCQUFSLENBQWI7O0FBRUosSUFBSSxRQUFRLFNBQVIsS0FBUSxDQUFVLENBQVYsRUFBYTs7QUFFckIsU0FBSyxVQUFMLEdBQWtCLEVBQUUsVUFBRixDQUZHO0FBR3JCLFNBQUssYUFBTCxHQUFxQixFQUFFLGFBQUYsSUFBbUIsU0FBbkIsQ0FIQTtBQUlyQixTQUFLLGFBQUwsR0FBcUIsRUFBRSxhQUFGLElBQW1CLENBQW5CLENBSkE7QUFLckIsU0FBSyxpQkFBTCxHQUF5QixFQUFFLGlCQUFGLElBQXVCLEtBQXZCLENBTEo7O0FBT3JCLFNBQUssTUFBTCxHQUFjO0FBQ1YsbUJBQVcsRUFBRSxNQUFGLEdBQVcsRUFBRSxNQUFGLENBQVMsU0FBVCxJQUFzQixTQUF0QixHQUFrQyxTQUE3QztBQUNYLGtCQUFVLEVBQUUsTUFBRixHQUFXLEVBQUUsTUFBRixDQUFTLFFBQVQsSUFBcUIsQ0FBckIsR0FBeUIsQ0FBcEM7QUFDVixlQUFPO0FBQ0gsbUJBQU8sU0FBUDtBQUNBLHdCQUFZLGdEQUFaO0FBQ0Esd0JBQVksUUFBWjtBQUNBLDZCQUFpQixNQUFqQjtBQUNBLHNCQUFVLE1BQVY7U0FMSjs7S0FISixDQVBxQjs7QUFvQnJCLFNBQUssU0FBTCxHQUFpQixFQUFFLFNBQUYsSUFBZSxHQUFmLENBcEJJO0FBcUJyQixTQUFLLFNBQUwsR0FBaUIsRUFBRSxTQUFGLElBQWUsTUFBZixDQXJCSTtBQXNCckIsU0FBSyxTQUFMLEdBQWlCLEVBQUUsU0FBRixJQUFlLEVBQWYsQ0F0Qkk7QUF1QnJCLFNBQUssWUFBTCxHQUFvQixFQUFFLFlBQUYsSUFBa0IsSUFBbEIsQ0F2QkM7QUF3QnJCLFNBQUssaUJBQUwsR0FBeUIsRUFBRSxpQkFBRixJQUF1QixJQUF2QixDQXhCSjtBQXlCckIsU0FBSyxZQUFMLEdBQW9CLEVBQUUsWUFBRixJQUFrQixTQUFsQixDQXpCQztBQTBCckIsU0FBSyxTQUFMLEdBQWlCLEVBQUUsU0FBRixJQUFlLFNBQWYsQ0ExQkk7O0FBNEJyQixTQUFLLEtBQUwsR0FBYTtBQUNULGlCQUFTLElBQVQ7QUFDQSxjQUFNLEVBQUUsS0FBRixHQUFVLEVBQUUsS0FBRixDQUFRLElBQVIsSUFBZ0IsRUFBaEIsR0FBcUIsRUFBL0I7QUFDTixnQkFBUSxFQUFFLEtBQUYsR0FBVSxFQUFFLEtBQUYsQ0FBUSxNQUFSLElBQWtCLENBQWxCLEdBQXNCLEVBQWhDO0FBQ1IsZUFBTztBQUNILG1CQUFPLFNBQVA7QUFDQSx3QkFBWSxnREFBWjtBQUNBLHdCQUFZLFFBQVo7QUFDQSw2QkFBaUIsTUFBakI7QUFDQSxzQkFBVSxNQUFWO1NBTEo7S0FKSixDQTVCcUI7Q0FBYjs7QUE2Q1osT0FBTyxPQUFQLEdBQWlCLEtBQWpCOzs7Ozs7QUMvQ0EsSUFBSSxhQUFhLFFBQVEsMkJBQVIsQ0FBYjs7QUFFSixJQUFJLFFBQVEsU0FBUixLQUFRLENBQVUsQ0FBVixFQUFhOztBQUVyQixTQUFLLGFBQUwsR0FBcUIsRUFBRSxhQUFGLElBQW1CLFNBQW5CLENBRkE7QUFHckIsU0FBSyxhQUFMLEdBQXFCLEVBQUUsYUFBRixJQUFtQixDQUFuQixDQUhBO0FBSXJCLFNBQUssaUJBQUwsR0FBeUIsRUFBRSxpQkFBRixJQUF1QixLQUF2QixDQUpKOztBQU1yQixTQUFLLE1BQUwsR0FBYztBQUNWLG1CQUFXLEVBQUUsTUFBRixHQUFXLEVBQUUsTUFBRixDQUFTLFNBQVQsR0FBcUIsU0FBaEM7QUFDWCxrQkFBVSxFQUFFLE1BQUYsR0FBVyxFQUFFLE1BQUYsQ0FBUyxRQUFULElBQXFCLENBQXJCLEdBQXlCLENBQXBDO0FBQ1YsZUFBTztBQUNILG1CQUFPLFNBQVA7QUFDQSx3QkFBWSxnREFBWjtBQUNBLHdCQUFZLFFBQVo7QUFDQSw2QkFBaUIsTUFBakI7QUFDQSxzQkFBVSxNQUFWO1NBTEo7O0tBSEosQ0FOcUI7O0FBbUJyQixTQUFLLFNBQUwsR0FBaUIsRUFBRSxTQUFGLElBQWUsTUFBZixDQW5CSTtBQW9CckIsU0FBSyxTQUFMLEdBQWlCLEVBQUUsU0FBRixJQUFlLENBQWYsQ0FwQkk7QUFxQnJCLFNBQUssR0FBTCxHQUFXLEVBQUUsR0FBRixJQUFTLElBQVQsQ0FyQlU7QUFzQnJCLFNBQUssR0FBTCxHQUFXLEVBQUUsR0FBRixJQUFTLElBQVQsQ0F0QlU7QUF1QnJCLFNBQUssUUFBTCxHQUFnQixFQUFFLFFBQUYsSUFBYyxLQUFkLENBdkJLO0FBd0JyQixTQUFLLFNBQUwsR0FBaUIsRUFBRSxTQUFGLElBQWUsRUFBZixDQXhCSTs7QUEwQnJCLFNBQUssU0FBTCxHQUFpQixFQUFFLFNBQUYsSUFBZSxDQUFDO0FBQzdCLGlCQUFTLENBQVQ7QUFDQSxpQkFBUyxTQUFUO0FBQ0EscUJBQWEsT0FBYjtBQUNBLGlCQUFTLENBQVQ7S0FKNEIsQ0FBZixDQTFCSTs7QUFpQ3JCLFNBQUssWUFBTCxHQUFvQixFQUFFLFlBQUYsSUFBa0IsSUFBbEIsQ0FqQ0M7QUFrQ3JCLFNBQUssaUJBQUwsR0FBeUIsRUFBRSxpQkFBRixJQUF1QixJQUF2QixDQWxDSjtBQW1DckIsU0FBSyxZQUFMLEdBQW9CLEVBQUUsWUFBRixJQUFrQixTQUFsQixDQW5DQztBQW9DckIsU0FBSyxTQUFMLEdBQWlCLEVBQUUsU0FBRixJQUFlLFNBQWYsQ0FwQ0k7QUFxQ3JCLFNBQUssU0FBTCxHQUFpQixFQUFFLFNBQUYsSUFBZSxDQUFmLENBckNJOztBQXVDckIsU0FBSyxLQUFMLEdBQWE7QUFDVCxpQkFBUyxJQUFUO0FBQ0EsY0FBTSxFQUFFLEtBQUYsR0FBVSxFQUFFLEtBQUYsQ0FBUSxJQUFSLElBQWdCLEVBQWhCLEdBQXFCLEVBQS9CO0FBQ04sZ0JBQVEsRUFBRSxLQUFGLEdBQVUsRUFBRSxLQUFGLENBQVEsTUFBUixJQUFrQixDQUFsQixHQUFzQixDQUFoQztBQUNSLGVBQU8sRUFBRSxLQUFGLEdBQVUsRUFBRSxLQUFGLENBQVEsS0FBUixJQUFpQixRQUFqQixHQUE0QixRQUF0QztBQUNQLGdCQUFRLEVBQVI7QUFDQSxrQkFBVSxDQUFWO0FBQ0EsV0FBRyxFQUFFLEtBQUYsR0FBVSxFQUFFLEtBQUYsQ0FBUSxDQUFSLElBQWEsRUFBYixHQUFrQixFQUE1QjtBQUNILFdBQUcsQ0FBQyxFQUFEOztBQUVILGVBQU87QUFDSCxtQkFBTyxTQUFQO0FBQ0Esd0JBQVksZ0RBQVo7QUFDQSx3QkFBWSxRQUFaO0FBQ0EsNkJBQWlCLE1BQWpCO0FBQ0Esc0JBQVUsTUFBVjtTQUxKO0tBVkosQ0F2Q3FCOztBQTBEckIsU0FBSyxJQUFMLEdBQVksRUFBRSxJQUFGLElBQVUsUUFBVixDQTFEUztDQUFiOztBQStEWixPQUFPLE9BQVAsR0FBaUIsS0FBakI7Ozs7Ozs7QUNoRUEsSUFBSSxhQUFhOztBQUViLFVBQU0sY0FBVSxpQkFBVixFQUE2QjtBQUMvQixZQUFJLFFBQVEsSUFBSSxXQUFXLEtBQVgsQ0FBaUIsaUJBQXJCLENBQVIsQ0FEMkI7QUFFM0IsZUFBTyxLQUFQLENBRjJCO0tBQTdCOztDQUZOOztBQVNKLE9BQU8sT0FBUCxHQUFpQixVQUFqQjs7Ozs7O0FDVkEsSUFBSSxrQkFBa0IsUUFBUSxzQkFBUixDQUFsQjtBQUNKLElBQUksa0JBQWtCLFFBQVEsd0JBQVIsQ0FBbEI7QUFDSixJQUFJLGNBQWMsUUFBUSxzQkFBUixDQUFkO0FBQ0osSUFBSSxnQkFBZ0IsUUFBUSxvQkFBUixDQUFoQjtBQUNKLElBQUksZ0JBQWdCLFFBQVEsb0JBQVIsQ0FBaEI7QUFDSixJQUFJLGdCQUFnQixRQUFRLG9CQUFSLENBQWhCOztBQUVKLElBQUksaUJBQWlCLFNBQWpCLGNBQWlCLENBQVUsS0FBVixFQUFpQixpQkFBakIsRUFBb0M7Ozs7O0FBT3JELE1BQUUsd0JBQUYsRUFBNEIsS0FBNUIsQ0FBa0MsWUFBWTtBQUMxQyx3QkFBZ0IsTUFBaEIsQ0FBdUIsRUFBRSxJQUFGLEVBQVEsR0FBUixFQUF2QixFQUFzQyxPQUF0QyxFQUErQyxLQUEvQyxFQUQwQztLQUFaLENBQWxDOzs7QUFQcUQsS0FZckQsQ0FBRSx5QkFBRixFQUE2QixLQUE3QixDQUFtQyxZQUFZO0FBQzNDLHdCQUFnQixNQUFoQixDQUF1QixFQUFFLElBQUYsRUFBUSxHQUFSLEVBQXZCLEVBQXNDLFFBQXRDLEVBQWdELEtBQWhELEVBRDJDO0tBQVosQ0FBbkM7OztBQVpxRCxLQWlCckQsQ0FBRSxlQUFGLEVBQW1CLEtBQW5CLENBQXlCLFlBQVk7O0FBRWpDLFlBQUksY0FBYyxZQUFZLG1CQUFaLENBQWdDLGNBQWhDLENBQWQsQ0FGNkI7O0FBSWpDLHdCQUFnQixNQUFoQixDQUF1QixXQUF2QixFQUFvQyxLQUFwQyxFQUEyQyxpQkFBM0MsRUFKaUM7S0FBWixDQUF6Qjs7Ozs7QUFqQnFELEtBNEJyRCxDQUFFLElBQUYsQ0FBTyxDQUFDLE1BQUQsRUFBUyxLQUFULEVBQWdCLFFBQWhCLEVBQTBCLFFBQTFCLEVBQW9DLFNBQXBDLEVBQStDLFdBQS9DLENBQVAsRUFBb0UsVUFBVSxDQUFWLEVBQWEsSUFBYixFQUFtQjtBQUNuRixVQUFFLGlCQUFpQixJQUFqQixDQUFGLENBQXlCLEtBQXpCLENBQStCLFlBQVk7QUFDdkMsNEJBQWdCLENBQWhCLEVBQW1CLElBQW5CLEVBQXlCLEtBQXpCLEVBQWdDLGlCQUFoQyxFQUR1QztTQUFaLENBQS9CLENBRG1GO0tBQW5CLENBQXBFOzs7QUE1QnFELEtBb0NyRCxDQUFFLHVCQUFGLEVBQTJCLE1BQTNCLENBQWtDLFlBQVk7QUFDMUMsc0JBQWMsWUFBZCxDQUEyQixFQUFFLElBQUYsRUFBUSxHQUFSLEVBQTNCLEVBQTBDLEtBQTFDLEVBQWlELGlCQUFqRCxFQUQwQztLQUFaLENBQWxDOzs7OztBQXBDcUQsS0EyQ3JELENBQUUsaUNBQUYsRUFBcUMsTUFBckMsQ0FBNEMsWUFBWTtBQUNwRCxZQUFJLE1BQU0sWUFBWSxnQkFBWixDQUE2QixFQUFFLElBQUYsQ0FBN0IsQ0FBTixDQURnRDtBQUVwRCxzQkFBYyxnQkFBZCxDQUErQixHQUEvQixFQUFvQyxLQUFwQyxFQUEyQyxpQkFBM0MsRUFGb0Q7S0FBWixDQUE1Qzs7O0FBM0NxRCxLQWlEckQsQ0FBRSwwQ0FBRixFQUE4QyxLQUE5QyxDQUFvRCxZQUFZO0FBQzVELFlBQUksT0FBTyxPQUFPLEVBQUUscUJBQUYsRUFBeUIsR0FBekIsRUFBUCxDQUFQLENBRHdEO0FBRTVELFlBQUksT0FBTyxPQUFPLEVBQUUscUJBQUYsRUFBeUIsR0FBekIsRUFBUCxDQUFQLENBRndEOztBQUk1RCxzQkFBYyxpQkFBZCxDQUFnQyxJQUFoQyxFQUFzQyxJQUF0QyxFQUE0QyxLQUE1QyxFQUFtRCxpQkFBbkQsRUFKNEQ7S0FBWixDQUFwRDs7Ozs7QUFqRHFELEtBMkRyRCxDQUFFLDhCQUFGLEVBQWtDLEtBQWxDLENBQXdDLFlBQVk7QUFDaEQsWUFBSSxXQUFXLEVBQUUsSUFBRixFQUFRLEdBQVIsRUFBWCxDQUQ0QztBQUVoRCxzQkFBYyxXQUFkLENBQTBCLFFBQTFCLEVBQW9DLEtBQXBDLEVBQTJDLGlCQUEzQyxFQUZnRDtLQUFaLENBQXhDOzs7QUEzRHFELEtBaUVyRCxDQUFFLHVDQUFGLEVBQTJDLEtBQTNDLENBQWlELFlBQVk7QUFDekQsWUFBSSxjQUFjLE9BQU8sRUFBRSxJQUFGLEVBQVEsR0FBUixFQUFQLENBQWQsQ0FEcUQ7QUFFekQsc0JBQWMsc0JBQWQsQ0FBcUMsV0FBckMsRUFBa0QsS0FBbEQsRUFBeUQsaUJBQXpELEVBRnlEO0tBQVosQ0FBakQ7Ozs7O0FBakVxRCxLQTBFckQsQ0FBRSw4QkFBRixFQUFrQyxLQUFsQyxDQUF3QyxZQUFZO0FBQ2hELFlBQUksV0FBVyxFQUFFLElBQUYsRUFBUSxHQUFSLEVBQVgsQ0FENEM7QUFFaEQsc0JBQWMsV0FBZCxDQUEwQixRQUExQixFQUFvQyxLQUFwQyxFQUEyQyxpQkFBM0MsRUFGZ0Q7S0FBWixDQUF4Qzs7O0FBMUVxRCxLQWdGckQsQ0FBRSxnQ0FBRixFQUFvQyxLQUFwQyxDQUEwQyxZQUFZO0FBQ2xELFlBQUksZUFBZSxPQUFPLEVBQUUsSUFBRixFQUFRLEdBQVIsRUFBUCxDQUFmLENBRDhDO0FBRWxELHNCQUFjLGVBQWQsQ0FBOEIsWUFBOUIsRUFBNEMsS0FBNUMsRUFBbUQsaUJBQW5ELEVBRmtEO0tBQVosQ0FBMUM7OztBQWhGcUQsS0FzRnJELENBQUUsdUNBQUYsRUFBMkMsS0FBM0MsQ0FBaUQsWUFBWTtBQUN6RCxZQUFJLGNBQWMsT0FBTyxFQUFFLElBQUYsRUFBUSxHQUFSLEVBQVAsQ0FBZCxDQURxRDtBQUV6RCxzQkFBYyxzQkFBZCxDQUFxQyxXQUFyQyxFQUFrRCxLQUFsRCxFQUF5RCxpQkFBekQsRUFGeUQ7S0FBWixDQUFqRDs7O0FBdEZxRCxLQTRGckQsQ0FBRSx5QkFBRixFQUE2QixLQUE3QixDQUFtQyxZQUFZO0FBQzNDLFlBQUksU0FBUyxPQUFPLEVBQUUsSUFBRixFQUFRLEdBQVIsRUFBUCxDQUFULENBRHVDO0FBRTNDLHNCQUFjLFNBQWQsQ0FBd0IsTUFBeEIsRUFBZ0MsS0FBaEMsRUFBdUMsaUJBQXZDLEVBRjJDO0tBQVosQ0FBbkM7OztBQTVGcUQsS0FrR3JELENBQUUseUJBQUYsRUFBNkIsS0FBN0IsQ0FBbUMsWUFBWTtBQUMzQyxZQUFJLFNBQVMsT0FBTyxFQUFFLElBQUYsRUFBUSxHQUFSLEVBQVAsQ0FBVCxDQUR1QztBQUUzQyxzQkFBYyxTQUFkLENBQXdCLE1BQXhCLEVBQWdDLEtBQWhDLEVBQXVDLGlCQUF2QyxFQUYyQztLQUFaLENBQW5DOzs7QUFsR3FELEtBd0dyRCxDQUFFLGlDQUFGLEVBQXFDLE1BQXJDLENBQTRDLFlBQVk7QUFDcEQsWUFBSSxNQUFNLFlBQVksZ0JBQVosQ0FBNkIsRUFBRSxJQUFGLENBQTdCLENBQU4sQ0FEZ0Q7QUFFcEQsc0JBQWMsZ0JBQWQsQ0FBK0IsR0FBL0IsRUFBb0MsS0FBcEMsRUFBMkMsaUJBQTNDLEVBRm9EO0tBQVosQ0FBNUMsQ0F4R3FEO0NBQXBDOztBQWlIckIsT0FBTyxPQUFQLEdBQWlCLGNBQWpCOzs7Ozs7O0FDdkhBLElBQUksa0JBQWtCLFNBQWxCLGVBQWtCLENBQVUsQ0FBVixFQUFhLElBQWIsRUFBbUIsS0FBbkIsRUFBMEIsaUJBQTFCLEVBQTZDOztBQUUvRCxRQUFJLGtCQUFKLENBRitEOztBQUkvRCxRQUFJLFNBQVMsS0FBVCxFQUFnQjs7QUFFaEIsY0FBTSxRQUFOLEdBQWlCLElBQWpCLENBRmdCO0FBR2hCLDZCQUFxQixRQUFyQjs7QUFIZ0IsU0FLaEIsQ0FBRSxVQUFGLEVBQWMsSUFBZCxHQUxnQjtLQUFwQixNQVFPO0FBQ0gsY0FBTSxRQUFOLEdBQWlCLEtBQWpCLENBREc7QUFFSCw2QkFBcUIsTUFBckIsQ0FGRztBQUdILFVBQUUsVUFBRixFQUFjLElBQWQsR0FIRztLQVJQOztBQWVBLFFBQUksU0FBUyxXQUFULEVBQXNCO0FBQ3RCLGVBQU8sUUFBUCxDQURzQjtLQUExQjs7QUFJQSxVQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsTUFBZixDQUFzQixFQUF0QixFQUEwQixLQUExQixFQXZCK0Q7QUF3Qi9ELFVBQU0sS0FBTixDQUFZLENBQVosRUFBZSxNQUFmLENBQXNCLEVBQXRCLEVBQTBCLEtBQTFCLEVBeEIrRDs7QUEwQi9ELE1BQUUsSUFBRixDQUFPLE1BQU0sTUFBTixFQUFjLFlBQVk7QUFDN0IsYUFBSyxNQUFMLENBQVk7QUFDUixrQkFBTSxJQUFOO1NBREosRUFENkI7S0FBWixDQUFyQixDQTFCK0Q7O0FBZ0MvRCxVQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsUUFBZixDQUF3QjtBQUNwQixlQUFPLGtCQUFQO0tBREosRUFoQytEOztBQXFDL0Qsc0JBQWtCLEtBQWxCLENBQXdCLElBQXhCLEdBQStCLElBQS9CLENBckMrRDtBQXNDL0Qsc0JBQWtCLEtBQWxCLENBQXdCLEtBQXhCLENBQThCLEtBQTlCLEdBQXNDLGtCQUF0QyxDQXRDK0Q7Q0FBN0M7O0FBMEN0QixPQUFPLE9BQVAsR0FBaUIsZUFBakI7Ozs7Ozs7QUMxQ0EsSUFBSSxnQkFBZ0I7OztBQUdoQixzQkFBa0IsU0FBUyxnQkFBVCxDQUEwQixHQUExQixFQUErQixLQUEvQixFQUFzQyxpQkFBdEMsRUFBeUQ7O0FBRXZFLFlBQUksU0FBUyxNQUFNLE1BQU4sQ0FGMEQ7QUFHdkUsZUFBTyxPQUFQLENBQWUsUUFBZixHQUEwQixHQUExQixDQUh1RTtBQUl2RSxlQUFPLE1BQVAsR0FKdUU7O0FBT3ZFLDBCQUFrQixNQUFsQixDQUF5QixRQUF6QixHQUFvQyxHQUFwQyxDQVB1RTtLQUF6RDs7O0FBWWxCLGtCQUFjLFNBQVMsWUFBVCxDQUFzQixHQUF0QixFQUEyQixLQUEzQixFQUFrQyxpQkFBbEMsRUFBcUQ7O0FBRS9ELFlBQUksU0FBUyxNQUFNLE1BQU4sQ0FGa0Q7QUFHL0QsWUFBSSxRQUFRLFdBQVIsRUFBcUI7QUFDckIsbUJBQU8sS0FBUCxDQUFhLElBQWIsR0FEcUI7QUFFckIsbUJBQU8sR0FBUCxDQUFXLElBQVgsR0FGcUI7QUFHckIsbUJBQU8sT0FBUCxHQUFpQixLQUFqQixDQUhxQjtBQUlyQixtQkFBTyxPQUFQLENBQWUsT0FBZixHQUF5QixLQUF6QixDQUpxQjtBQUtyQixtQkFBTyxNQUFQLENBQWMsS0FBZCxFQUxxQjs7QUFPckIsa0JBQU0sU0FBTixDQVBxQjtTQUF6QixNQVNPOztBQUVILG1CQUFPLE9BQVAsQ0FBZSxNQUFmLEdBQXdCLEdBQXhCLENBRkc7QUFHSCxtQkFBTyxNQUFQLENBQWMsS0FBZCxFQUhHO0FBSUgsbUJBQU8sS0FBUCxDQUFhLElBQWIsR0FKRztBQUtILG1CQUFPLEdBQVAsQ0FBVyxJQUFYLEdBTEc7QUFNSCxtQkFBTyxPQUFQLEdBQWlCLElBQWpCLENBTkc7QUFPSCxtQkFBTyxPQUFQLENBQWUsT0FBZixHQUF5QixJQUF6QixDQVBHO1NBVFA7O0FBbUJBLDBCQUFrQixNQUFsQixDQUF5QixNQUF6QixHQUFrQyxHQUFsQyxDQXRCK0Q7QUF1Qi9ELDBCQUFrQixNQUFsQixDQUF5QixPQUF6QixHQUFtQyxPQUFPLE9BQVAsQ0FBZSxPQUFmLENBdkI0QjtLQUFyRDs7OztBQTZCZCx1QkFBbUIsMkJBQVUsSUFBVixFQUFnQixJQUFoQixFQUFzQixLQUF0QixFQUE2QixpQkFBN0IsRUFBZ0Q7QUFDL0QsWUFBSSxTQUFTLE1BQU0sTUFBTixDQURrRDtBQUUvRCxlQUFPLE9BQVAsQ0FBZSxDQUFmLEdBQW1CLElBQW5CLENBRitEO0FBRy9ELGVBQU8sT0FBUCxDQUFlLENBQWYsR0FBbUIsSUFBbkIsQ0FIK0Q7QUFJL0QsZUFBTyxNQUFQLENBQWMsS0FBZCxFQUorRDs7QUFNL0QsMEJBQWtCLE1BQWxCLENBQXlCLENBQXpCLEdBQTZCLElBQTdCLENBTitEO0FBTy9ELDBCQUFrQixNQUFsQixDQUF5QixDQUF6QixHQUE2QixJQUE3QixDQVArRDtLQUFoRDs7Q0E1Q25COztBQTBESixPQUFPLE9BQVAsR0FBaUIsYUFBakI7Ozs7O0FDNURBLElBQUksa0JBQWtCO0FBQ2xCLFlBQVEsZ0JBQVUsR0FBVixFQUFlLFNBQWYsRUFBMEIsS0FBMUIsRUFBaUM7QUFDckMsY0FBTSxPQUFPLEdBQVAsQ0FBTixDQURxQztBQUVyQyxZQUFJLENBQUMsTUFBTSxHQUFOLENBQUQsRUFBYTtBQUNiLGNBQUUscUJBQUYsRUFBeUIsR0FBekIsQ0FBNkIsU0FBN0IsRUFBd0MsTUFBTSxJQUFOLENBQXhDLENBRGE7U0FBakI7QUFHQSxjQUFNLE1BQU4sR0FMcUM7S0FBakM7O0FBUVIsWUFBUSxnQkFBVSxXQUFWLEVBQXVCLEtBQXZCLEVBQThCLGlCQUE5QixFQUFpRDs7QUFFckQsVUFBRSxJQUFGLENBQU8sTUFBTSxJQUFOLEVBQVksVUFBVSxDQUFWLEVBQWEsQ0FBYixFQUFnQjtBQUMvQixjQUFFLE9BQUYsR0FBWSxJQUFaO0FBRCtCLFNBQWhCLENBQW5CLENBRnFEO0FBS3JELGNBQU0sTUFBTixHQUFlLFdBQWYsQ0FMcUQ7QUFNckQsY0FBTSxNQUFOLENBQWEsS0FBYixFQU5xRDs7QUFRckQsMEJBQWtCLEtBQWxCLENBQXdCLE1BQXhCLEdBQWlDLFdBQWpDLENBUnFEO0tBQWpEO0NBVFI7O0FBd0JKLE9BQU8sT0FBUCxHQUFpQixlQUFqQjs7Ozs7OztBQ3RCQSxJQUFJLGdCQUFnQjs7O0FBR2hCLGlCQUFhLHFCQUFVLFFBQVYsRUFBb0IsS0FBcEIsRUFBMkIsaUJBQTNCLEVBQThDO0FBQ3ZELGNBQU0sS0FBTixDQUFZLENBQVosRUFBZSxRQUFmLENBQXdCO0FBQ3BCLGtCQUFNLFFBQU47U0FESixFQUR1RDs7QUFLdkQsMEJBQWtCLEtBQWxCLENBQXdCLEtBQXhCLENBQThCLElBQTlCLEdBQXFDLFFBQXJDLENBTHVEO0tBQTlDOzs7QUFXYiw0QkFBd0IsZ0NBQVUsV0FBVixFQUF1QixLQUF2QixFQUE4QixpQkFBOUIsRUFBaUQ7O0FBR3JFLFlBQUksTUFBTSxXQUFOLEtBQXNCLGdCQUFnQixDQUFoQixFQUFtQjtBQUN6QywwQkFBYyxTQUFkLENBRHlDO1NBQTdDLENBSHFFOztBQU9yRSxZQUFJLENBQUMsS0FBRCxFQUFROztBQUNSLG1CQUFPLFdBQVAsQ0FEUTtTQUFaOztBQUlBLFlBQUksY0FBYyxNQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsT0FBZixFQUF3QjtBQUN0QywwQkFBYyxNQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsT0FBZixDQUR3QjtTQUExQzs7QUFJQSxjQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsTUFBZixDQUFzQjtBQUNsQiwwQkFBYyxXQUFkOztTQURKLEVBZnFFO0FBbUJyRSwwQkFBa0IsS0FBbEIsQ0FBd0IsWUFBeEIsR0FBdUMsV0FBdkMsQ0FuQnFFO0tBQWpEOztDQWR4Qjs7QUF5Q0osT0FBTyxPQUFQLEdBQWlCLGFBQWpCOzs7Ozs7QUMxQ0EsSUFBSSxhQUFhLFFBQVEsd0JBQVIsQ0FBYjs7QUFJSixJQUFJLGdCQUFnQjs7O0FBR2hCLHNCQUFrQiwwQkFBVSxHQUFWLEVBQWUsS0FBZixFQUFzQixpQkFBdEIsRUFBeUM7QUFDdkQsY0FBTSxLQUFOLENBQVksQ0FBWixFQUFlLE1BQWYsQ0FBc0I7QUFDbEIsc0JBQVUsR0FBVjtTQURKLEVBRHVEO0FBSXZELDBCQUFrQixLQUFsQixDQUF3QixRQUF4QixHQUFtQyxHQUFuQyxDQUp1RDtLQUF6Qzs7O0FBU2QsZUFBVyxtQkFBVSxNQUFWLEVBQWtCLEtBQWxCLEVBQXlCLGlCQUF6QixFQUE0QztBQUN2RCxpQkFBUyxXQUFXLGlCQUFYLENBQTZCLE1BQTdCLENBQVQsQ0FEdUQ7QUFFdkQsWUFBSSxDQUFDLEtBQUQsRUFBUTs7QUFDUixtQkFBTyxNQUFQLENBRFE7U0FBWjs7QUFJQSxjQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsTUFBZixDQUFzQjtBQUNsQixpQkFBSyxNQUFMO1NBREosRUFOdUQ7O0FBVXZELDBCQUFrQixLQUFsQixDQUF3QixHQUF4QixHQUE4QixNQUE5QixDQVZ1RDtLQUE1Qzs7O0FBY2YsZUFBVyxtQkFBVSxNQUFWLEVBQWtCLEtBQWxCLEVBQXlCLGlCQUF6QixFQUE0QztBQUNuRCxpQkFBUyxXQUFXLGlCQUFYLENBQTZCLE1BQTdCLENBQVQsQ0FEbUQ7QUFFbkQsWUFBSSxDQUFDLEtBQUQsRUFBUTs7QUFDUixtQkFBTyxNQUFQLENBRFE7U0FBWjs7QUFJQSxjQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsTUFBZixDQUFzQjtBQUNsQixpQkFBSyxNQUFMO1NBREosRUFObUQ7O0FBVW5ELDBCQUFrQixLQUFsQixDQUF3QixHQUF4QixHQUE4QixNQUE5QixDQVZtRDtLQUE1Qzs7O0FBY1gsaUJBQWEscUJBQVUsUUFBVixFQUFvQixLQUFwQixFQUEyQixpQkFBM0IsRUFBOEM7QUFDdkQsY0FBTSxLQUFOLENBQVksQ0FBWixFQUFlLFFBQWYsQ0FBd0I7QUFDcEIsa0JBQU0sUUFBTjtTQURKLEVBRHVEOztBQUt2RCwwQkFBa0IsS0FBbEIsQ0FBd0IsS0FBeEIsQ0FBOEIsSUFBOUIsR0FBcUMsUUFBckMsQ0FMdUQ7S0FBOUM7Ozs7QUFZYixxQkFBaUIseUJBQVUsWUFBVixFQUF3QixLQUF4QixFQUErQixpQkFBL0IsRUFBa0Q7O0FBRS9ELHVCQUFlLFdBQVcsaUJBQVgsQ0FBNkIsWUFBN0IsQ0FBZixDQUYrRDs7QUFJL0QsY0FBTSxLQUFOLENBQVksQ0FBWixFQUFlLFFBQWYsQ0FBd0I7QUFDcEIsZUFBRyxZQUFIO1NBREosRUFKK0Q7O0FBUS9ELDBCQUFrQixLQUFsQixDQUF3QixLQUF4QixDQUE4QixDQUE5QixHQUFrQyxZQUFsQyxDQVIrRDtLQUFsRDs7O0FBYWpCLDRCQUF3QixnQ0FBVSxXQUFWLEVBQXVCLEtBQXZCLEVBQThCLGlCQUE5QixFQUFpRDs7QUFHckUsc0JBQWMsV0FBVyxpQkFBWCxDQUE2QixXQUE3QixDQUFkLENBSHFFOztBQUtyRSxZQUFJLENBQUMsS0FBRCxFQUFROztBQUNSLG1CQUFPLFdBQVAsQ0FEUTtTQUFaOztBQUlBLFlBQUksY0FBYyxNQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsT0FBZixFQUF3QjtBQUN0QywwQkFBYyxNQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsT0FBZixDQUR3QjtTQUExQzs7QUFJQSxjQUFNLEtBQU4sQ0FBWSxDQUFaLEVBQWUsTUFBZixDQUFzQjtBQUNsQiwwQkFBYyxXQUFkOztTQURKLEVBYnFFO0FBaUJyRSwwQkFBa0IsS0FBbEIsQ0FBd0IsWUFBeEIsR0FBdUMsV0FBdkMsQ0FqQnFFO0tBQWpEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBakVSLENBQWhCOztBQWlISixPQUFPLE9BQVAsR0FBaUIsYUFBakI7Ozs7Ozs7QUNwSEMsSUFBSSxrQkFBa0IsUUFBUSw2Q0FBUixDQUFsQjtJQUNBLFlBQVksUUFBUSxpQkFBUixDQUFaO0lBQ0EsYUFBYSxRQUFRLGtCQUFSLENBQWI7SUFDQSxjQUFjLFFBQVEsbUJBQVIsQ0FBZDtJQUNBLGdCQUFnQixRQUFRLHFCQUFSLENBQWhCO0lBQ0EsYUFBYSxRQUFRLGtCQUFSLENBQWI7SUFDQSxrQkFBa0IsUUFBUSx3QkFBUixDQUFsQjtJQUNBLGFBQWEsUUFBUSxrQkFBUixDQUFiO0lBQ0EsZUFBZSxRQUFRLG9CQUFSLENBQWY7SUFDQSxZQUFZLFFBQVEsaUJBQVIsQ0FBWjtJQUNBLGNBQWMsUUFBUSxtQkFBUixDQUFkO0lBQ0EsWUFBWSxRQUFRLGtCQUFSLENBQVo7SUFDQSxZQUFZLFFBQVEsa0JBQVIsQ0FBWjs7QUFHSixJQUFJLHNCQUFzQixTQUFTLG1CQUFULEdBQStCOzs7QUFHckQsUUFBSSxVQUFVO0FBQ1YsZUFBTyxXQUFQO0FBQ0EsZ0JBQVEsWUFBUjtBQUNBLGlCQUFTLGFBQVQ7O0FBRUEsZ0JBQVEsWUFBUjtBQUNBLHFCQUFhLGlCQUFiO0FBQ0EsZ0JBQVEsWUFBUjtBQUNBLGtCQUFVLGNBQVY7QUFDQSxlQUFPLFdBQVA7QUFDQSxpQkFBUyxhQUFUO0FBQ0EsZUFBTyxXQUFQO0FBQ0EsZUFBTyxXQUFQOztLQVpBLENBSGlEOztBQW9CckQsUUFBSSxvQkFBb0IsSUFBSSxlQUFKLENBQW9CLE9BQXBCLENBQXBCLENBcEJpRDtBQXFCckQsV0FBTyxpQkFBUCxDQXJCcUQ7Q0FBL0I7O0FBd0IxQixPQUFPLE9BQVAsR0FBaUIsbUJBQWpCOzs7Ozs7O0FDdkNELElBQUksZUFBZSxRQUFRLGlDQUFSLENBQWY7O0FBR0osSUFBSSxZQUFZLFNBQVMsU0FBVCxHQUFxQjs7QUFFakMsUUFBSSxhQUFhLEVBQUUsc0JBQUYsRUFBMEIsTUFBMUIsRUFBYixDQUY2QjtBQUc3QixRQUFJLGVBQWUsV0FBZixFQUEyQjtBQUMzQixxQkFBYSxRQUFiLENBRDJCO0tBQS9COzs7QUFINkIsUUFRN0IsVUFBVTtBQUNWLGdCQUFRLENBQUMsT0FBTyxFQUFFLHVCQUFGLEVBQTJCLEdBQTNCLEVBQVAsQ0FBRCxFQUNFLE9BQU8sRUFBRSx5QkFBRixFQUE2QixHQUE3QixFQUFQLENBREYsRUFFRSxPQUFPLEVBQUUsMEJBQUYsRUFBOEIsR0FBOUIsRUFBUCxDQUZGLEVBR0UsT0FBTyxFQUFFLHdCQUFGLEVBQTRCLEdBQTVCLEVBQVAsQ0FIRixDQUFSO0FBS0Esa0JBQVUsRUFBRSxxQkFBRixFQUF5QixHQUF6QixFQUFWOztBQUVBLGNBQU0sVUFBTjtLQVJBLENBUjZCOztBQXFCakMsUUFBSSxnQkFBZ0IsSUFBSSxZQUFKLENBQWlCLE9BQWpCLENBQWhCLENBckI2QjtBQXNCakMsV0FBTyxhQUFQLENBdEJpQztDQUFyQjs7QUF5QmhCLE9BQU8sT0FBUCxHQUFpQixTQUFqQjs7Ozs7OztBQzVCQSxJQUFJLFNBQVMsUUFBUSxrQ0FBUixDQUFUOztBQUdILElBQUksYUFBYSxTQUFTLFVBQVQsR0FBc0I7OztBQUduQyxRQUFJLFVBQVUsRUFBVixDQUgrQjs7QUFRbkMsUUFBSSxTQUFTLElBQUksTUFBSixDQUFXLE9BQVgsQ0FBVCxDQVIrQjtBQVNuQyxXQUFPLE9BQU8sTUFBUCxDQVQ0QjtDQUF0Qjs7QUFZakIsT0FBTyxPQUFQLEdBQWlCLFVBQWpCOzs7Ozs7O0FDZkQsSUFBSSxVQUFVLFFBQVEsbUNBQVIsQ0FBVjs7QUFHSixJQUFJLGNBQWMsU0FBUyxXQUFULEdBQXVCOzs7QUFHckMsUUFBSSxVQUFVO0FBQ1YsY0FBTSxFQUFFLDhCQUFGLEVBQWtDLEdBQWxDLEVBQU47QUFDQSxrQkFBUztBQUNMLGVBQUcsT0FBTyxFQUFFLGlDQUFGLEVBQXFDLEdBQXJDLEVBQVAsQ0FBSDtTQURKOztLQUZBLENBSGlDOztBQWFyQyxRQUFJLFVBQVUsSUFBSSxPQUFKLENBQVksT0FBWixDQUFWLENBYmlDO0FBY3JDLFdBQU8sT0FBUCxDQWRxQztDQUF2Qjs7QUFpQmxCLE9BQU8sT0FBUCxHQUFpQixXQUFqQjs7Ozs7OztBQ3BCQSxJQUFJLFlBQVksUUFBUSxxQ0FBUixDQUFaOztBQUdILElBQUksZ0JBQWdCLFNBQVMsYUFBVCxHQUF5Qjs7O0FBR3pDLFFBQUksVUFBVSxFQUFWLENBSHFDOztBQVF6QyxRQUFJLFlBQVksSUFBSSxTQUFKLENBQWMsT0FBZCxDQUFaLENBUnFDO0FBU3pDLFdBQU8sU0FBUCxDQVR5QztDQUF6Qjs7QUFZcEIsT0FBTyxPQUFQLEdBQWlCLGFBQWpCOzs7Ozs7O0FDZkQsSUFBSSxTQUFTLFFBQVEsa0NBQVIsQ0FBVDs7QUFHSCxJQUFJLGFBQWEsU0FBUyxVQUFULEdBQXNCOztBQUduQyxRQUFJLGtCQUFrQixTQUFsQixlQUFrQixHQUFVO0FBQzVCLFlBQUksb0JBQW9CLEVBQUUsdUJBQUYsRUFBMkIsR0FBM0IsRUFBcEIsQ0FEd0I7QUFFNUIsZUFBTyxzQkFBc0IsV0FBdEIsR0FBb0MsaUJBQXBDLEdBQXdELFNBQXhELENBRnFCO0tBQVY7OztBQUhhLFFBVy9CLFVBQVU7QUFDVixnQkFBUSxpQkFBUjtBQUNBLFdBQUcsT0FBTyxFQUFFLHFCQUFGLEVBQXlCLEdBQXpCLEVBQVAsQ0FBSDtBQUNBLFdBQUcsT0FBTyxFQUFFLHFCQUFGLEVBQXlCLEdBQXpCLEVBQVAsQ0FBSDs7S0FIQSxDQVgrQjs7QUFtQm5DLFFBQUksU0FBUyxJQUFJLE1BQUosQ0FBVyxPQUFYLENBQVQsQ0FuQitCO0FBb0JuQyxXQUFPLE1BQVAsQ0FwQm1DO0NBQXRCOztBQXVCakIsT0FBTyxPQUFQLEdBQWlCLFVBQWpCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFCRCxJQUFJLGNBQWMsUUFBUSx3Q0FBUixDQUFkOztBQUdILElBQUksa0JBQWtCLFNBQVMsZUFBVCxHQUEyQjs7O0FBRzdDLFFBQUksVUFBVSxFQUFWLENBSHlDOztBQVE3QyxRQUFJLGNBQWMsSUFBSSxXQUFKLENBQWdCLE9BQWhCLENBQWQsQ0FSeUM7QUFTN0MsV0FBTyxXQUFQLENBVDZDO0NBQTNCOztBQVl0QixPQUFPLE9BQVAsR0FBaUIsZUFBakI7Ozs7Ozs7QUNmRCxJQUFJLFNBQVMsUUFBUSxrQ0FBUixDQUFUOztBQUdILElBQUksYUFBYSxTQUFTLFVBQVQsR0FBc0I7OztBQUduQyxRQUFJLFVBQVUsRUFBVixDQUgrQjs7QUFRbkMsUUFBSSxTQUFTLElBQUksTUFBSixDQUFXLE9BQVgsQ0FBVCxDQVIrQjtBQVNuQyxXQUFPLE9BQU8sTUFBUCxDQVQ0QjtDQUF0Qjs7QUFZakIsT0FBTyxPQUFQLEdBQWlCLFVBQWpCOzs7Ozs7O0FDZkQsSUFBSSxXQUFXLFFBQVEsb0NBQVIsQ0FBWDs7QUFHSCxJQUFJLGVBQWUsU0FBUyxZQUFULEdBQXdCOzs7QUFHdkMsUUFBSSxVQUFVLEVBQVYsQ0FIbUM7O0FBUXZDLFFBQUksV0FBVyxJQUFJLFFBQUosQ0FBYSxPQUFiLENBQVgsQ0FSbUM7QUFTdkMsV0FBTyxRQUFQLENBVHVDO0NBQXhCOztBQVluQixPQUFPLE9BQVAsR0FBaUIsWUFBakI7Ozs7Ozs7QUNmRCxJQUFJLFFBQVEsUUFBUSxpQ0FBUixDQUFSOztBQUdILElBQUksWUFBWSxTQUFTLFNBQVQsR0FBcUI7OztBQUdqQyxRQUFJLFVBQVUsRUFBVixDQUg2Qjs7QUFRakMsUUFBSSxRQUFRLElBQUksS0FBSixDQUFVLE9BQVYsQ0FBUixDQVI2QjtBQVNqQyxXQUFPLEtBQVAsQ0FUaUM7Q0FBckI7O0FBWWhCLE9BQU8sT0FBUCxHQUFpQixTQUFqQjs7Ozs7OztBQ2ZELElBQUksVUFBVSxRQUFRLG1DQUFSLENBQVY7O0FBR0gsSUFBSSxjQUFjLFNBQVMsV0FBVCxHQUF1Qjs7O0FBR3JDLFFBQUksVUFBVSxFQUFWLENBSGlDOztBQVFyQyxRQUFJLFVBQVUsSUFBSSxPQUFKLENBQVksT0FBWixDQUFWLENBUmlDO0FBU3JDLFdBQU8sT0FBUCxDQVRxQztDQUF2Qjs7QUFZbEIsT0FBTyxPQUFQLEdBQWlCLFdBQWpCOzs7Ozs7QUNoQkQsSUFBSSxnQkFBZ0IsUUFBUSxrQ0FBUixDQUFoQjs7QUFFSixJQUFJLFFBQVEsUUFBUSxrQ0FBUixDQUFSOztBQUdKLElBQUksWUFBWSxTQUFTLFNBQVQsR0FBcUI7OztBQUdqQyxRQUFJLFVBQVU7QUFDVixlQUFPO0FBQ0gsa0JBQU0sRUFBRSw4QkFBRixFQUFrQyxHQUFsQyxFQUFOO1NBREo7QUFHQSxzQkFBYyxjQUFjLHNCQUFkLENBQXFDLE9BQU8sRUFBRSx1Q0FBRixFQUEyQyxHQUEzQyxFQUFQLENBQXJDLENBQWQ7O0tBSkEsQ0FINkI7O0FBWWpDLFFBQUksUUFBUSxJQUFJLEtBQUosQ0FBVSxPQUFWLENBQVIsQ0FaNkI7QUFhakMsV0FBTyxLQUFQLENBYmlDO0NBQXJCOztBQWdCaEIsT0FBTyxPQUFQLEdBQWlCLFNBQWpCOzs7Ozs7QUNyQkEsSUFBSSxhQUFhLFFBQVEsd0JBQVIsQ0FBYjtBQUNKLElBQUksUUFBUSxRQUFRLGtDQUFSLENBQVI7QUFDSixJQUFJLGdCQUFnQixRQUFRLGtDQUFSLENBQWhCO0FBQ0osSUFBSSxjQUFjLFFBQVEseUJBQVIsQ0FBZDs7QUFHSixJQUFJLFlBQVksU0FBUyxTQUFULEdBQXFCOzs7QUFHakMsUUFBSSxVQUFVOztBQUdWLGFBQUssY0FBYyxTQUFkLENBQXdCLE9BQU8sRUFBRSx5QkFBRixFQUE2QixHQUE3QixFQUFQLENBQXhCLENBQUw7QUFDQSxhQUFLLGNBQWMsU0FBZCxDQUF3QixPQUFPLEVBQUUseUJBQUYsRUFBNkIsR0FBN0IsRUFBUCxDQUF4QixDQUFMO0FBQ0Esa0JBQVUsWUFBWSxnQkFBWixDQUE2QixFQUFFLGlDQUFGLENBQTdCLENBQVY7QUFDQSxzQkFBYyxjQUFjLHNCQUFkLENBQXFDLE9BQU8sRUFBRSx1Q0FBRixFQUEyQyxHQUEzQyxFQUFQLENBQXJDLENBQWQ7O0FBRUEsZUFBTztBQUNILGtCQUFNLEVBQUUsOEJBQUYsRUFBa0MsR0FBbEMsRUFBTjtBQUNBLG1CQUFPLEVBQUUsc0JBQUYsRUFBMEIsTUFBMUIsT0FBdUMsS0FBdkMsR0FBK0MsUUFBL0MsR0FBMEQsTUFBMUQ7QUFDUCxlQUFHLE9BQU8sRUFBRSxnQ0FBRixFQUFvQyxHQUFwQyxFQUFQLENBQUg7U0FISjs7S0FSQSxDQUg2Qjs7QUFxQmpDLFFBQUksUUFBUSxJQUFJLEtBQUosQ0FBVSxPQUFWLENBQVIsQ0FyQjZCO0FBc0JqQyxXQUFPLEtBQVAsQ0F0QmlDO0NBQXJCOztBQXlCaEIsT0FBTyxPQUFQLEdBQWlCLFNBQWpCOzs7Ozs7Ozs7Ozs7Ozs7O0FDaENBLE9BQU8sT0FBUCxHQUFpQixZQUFhOztBQUUxQixRQUFJLGtCQUFrQjs7QUFHbEIsK0JBQXVCLFNBQVMscUJBQVQsR0FBaUM7O0FBRXBELGdCQUFJLFdBQVcsU0FBUyxRQUFULENBQWtCLEdBQWxCLEVBQXVCLFNBQXZCLEVBQWtDO0FBQzdDLG9CQUFJLE1BQU0sT0FBTyxHQUFQLENBQU4sQ0FEeUM7QUFFN0Msb0JBQUksQ0FBQyxNQUFNLEdBQU4sQ0FBRCxFQUFhO0FBQ2IsMkJBQU8sY0FBYyxHQUFkLEdBQW9CLE1BQU0sRUFBTixHQUFXLE1BQU0sRUFBTixDQUR6QjtpQkFBakIsTUFFTztBQUNILDJCQUFPLEdBQVAsQ0FERztpQkFGUDthQUZXLENBRnFDOztBQVdwRCxjQUFFLGVBQUYsRUFBbUIsS0FBbkIsQ0FBeUIsVUFBVSxDQUFWLEVBQWE7QUFDbEMsb0JBQUksRUFBRSxPQUFGLEtBQWMsRUFBZCxFQUFrQjs7QUFDbEIsc0JBQUUsSUFBRixFQUFRLEdBQVIsQ0FBWSxTQUFTLEVBQUUsSUFBRixFQUFRLEdBQVIsRUFBVCxFQUF3QixHQUF4QixDQUFaLEVBRGtCO2lCQUF0QixNQUVPLElBQUksRUFBRSxPQUFGLEtBQWMsRUFBZCxFQUFrQjtBQUN6QixzQkFBRSxJQUFGLEVBQVEsR0FBUixDQUFZLFNBQVMsRUFBRSxJQUFGLEVBQVEsR0FBUixFQUFULEVBQXdCLEdBQXhCLENBQVosRUFEeUI7aUJBQXRCO2FBSGMsQ0FBekIsQ0FYb0Q7U0FBakM7O0tBSHZCLENBRnNCOztBQTRCMUIsb0JBQWdCLHFCQUFoQixHQTVCMEI7Q0FBWixFQUFsQjs7Ozs7QUNBQSxJQUFJLGFBQWEsUUFBUSx1QkFBUixDQUFiOzs7QUFHSixJQUFJLG1CQUFtQjs7O0FBR25CLHVCQUFtQixTQUFTLGlCQUFULEdBQTZCOztBQUU1QyxVQUFFLHFCQUFGLEVBQXlCLEtBQXpCLENBQStCLFlBQVk7O0FBRXZDLGNBQUUsOEJBQUYsRUFBa0MsV0FBbEMsQ0FBOEMsY0FBOUMsRUFGdUM7QUFHdkMsY0FBRSxJQUFGLEVBQVEsUUFBUixDQUFpQixjQUFqQjs7O0FBSHVDLGdCQU1uQyxhQUFhLE1BQU0sRUFBRSxJQUFGLEVBQVEsSUFBUixDQUFhLElBQWIsRUFBbUIsT0FBbkIsQ0FBMkIsS0FBM0IsRUFBa0MsU0FBbEMsQ0FBTixDQU5zQjtBQU92QyxjQUFFLGlDQUFGLEVBQXFDLFdBQXJDLENBQWlELGtCQUFqRCxFQVB1QztBQVF2QyxjQUFFLFVBQUYsRUFBYyxRQUFkLENBQXVCLGtCQUF2QixFQVJ1QztTQUFaLENBQS9CLENBRjRDO0tBQTdCOzs7QUFnQm5CLHlCQUFxQixTQUFTLG1CQUFULEdBQStCOztBQUVoRCxVQUFFLG9DQUFGLEVBQXdDLEtBQXhDLENBQThDLFlBQVk7O0FBRXRELGNBQUUsb0NBQUYsRUFBd0MsV0FBeEMsQ0FBb0QscUJBQXBELEVBRnNEO0FBR3RELGNBQUUsSUFBRixFQUFRLFFBQVIsQ0FBaUIscUJBQWpCLEVBSHNEO1NBQVosQ0FBOUMsQ0FGZ0Q7S0FBL0I7Ozs7QUFZckIsbUJBQWUsU0FBUyxhQUFULEdBQXlCOztBQUVwQyxVQUFFLFlBQUYsRUFBZ0IsS0FBaEIsQ0FBc0IsWUFBWTtBQUM5QixjQUFFLElBQUYsRUFBUSxXQUFSLENBQW9CLFNBQXBCLEVBRDhCO0FBRTlCLGNBQUUsUUFBRixFQUFZLEVBQUUsSUFBRixFQUFRLE9BQVIsQ0FBZ0IsS0FBaEIsQ0FBWixFQUFvQyxNQUFwQyxHQUY4QjtTQUFaLENBQXRCLENBRm9DO0tBQXpCOzs7O0FBV2Ysd0JBQW9CLFNBQVMsa0JBQVQsQ0FBNEIsaUJBQTVCLEVBQStDOztBQUUvRCxVQUFFLGtCQUFGLEVBQXNCLEtBQXRCLENBQTRCLFVBQVUsQ0FBVixFQUFhOztBQUVyQyxnQkFBSSxpQkFBaUIsRUFBRSxnQkFBRixDQUFqQixDQUZpQztBQUdyQyxjQUFFLElBQUYsRUFBUSxXQUFSLENBQW9CLFNBQXBCLEVBSHFDO0FBSXJDLGNBQUUsdUJBQUYsRUFBMkIsV0FBM0IsQ0FBdUMsR0FBdkMsRUFKcUM7QUFLckMsZ0JBQUksZUFBZSxJQUFmLE9BQTBCLFVBQTFCLEVBQXNDO0FBQ3RDLDJCQUFXLFNBQVgsQ0FBcUIsaUJBQXJCLEVBRHNDO0FBRXRDLCtCQUFlLElBQWYsQ0FBb0IsV0FBcEIsRUFGc0M7YUFBMUMsTUFHTztBQUNILCtCQUFlLElBQWYsQ0FBb0IsVUFBcEIsRUFERzthQUhQO1NBTHdCLENBQTVCLENBRitEO0tBQS9DOzs7QUFrQnBCLDBCQUFzQiw4QkFBVSxpQkFBVixFQUE2QjtBQUMvQyxVQUFFLG9CQUFGLEVBQXdCLEtBQXhCLENBQThCLFlBQVk7QUFDdEMsdUJBQVcsU0FBWCxDQUFxQixpQkFBckIsRUFEc0M7U0FBWixDQUE5QixDQUQrQztLQUE3Qjs7Q0E1RHRCOztBQXNFSixPQUFPLE9BQVAsR0FBaUIsZ0JBQWpCOzs7OztBQ3pFQSxJQUFJLGdCQUFnQixZQUFhOztBQUU3QixXQUFPLEVBQVAsQ0FBVSxNQUFWLENBQWlCO0FBQ2IsZ0JBQVEsZ0JBQVUsTUFBVixFQUFrQjs7QUFDdEIsZ0JBQUksVUFBVSxNQUFWLEtBQXFCLENBQXJCLEVBQXdCO0FBQ3hCLHVCQUFPLEVBQUUsSUFBRixFQUFRLElBQVIsQ0FBYSxPQUFiLENBQVAsQ0FEd0I7YUFBNUIsTUFFTzs7QUFFSCxrQkFBRSxJQUFGLEVBQVEsSUFBUixDQUFhLE9BQWIsRUFBc0IsTUFBdEIsRUFGRztBQUdILHVCQUFPLEVBQUUsSUFBRixDQUFQLENBSEc7YUFGUDtTQURJO0tBRFosRUFGNkI7Q0FBWixFQUFqQjs7QUFpQkosT0FBTyxPQUFQLEdBQWlCLGFBQWpCOzs7OztBQ2pCQSxJQUFJLGNBQWM7OztBQUlkLHNCQUFrQixTQUFTLGdCQUFULENBQTBCLElBQTFCLEVBQStCO0FBQzdDLGVBQU8sS0FBSyxFQUFMLENBQVEsVUFBUixDQUFQLENBRDZDO0tBQS9COzs7QUFLbEIseUJBQXFCLDZCQUFVLFNBQVYsRUFBcUI7QUFDdEMsWUFBSSxNQUFNLEVBQU4sQ0FEa0M7QUFFdEMsVUFBRSxNQUFNLFNBQU4sQ0FBRixDQUFtQixJQUFuQixDQUNJLFlBQVk7QUFDUixnQkFBSSxJQUFKLENBQVMsT0FBTyxFQUFFLElBQUYsRUFBUSxHQUFSLEVBQVAsQ0FBVCxFQURRO1NBQVosQ0FESixDQUZzQztBQU90QyxlQUFPLEdBQVAsQ0FQc0M7S0FBckI7O0NBVHJCOztBQXFCSixPQUFPLE9BQVAsR0FBaUIsV0FBakI7Ozs7OztBQ3BCQSxJQUFJLGFBQWE7O0FBRWIsdUJBQW1CLDJCQUFVLEdBQVYsRUFBZTtBQUM5QixlQUFPLFFBQVEsQ0FBUixJQUFhLE1BQU0sR0FBTixDQUFiLEdBQTBCLFNBQTFCLEdBQXNDLEdBQXRDLENBRHVCO0tBQWY7OztBQUtuQixTQUFLLFNBQVMsR0FBVCxDQUFhLENBQWIsRUFBZ0I7QUFDakIsZUFBTyxRQUFRLEdBQVIsQ0FBWSxDQUFaLENBQVAsQ0FEaUI7S0FBaEI7OztBQUtMLG1CQUFlLFNBQVMsYUFBVCxDQUF1QixHQUF2QixFQUE0QjtBQUN2QyxlQUFPLEtBQUssU0FBTCxDQUFlLEdBQWYsRUFBb0IsVUFBVSxHQUFWLEVBQWUsS0FBZixFQUFzQjtBQUM3QyxnQkFBSSxPQUFPLEtBQVAsS0FBaUIsVUFBakIsRUFBNkI7QUFDN0IsdUJBQU8sTUFBTSxRQUFOLEVBQVAsQ0FENkI7YUFBakMsTUFFTztBQUNILHVCQUFPLEtBQVAsQ0FERzthQUZQO1NBRHVCLENBQXBCLENBTUosT0FOSSxDQU1JLE1BTkosRUFNWSxFQU5aLENBQVAsQ0FEdUM7S0FBNUI7O0FBV2YsZUFBVyxTQUFTLFNBQVQsQ0FBbUIsaUJBQW5CLEVBQXNDOzs7QUFHN0MsWUFBSSwwQkFBMEIsV0FBVyxhQUFYLENBQXlCLGlCQUF6QixDQUExQixDQUh5QztBQUk3QyxVQUFFLG9CQUFGLEVBQXdCLElBQXhCLENBQTZCLHVCQUE3QixFQUFzRCxJQUF0RCxDQUEyRCxVQUFVLENBQVYsRUFBYSxLQUFiLEVBQW9CO0FBQzNFLGlCQUFLLGNBQUwsQ0FBb0IsS0FBcEIsRUFEMkU7U0FBcEIsQ0FBM0QsQ0FKNkM7S0FBdEM7O0NBdkJYOztBQXFDSixPQUFPLE9BQVAsR0FBaUIsVUFBakIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuXG4gICAgLy91dGlsc1xuICAgIHZhciBqcV9leHRlbnNpb25zID0gcmVxdWlyZShcIi4vdXRpbHMvanFfZXh0ZW5zaW9ucy5qc1wiKTtcbiAgICB2YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuL3V0aWxzL3V0aWxzX21haW5cIik7XG5cblxuXG4gICAgLy9pbml0aWFsIGFsbCBjaGFydCBvcHRpb25zIGluaXRcbiAgICB2YXIgYWxsQ2hhcnRPcHRpb25zSW5pdCA9IHJlcXVpcmUoXCIuL2luaXRpYWxpemVycy9hbGxfY2hhcnRfb3B0aW9uc19pbml0LmpzXCIpO1xuICAgIHZhciBhbGxfY2hhcnRfb3B0aW9ucyA9IGFsbENoYXJ0T3B0aW9uc0luaXQoKTtcblxuICAgIC8vZHJhdyBjaGFydFxuICAgIHZhciBkcmF3X2NoYXJ0ID0gcmVxdWlyZShcIi4vZHJhd19jaGFydC5qc1wiKTtcbiAgICB2YXIgY2hhcnQgPSBkcmF3X2NoYXJ0LmluaXQoYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG4gICAgLy93cml0ZSBjb2RlIHRvIFwiI2NoYXJ0X291dHB1dF9jb2RlXCIgZnVuY3Rpb25cbiAgICB1dGlsc19tYWluLndyaXRlQ29kZShhbGxfY2hhcnRfb3B0aW9ucyk7XG5cbiAgICAvL3BhZ2UgaW5pdCAobmF2aWdhdGlvbiBhbmQga2V5Ym9hcmQgZW50cmllcylcbiAgICB2YXIgbmF2aWdhdGlvbl9zZXR1cCA9IHJlcXVpcmUoXCIuL25hdmlnYXRpb25fc2V0dXAuanNcIik7XG4gICAgbmF2aWdhdGlvbl9zZXR1cC5zaWRlTmF2VGFic0NoYW5nZSgpO1xuICAgIG5hdmlnYXRpb25fc2V0dXAuY2hhcnRUeXBlSWNvbkNoYW5nZSgpO1xuICAgIG5hdmlnYXRpb25fc2V0dXAuaGVscEljb25DbGljaygpO1xuICAgIG5hdmlnYXRpb25fc2V0dXAuZ2V0Q29kZUJ1dHRvbkNsaWNrKGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICBuYXZpZ2F0aW9uX3NldHVwLmNoYXJ0T3V0cHV0Q29kZUZvY3VzKGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICBcbiAgICB2YXIga2V5Ym9hcmRfaW5wdXRzID0gcmVxdWlyZShcIi4va2V5Ym9hcmRfaW5wdXRzXCIpO1xuXG5cbiAgICAvL2FsbCBmb3JtIHVwZGF0ZXMgLSB3aGVuIHVwZGF0ZXMgYXJlIG1hZGUsIHVwZGF0ZSB0aGUgY2hhcnRcbiAgICB2YXIgYWxsRm9ybVVwZGF0ZXMgPSByZXF1aXJlKFwiLi9mb3JtX3VwZGF0ZXMvYWxsX2Zvcm1fdXBkYXRlcy5qc1wiKTtcbiAgICBhbGxGb3JtVXBkYXRlcyhjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG5cbn0pOyIsIi8qKiBBbGwgQ2hhcnQgb3B0aW9ucyBjb25zdHJ1Y3Rvci4gY29tYmluZXMgYWxsIG90aGVyIG9wdGlvbnMgaW50byBtYWluIG9wdGlvbnMgb2JqZWN0LiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyAqL1xudmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNfbWFpbi5qc1wiKTtcblxudmFyIEFsbENoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uIChvKSB7XG4gICAgdGhpcy5jaGFydCA9IG8uY2hhcnQ7XG4gICAgdGhpcy5jb2xvcnMgPSBvLmNvbG9ycztcbiAgICB0aGlzLmNyZWRpdHMgPSBvLmNyZWRpdHM7XG4gICAgdGhpcy5leHBvcnRpbmcgPSBvLmV4cG9ydGluZztcbiAgICB0aGlzLmxlZ2VuZCA9IG8ubGVnZW5kO1xuICAgIHRoaXMucGxvdF9vcHRpb25zID0gby5wbG90X29wdGlvbnM7XG4gICAgdGhpcy5zZXJpZXMgPSBvLnNlcmllcztcbiAgICB0aGlzLnN1YnRpdGxlID0gby5zdWJ0aXRsZTtcbiAgICB0aGlzLnRpdGxlID0gby50aXRsZTtcbiAgICB0aGlzLnRvb2x0aXAgPSBvLnRvb2x0aXA7XG4gICAgdGhpcy54QXhpcyA9IG8ueEF4aXM7XG4gICAgdGhpcy55QXhpcyA9IG8ueUF4aXM7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBbGxDaGFydE9wdGlvbnM7IiwiLyoqIENoYXJ0IG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI2NoYXJ0ICovXG52YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG5cbnZhciBDaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5yZW5kZXJUbyA9IG8ucmVuZGVyVG8gfHwgXCJjaGFydF9kaXNwbGF5X2FyZWFcIjtcbiAgICB0aGlzLm1hcmdpbiA9IFtvLm1hcmdpblswXSB8fCA5MCwgby5tYXJnaW5bMV0gfHwgNDAsIG8ubWFyZ2luWzJdIHx8IDgwLCBvLm1hcmdpblszXSB8fCA3NV07IC8vW3RvcCxyaWdodCxib3R0b20sbGVmdF1cbiAgICB0aGlzLmJvcmRlcldpZHRoID0gby5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIHRoaXMucGxvdEJvcmRlckNvbG9yID0gby5wbG90Qm9yZGVyQ29sb3IgfHwgJyNmZmYnO1xuICAgIHRoaXMucGxvdEJvcmRlcldpZHRoID0gby5wbG90Qm9yZGVyV2lkdGggfHwgMDtcbiAgICB0aGlzLnR5cGUgPSBvLnR5cGUgfHwgJ2xpbmUnO1xuICAgIHRoaXMuem9vbVR5cGUgPSBvLnpvb21UeXBlIHx8IG51bGw7XG4gICAgdGhpcy5hbGlnblRpY2tzID0gby5hbGlnblRpY2tzIHx8IGZhbHNlO1xuICAgIHRoaXMuaW52ZXJ0ZWQgPSBvLmludmVydGVkIHx8IGZhbHNlO1xuICAgIHRoaXMuaWdub3JlSGlkZGVuU2VyaWVzID0gby5pZ25vcmVIaWRkZW5TZXJpZXMgfHwgdHJ1ZTsgLy9mYWxzZSBmb3IgYnViYmxlIGNoYXJ0cyBzbyBidWJibGVzIHdvbid0IHJlc2l6ZVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhcnRPcHRpb25zOyIsIi8qKiBDb2xvcnMgb3B0aW9ucyBjb25zdHJ1Y3Rvci4gSW5mbyBhdCBodHRwOi8vYXBpLmhpZ2hjaGFydHMuY29tL2hpZ2hjaGFydHMjY29sb3JzICovXG52YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG52YXIgQ29sb3JzID0gZnVuY3Rpb24gKG8pIHtcblxuICAgIHRoaXMuY29sb3JzID0gby5jb2xvcnMgfHwgWycjN2NiNWVjJywgJyM0MzQzNDgnLCAnIzkwZWQ3ZCcsICcjZjdhMzVjJywgJyM4MDg1ZTknLFxuICAgJyNmMTVjODAnLCAnI2U0ZDM1NCcsICcjMmI5MDhmJywgJyNmNDViNWInLCAnIzkxZThlMScsICcjMmY3ZWQ4JywgJyMwZDIzM2EnLCAnIzhiYmMyMScsICcjOTEwMDAwJywgJyMxYWFkY2UnLFxuICAgJyM0OTI5NzAnLCAnI2YyOGY0MycsICcjNzdhMWU1JywgJyNjNDI1MjUnLCAnI2E2Yzk2YSddO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9yczsiLCIvKiogQ3JlZGl0cyBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNjcmVkaXRzICovXG52YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG52YXIgQ3JlZGl0cyA9IGZ1bmN0aW9uIChvKSB7XG4gICAgdGhpcy5ocmVmID0gXCJodHRwOi8vd3d3LmJscy5nb3ZcIjtcblxuICAgIHRoaXMucG9zaXRpb24gPSB7XG4gICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgIHg6IDEwLFxuICAgICAgICB5OiBvLnBvc2l0aW9uID8gby5wb3NpdGlvbi55IHx8IC0yMCA6IC0yMFxuICAgIH07XG5cbiAgICB0aGlzLnN0eWxlID0ge1xuICAgICAgICBjdXJzb3I6IFwiZGVmYXVsdFwiLFxuICAgICAgICBjb2xvcjogXCIjMkMyQzJDXCJcbiAgICB9O1xuXG4gICAgdGhpcy50ZXh0ID0gby50ZXh0IHx8IFwiXCI7XG4gICAgdGhpcy51c2VIVE1MID0gdHJ1ZTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENyZWRpdHM7IiwiLyoqIEV4cG9ydGluZyBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNleHBvcnRpbmcgKi9cbnZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG5cblxudmFyIEV4cG9ydGluZyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLmJ1dHRvbnMgPSB7XG4gICAgICAgIGNvbnRleHRCdXR0b246IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJyxcbiAgICAgICAgICAgIHg6IC0xMFxuICAgICAgICB9XG4gICAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEV4cG9ydGluZzsiLCIvKiogbGVnZW5kIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI2xlZ2VuZCAqL1xudmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNfbWFpbi5qc1wiKTtcblxudmFyIExlZ2VuZCA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLmFsaWduID0gby5hbGlnbiB8fCAnbGVmdCc7XG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBvLmJhY2tncm91bmRDb2xvciB8fCAnbm9uZSc7XG4gICAgdGhpcy5ib3JkZXJDb2xvciA9IG8uYm9yZGVyQ29sb3IgfHwgJ25vbmUnO1xuICAgIHRoaXMuYm9yZGVyV2lkdGggPSBvLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgdGhpcy5lbmFibGVkID0gby5lbmFibGVkIHx8IHRydWU7XG4gICAgdGhpcy5mbG9hdGluZyA9IG8uZmxvYXRpbmcgfHwgZmFsc2U7XG4gICAgdGhpcy5pdGVtRGlzdGFuY2UgPSBvLml0ZW1EaXN0YW5jZSB8fCAzMDtcbiAgICB0aGlzLmxheW91dCA9IG8ubGF5b3V0IHx8ICdob3Jpem9udGFsJztcbiAgICB0aGlzLnJldmVyc2VkID0gby5yZXZlcnNlZCB8fCBmYWxzZTtcbiAgICB0aGlzLnNoYWRvdyA9IG8uc2hhZG93IHx8IGZhbHNlO1xuICAgIHRoaXMudXNlSFRNTCA9IG8udXNlSFRNTCB8fCBmYWxzZTtcbiAgICB0aGlzLnZlcnRpY2FsQWxpZ24gPSBvLnZlcnRpY2FsQWxpZ24gfHwgJ3RvcCc7XG4gICAgdGhpcy53aWR0aCA9IG8ud2lkdGg7XG4gICAgdGhpcy54ID0gby54IHx8IDA7XG4gICAgdGhpcy55ID0gby55IHx8IDMwO1xuXG4gICAgdGhpcy5pdGVtU3R5bGUgPSB7XG4gICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgY29sb3I6ICcjMDAwJ1xuICAgIH07XG4gICAgdGhpcy5pdGVtSGlkZGVuU3R5bGUgPSB7XG4gICAgICAgIGNvbG9yOiAnZ3JheSdcbiAgICB9O1xuICAgIHRoaXMuaXRlbUhvdmVyU3R5bGUgPSB7XG4gICAgICAgIGN1cnNvcjogby5pdGVtSG92ZXJTdHlsZSA/IG8uaXRlbUhvdmVyU3R5bGUuY3Vyc29yIHx8IFwicG9pbnRlclwiIDogXCJwb2ludGVyXCJcbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZWdlbmQ7IiwiLyoqIFBsb3RPcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNwbG90T3B0aW9ucyovXG52YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG5cbnZhciBQbG90T3B0aW9ucyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICAvL2ZvciBhbGwgY2hhcnQgdHlwZXNcbiAgICBpZiAoby5zZXJpZXMpIHtcbiAgICAgICAgdGhpcy5zZXJpZXMgPSB7XG4gICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICBsZWdlbmRJdGVtQ2xpY2s6IG8uc2VyaWVzLmV2ZW50cy5sZWdlbmRJdGVtQ2xpY2tcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogby5zZXJpZXMuZGF0YUxhYmVscy5lbmFibGVkIHx8IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9pbnRQbGFjZW1lbnQ6IG8uc2VyaWVzLnBvaW50UGxhY2VtZW50IHx8IG51bGxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy9qdXN0IGZvciBjb2x1bW4gYW5kIGJhciBjaGFydHNcbiAgICBpZiAoby5jb2x1bW4gfHwgby5iYXIpIHtcbiAgICAgICAgdGhpcy5zZXJpZXMuc3RhY2tpbmcgPSBvLnNlcmllcy5zdGFja2luZyB8fCBudWxsO1xuICAgICAgICB0aGlzLnNlcmllcy5wb2ludFBhZGRpbmcgPSBvLnNlcmllcy5wb2ludFBhZGRpbmcgfHwgMC4xOyAvLzAgaXMgdGlnaHQsIDEgaXMgbG9vc2VcbiAgICAgICAgdGhpcy5zZXJpZXMuZ3JvdXBQYWRkaW5nID0gby5zZXJpZXMuZ3JvdXBQYWRkaW5nIHx8IDAuMjtcbiAgICAgICAgdGhpcy5zZXJpZXMubWluUG9pbnRMZW5ndGggPSBvLnNlcmllcy5taW5Qb2ludExlbmd0aCB8fCAyO1xuICAgIH1cblxuICAgIC8vanVzdCBmb3IgYnViYmxlIGNoYXJ0c1xuICAgIGlmIChvLmJ1YmJsZSkge1xuICAgICAgICB0aGlzLmJ1YmJsZSA9IHtcbiAgICAgICAgICAgIG1heFNpemU6IG8uYnViYmxlLm1heFNpemUgfHwgNTAsXG4gICAgICAgICAgICBzaXplQnk6IG8uYnViYmxlLnNpemVCeSB8fCAnd2lkdGgnIC8vaW5zdGVhZCBvZiAnYXJlYScsIHNlZW1zIG1vcmUgYWNjdXJhdGVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvL2p1c3QgZm9yIGxpbmUgY2hhcnRzXG4gICAgaWYgKG8ubGluZSkge1xuICAgICAgICB0aGlzLmxpbmUgPSB7XG4gICAgICAgICAgICBsaW5lV2lkdGg6IG8ubGluZS5saW5lV2lkdGggfHwgMS41LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBvLmxpbmUuaG92ZXIubGluZVdpZHRoIHx8IDRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogby5saW5lLm1hcmtlci5lbmFibGVkIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogby5saW5lLm1hcmtlci5ob3Zlci5lbmFibGVkIHx8IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IG8ubGluZS5tYXJrZXIuaG92ZXIucmFkaXVzIHx8IDVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBsb3RPcHRpb25zOyIsIi8qKiBzZXJpZXMgKGFuIGFycmF5IG9mIG9ianMpIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3NlcmllcyAqL1xudmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNfbWFpbi5qc1wiKTtcblxudmFyIFNlcmllcyA9IGZ1bmN0aW9uIChvKSB7XG5cbiAgICB0aGlzLnNlcmllcyA9IG8uc2VyaWVzIHx8IFt7XG4gICAgICAgICAgICBuYW1lOiBcIlNlcmllcyAxXCIsXG4gICAgICAgICAgICBkYXRhOiBbMTAwMCwgMjAwMCwgMzAwMCwgNDAwMF1cbiAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlNlcmllcyAyXCIsXG4gICAgICAgICAgICBkYXRhOiBbMjAwMCwgNDAwMCwgNjAwMCwgODAwMF1cbiAgICB9XTtcblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gU2VyaWVzOyIsIi8qKiBzdWJ0aXRsZSBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyNzdWJ0aXRsZSAqL1xudmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNfbWFpbi5qc1wiKTtcblxudmFyIFN1YnRpdGxlID0gZnVuY3Rpb24gKG8pIHtcbiAgICBcbiAgICB0aGlzLnRleHQgPSBvLnRleHQgfHwgXCJcIjtcbiAgICB0aGlzLmFsaWduID0gby5hbGlnbiB8fCBcImxlZnRcIjtcbiAgICBcbiAgICB0aGlzLnN0eWxlID0ge1xuICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICBmb250RmFtaWx5OiAnc2Fucy1zZXJpZicsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgfTtcblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gU3VidGl0bGU7IiwiLyoqIHRpdGxlIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3RpdGxlICovXG52YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG52YXIgVGl0bGUgPSBmdW5jdGlvbiAobykge1xuICAgIFxuICAgIHRoaXMudGV4dCA9IG8udGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuYWxpZ24gPSBvLmFsaWduIHx8IFwibGVmdFwiO1xuICAgIFxuICAgIHRoaXMuc3R5bGUgPSB7XG4gICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdzYW5zLXNlcmlmJyxcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnXG4gICAgfTtcblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gVGl0bGU7XG5cbiIsIi8qKiB0b29sdGlwIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3Rvb2x0aXAgKi9cbnZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG5cbnZhciBUb29sdGlwID0gZnVuY3Rpb24gKG8pIHtcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICcjRkVGRkVGJztcbiAgICB0aGlzLmNyb3NzaGFpcnMgPSBvLmNyb3NzaGFpcnMgfHwgW2ZhbHNlLCBmYWxzZV07XG4gICAgdGhpcy5mb3JtYXR0ZXIgPSBvLmZvcm1hdHRlcjtcbiAgICB0aGlzLnNoYXJlZCA9IG8uc2hhcmVkIHx8IGZhbHNlO1xuICAgIFxuICAgIHRoaXMuc3R5bGUgPSB7XG4gICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJ1xuICAgIH07XG4gICAgXG4gICAgdGhpcy51c2VIVE1MID0gdHJ1ZTtcbiAgICB0aGlzLnZhbHVlRGVjaW1hbHMgPSBvLnZhbHVlRGVjaW1hbHM7XG4gICAgdGhpcy52YWx1ZVByZWZpeCA9IG8udmFsdWVQcmVmaXggfHwgXCJcIjtcbiAgICB0aGlzLnZhbHVlU3VmZml4ID0gby52YWx1ZVN1ZmZpeCB8fCBcIlwiO1xuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBUb29sdGlwOyIsIi8qKiB4QXhpcyBvcHRpb25zIGNvbnN0cnVjdG9yLiBJbmZvIGF0IGh0dHA6Ly9hcGkuaGlnaGNoYXJ0cy5jb20vaGlnaGNoYXJ0cyN4QXhpcyAqL1xudmFyIHV0aWxzX21haW4gPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNfbWFpbi5qc1wiKTtcblxudmFyIFhBeGlzID0gZnVuY3Rpb24gKG8pIHtcblxuICAgIHRoaXMuY2F0ZWdvcmllcyA9IG8uY2F0ZWdvcmllcztcbiAgICB0aGlzLmdyaWRMaW5lQ29sb3IgPSBvLmdyaWRMaW5lQ29sb3IgfHwgJyNjMGMwYzAnO1xuICAgIHRoaXMuZ3JpZExpbmVXaWR0aCA9IG8uZ3JpZExpbmVXaWR0aCB8fCAwO1xuICAgIHRoaXMuZ3JpZExpbmVEYXNoU3R5bGUgPSBvLmdyaWRMaW5lRGFzaFN0eWxlIHx8ICdEb3QnO1xuICAgIFxuICAgIHRoaXMubGFiZWxzID0ge1xuICAgICAgICBmb3JtYXR0ZXI6IG8ubGFiZWxzID8gby5sYWJlbHMuZm9ybWF0dGVyIHx8IHVuZGVmaW5lZCA6IHVuZGVmaW5lZCxcbiAgICAgICAgcm90YXRpb246IG8ubGFiZWxzID8gby5sYWJlbHMucm90YXRpb24gfHwgMCA6IDAsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0NhbGlicmksIFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcbiAgICAgICAgfVxuXG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmxpbmVXaWR0aCA9IG8ubGluZVdpZHRoIHx8IDEuMjtcbiAgICB0aGlzLmxpbmVDb2xvciA9IG8ubGluZUNvbG9yIHx8ICdncmF5JztcbiAgICB0aGlzLnBsb3RCYW5kcyA9IG8ucGxvdEJhbmRzIHx8IFtdO1xuICAgIHRoaXMudGlja0ludGVydmFsID0gby50aWNrSW50ZXJ2YWwgfHwgbnVsbDtcbiAgICB0aGlzLnRpY2ttYXJrUGxhY2VtZW50ID0gby50aWNrbWFya1BsYWNlbWVudCB8fCAnb24nO1xuICAgIHRoaXMudGlja1Bvc2l0aW9uID0gby50aWNrUG9zaXRpb24gfHwgJ291dHNpZGUnO1xuICAgIHRoaXMudGlja0NvbG9yID0gby50aWNrQ29sb3IgfHwgJyNDMEQwRTAnO1xuXG4gICAgdGhpcy50aXRsZSA9IHtcbiAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgdGV4dDogby50aXRsZSA/IG8udGl0bGUudGV4dCB8fCAnJyA6ICcnLFxuICAgICAgICBtYXJnaW46IG8udGl0bGUgPyBvLnRpdGxlLm1hcmdpbiB8fCA2IDogJycsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0NhbGlicmksIFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTNweCdcbiAgICAgICAgfVxuICAgIH07XG5cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gWEF4aXM7IiwiLyoqIHlBeGlzIG9wdGlvbnMgY29uc3RydWN0b3IuIEluZm8gYXQgaHR0cDovL2FwaS5oaWdoY2hhcnRzLmNvbS9oaWdoY2hhcnRzI3lBeGlzICovXG52YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc19tYWluLmpzXCIpO1xuXG52YXIgeUF4aXMgPSBmdW5jdGlvbiAobykge1xuXG4gICAgdGhpcy5ncmlkTGluZUNvbG9yID0gby5ncmlkTGluZUNvbG9yIHx8ICcjYzBjMGMwJztcbiAgICB0aGlzLmdyaWRMaW5lV2lkdGggPSBvLmdyaWRMaW5lV2lkdGggfHwgMTtcbiAgICB0aGlzLmdyaWRMaW5lRGFzaFN0eWxlID0gby5ncmlkTGluZURhc2hTdHlsZSB8fCAnRG90JztcblxuICAgIHRoaXMubGFiZWxzID0ge1xuICAgICAgICBmb3JtYXR0ZXI6IG8ubGFiZWxzID8gby5sYWJlbHMuZm9ybWF0dGVyIDogdW5kZWZpbmVkLFxuICAgICAgICByb3RhdGlvbjogby5sYWJlbHMgPyBvLmxhYmVscy5yb3RhdGlvbiB8fCAwIDogMCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgICAgICBmb250RmFtaWx5OiAnQ2FsaWJyaSwgVmVyZGFuYSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgdGhpcy5saW5lQ29sb3IgPSBvLmxpbmVDb2xvciB8fCAnZ3JheSc7XG4gICAgdGhpcy5saW5lV2lkdGggPSBvLmxpbmVXaWR0aCB8fCAxO1xuICAgIHRoaXMubWF4ID0gby5tYXggfHwgbnVsbDtcbiAgICB0aGlzLm1pbiA9IG8ubWluIHx8IG51bGw7XG4gICAgdGhpcy5vcHBvc2l0ZSA9IG8ub3Bwb3NpdGUgfHwgZmFsc2U7XG4gICAgdGhpcy5wbG90QmFuZHMgPSBvLnBsb3RCYW5kcyB8fCBbXTtcblxuICAgIHRoaXMucGxvdExpbmVzID0gby5wbG90TGluZXMgfHwgW3tcbiAgICAgICAgXCJ2YWx1ZVwiOiAwLFxuICAgICAgICBcImNvbG9yXCI6IFwiI2MwYzBjMFwiLFxuICAgICAgICBcImRhc2hTdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICAgIFwid2lkdGhcIjogMVxuICAgIH1dO1xuXG4gICAgdGhpcy50aWNrSW50ZXJ2YWwgPSBvLnRpY2tJbnRlcnZhbCB8fCBudWxsO1xuICAgIHRoaXMudGlja21hcmtQbGFjZW1lbnQgPSBvLnRpY2ttYXJrUGxhY2VtZW50IHx8ICdvbic7XG4gICAgdGhpcy50aWNrUG9zaXRpb24gPSBvLnRpY2tQb3NpdGlvbiB8fCAnb3V0c2lkZSc7XG4gICAgdGhpcy50aWNrQ29sb3IgPSBvLnRpY2tDb2xvciB8fCAnI0MwRDBFMCc7XG4gICAgdGhpcy50aWNrV2lkdGggPSBvLnRpY2tXaWR0aCB8fCAxO1xuXG4gICAgdGhpcy50aXRsZSA9IHtcbiAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgdGV4dDogby50aXRsZSA/IG8udGl0bGUudGV4dCB8fCAnJyA6ICcnLFxuICAgICAgICBtYXJnaW46IG8udGl0bGUgPyBvLnRpdGxlLm1hcmdpbiB8fCA2IDogNixcbiAgICAgICAgYWxpZ246IG8udGl0bGUgPyBvLnRpdGxlLmFsaWduIHx8ICdtaWRkbGUnIDogJ21pZGRsZScsXG4gICAgICAgIG9mZnNldDogMjAsXG4gICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICB4OiBvLnRpdGxlID8gby50aXRsZS54IHx8IDM1IDogMzUsXG4gICAgICAgIHk6IC0xNSxcbiAgICAgICAgXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0NhbGlicmksIFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTNweCdcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnR5cGUgPSBvLnR5cGUgfHwgJ2xpbmVhcic7XG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHlBeGlzOyIsIi8qKiB0YWtlcyBhbGxfY2hhcnRfb3B0aW9ucyBhbmQgcHJpbnRzIGEgY2hhcnQgdG8gdGhlIHNjcmVlbiAqL1xuXG52YXIgZHJhd19jaGFydCA9IHtcbiAgICBcbiAgICBpbml0OiBmdW5jdGlvbiAoYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEhpZ2hjaGFydHMuQ2hhcnQoYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIGNoYXJ0O1xuICAgIH0sXG4gICAgXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZHJhd19jaGFydDsiLCIvKiogbGlzdGVucyBmb3IgYW55IGZvcm0gdXBkYXRlcyBhbmQgY2FsbHMgYXBwcm9wcmlhdGUgZnVuY3Rpb24gKi9cbnZhciB1cGRhdGVfdGVtcGxhdGUgPSByZXF1aXJlKFwiLi91cGRhdGVfdGVtcGxhdGUuanNcIik7XG52YXIgdXBkYXRlQ2hhcnRUeXBlID0gcmVxdWlyZShcIi4vdXBkYXRlX2NoYXJ0X3R5cGUuanNcIik7XG52YXIgdXRpbHNfZm9ybXMgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNfZm9ybXNcIik7XG52YXIgdXBkYXRlX2xlZ2VuZCA9IHJlcXVpcmUoXCIuL3VwZGF0ZV9sZWdlbmQuanNcIik7XG52YXIgdXBkYXRlX3hfYXhpcyA9IHJlcXVpcmUoXCIuL3VwZGF0ZV94X2F4aXMuanNcIik7XG52YXIgdXBkYXRlX3lfYXhpcyA9IHJlcXVpcmUoXCIuL3VwZGF0ZV95X2F4aXMuanNcIik7XG5cbnZhciBhbGxGb3JtVXBkYXRlcyA9IGZ1bmN0aW9uIChjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuXG5cbiAgICAvKiogVEVNUExBVEUgQ0hBTkdFUyAqL1xuXG4gICAgLy9jaGFydCB3aWR0aFxuICAgICQoXCIjY2hhcnRfd2lkdGhfdGV4dGlucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlX3RlbXBsYXRlLnJlc2l6ZSgkKHRoaXMpLnZhbCgpLCBcIndpZHRoXCIsIGNoYXJ0KTtcbiAgICB9KTtcblxuICAgIC8vY2hhcnQgaGVpZ2h0XG4gICAgJChcIiNjaGFydF9oZWlnaHRfdGV4dGlucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlX3RlbXBsYXRlLnJlc2l6ZSgkKHRoaXMpLnZhbCgpLCBcImhlaWdodFwiLCBjaGFydCk7XG4gICAgfSk7XG5cbiAgICAvL2lubmVyIGNoYXJ0IG1hcmdpbnNcbiAgICAkKFwiLm1hcmdpbl9pbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIG1hcmdpbnNfYXJyID0gdXRpbHNfZm9ybXMuZ2V0Q2xhc3NWYWx1ZXNBcnJheShcIm1hcmdpbl9pbnB1dFwiKTtcblxuICAgICAgICB1cGRhdGVfdGVtcGxhdGUubWFyZ2luKG1hcmdpbnNfYXJyLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuXG4gICAgfSk7XG5cbiAgICAvKiogQ0hBUlQgVFlQRSBDSEFOR0VTICovXG5cbiAgICAvL2NoYXJ0IHR5cGUgY2hhbmdlZFxuICAgICQuZWFjaChbJ2xpbmUnLCAnYmFyJywgJ2NvbHVtbicsICdidWJibGUnLCAnc2NhdHRlcicsIFwiZHJpbGxkb3duXCJdLCBmdW5jdGlvbiAoaSwgdHlwZSkge1xuICAgICAgICAkKCcjY2hhcnRfdHlwZV8nICsgdHlwZSkuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdXBkYXRlQ2hhcnRUeXBlKGksIHR5cGUsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucylcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxuICAgIC8vbGVnZW5kIGxheW91dCBjaGFuZ2VkXG4gICAgJChcIiNsZWdlbmRfbGF5b3V0X3NlbGVjdFwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVfbGVnZW5kLnVwZGF0ZUxheW91dCgkKHRoaXMpLnZhbCgpLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLyoqIExFR0VORCBDSEFOR0VTICovXG5cbiAgICAvL2xlZ2VuZCByZXZlcnNlIGNlY2tib3ggY2hhbmdlZFxuICAgICQoXCIjbGVnZW5kX3JldmVyc2VfbGF5b3V0X2NoZWNrYm94XCIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWwgPSB1dGlsc19mb3Jtcy5nZXRDaGVja0JveFZhbHVlKCQodGhpcykpO1xuICAgICAgICB1cGRhdGVfbGVnZW5kLnVwZGF0ZUlzUmV2ZXJzZWQodmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy9sZWdlbmQgWCBvciBZIHBsYWNlbWVudCB2YWx1ZXMgY2hhbmdlZFxuICAgICQoXCIjbGVnZW5kX3BsYWNlbWVudF94LCAjbGVnZW5kX3BsYWNlbWVudF95XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld1ggPSBOdW1iZXIoJChcIiNsZWdlbmRfcGxhY2VtZW50X3hcIikudmFsKCkpO1xuICAgICAgICB2YXIgbmV3WSA9IE51bWJlcigkKFwiI2xlZ2VuZF9wbGFjZW1lbnRfeVwiKS52YWwoKSk7XG5cbiAgICAgICAgdXBkYXRlX2xlZ2VuZC51cGRhdGVYWXBvc2l0aW9ucyhuZXdYLCBuZXdZLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLyoqIFgtQVhJUyBDSEFOR0VTICovXG5cbiAgICAvL3gtYXhpcyB0aXRsZSB0ZXh0YXJlYSBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF94X2F4aXNfdGl0bGVfdGV4dGFyZWFcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3VGl0bGUgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICB1cGRhdGVfeF9heGlzLnVwZGF0ZVRpdGxlKG5ld1RpdGxlLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy94LWF4aXMgdGlja21hcmsgaW50ZXJ2YWwgaW5wdXQgY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeF9heGlzX3RpY2ttYXJrX2ludGVydmFsX2lucHV0XCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld0ludGVydmFsID0gTnVtYmVyKCQodGhpcykudmFsKCkpO1xuICAgICAgICB1cGRhdGVfeF9heGlzLnVwZGF0ZVRpY2ttYXJrSW50ZXJ2YWwobmV3SW50ZXJ2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cblxuICAgIC8qKiBZLUFYSVMgQ0hBTkdFUyAqL1xuXG4gICAgLy94LWF4aXMgdGl0bGUgdGV4dGFyZWEgY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeV9heGlzX3RpdGxlX3RleHRhcmVhXCIpLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld1RpdGxlID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVUaXRsZShuZXdUaXRsZSwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8veS1heGlzIHRpdGxlIGluZGVudCBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF95X2F4aXNfeF9wb3NpdGlvbl9pbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdYUG9zaXRpb24gPSBOdW1iZXIoJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIHVwZGF0ZV95X2F4aXMudXBkYXRlWFBvc2l0aW9uKG5ld1hQb3NpdGlvbiwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8veS1heGlzIHRpY2ttYXJrIGludGVydmFsIGlucHV0IGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3lfYXhpc190aWNrbWFya19pbnRlcnZhbF9pbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdJbnRlcnZhbCA9IE51bWJlcigkKHRoaXMpLnZhbCgpKTtcbiAgICAgICAgdXBkYXRlX3lfYXhpcy51cGRhdGVUaWNrbWFya0ludGVydmFsKG5ld0ludGVydmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgLy95LWF4aXMgbWF4IGlucHV0IGNoYW5nZWRcbiAgICAkKFwiI2NoYXJ0X3lfYXhpc19tYXhfaW5wdXRcIikua2V5dXAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3TWF4ID0gTnVtYmVyKCQodGhpcykudmFsKCkpO1xuICAgICAgICB1cGRhdGVfeV9heGlzLnVwZGF0ZU1heChuZXdNYXgsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvL3ktYXhpcyBtaW4gaW5wdXQgY2hhbmdlZFxuICAgICQoXCIjY2hhcnRfeV9heGlzX21pbl9pbnB1dFwiKS5rZXl1cChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdNaW4gPSBOdW1iZXIoJCh0aGlzKS52YWwoKSk7XG4gICAgICAgIHVwZGF0ZV95X2F4aXMudXBkYXRlTWluKG5ld01pbiwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIC8veS1heGlzIG9wcG9zaXRlIHNpZGUgY2Vja2JveCBjaGFuZ2VkXG4gICAgJChcIiNjaGFydF95X2F4aXNfb3Bwb3NpdGVfY2hlY2tib3hcIikuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbCA9IHV0aWxzX2Zvcm1zLmdldENoZWNrQm94VmFsdWUoJCh0aGlzKSk7XG4gICAgICAgIHVwZGF0ZV95X2F4aXMudXBkYXRlSXNPcHBvc2l0ZSh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgfSk7XG5cblxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFsbEZvcm1VcGRhdGVzOyIsIi8qKiB3aGVuIGEgY2hhcnQgaWNvbiBpcyBjbGlja2VkLCB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCAtIGNoYW5nZXMgdGhlIGNoYXJ0IHR5cGUgc2hvd24gKi9cblxudmFyIHVwZGF0ZUNoYXJ0VHlwZSA9IGZ1bmN0aW9uIChpLCB0eXBlLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgIHZhciB5X2F4aXNfdGl0bGVfYWxpZ247XG5cbiAgICBpZiAodHlwZSA9PT0gXCJiYXJcIikge1xuICAgICAgICAvL2ZpeCB5IGF4aXMgcG9zaXRpb25cbiAgICAgICAgY2hhcnQuaW52ZXJ0ZWQgPSB0cnVlO1xuICAgICAgICB5X2F4aXNfdGl0bGVfYWxpZ24gPSBcIm1pZGRsZVwiO1xuICAgICAgICAvL2hpZGUgbm9uLXJlbGV2YW50IGVsZW1lbnRzXG4gICAgICAgICQoXCIubm90X2JhclwiKS5oaWRlKCk7XG5cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYXJ0LmludmVydGVkID0gZmFsc2U7XG4gICAgICAgIHlfYXhpc190aXRsZV9hbGlnbiA9IFwiaGlnaFwiO1xuICAgICAgICAkKFwiLm5vdF9iYXJcIikuc2hvdygpO1xuXG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09IFwiZHJpbGxkb3duXCIpIHtcbiAgICAgICAgdHlwZSA9IFwiY29sdW1uXCI7XG4gICAgfVxuXG4gICAgY2hhcnQueEF4aXNbMF0udXBkYXRlKHt9LCBmYWxzZSk7XG4gICAgY2hhcnQueUF4aXNbMF0udXBkYXRlKHt9LCBmYWxzZSk7XG5cbiAgICAkLmVhY2goY2hhcnQuc2VyaWVzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjaGFydC55QXhpc1swXS5zZXRUaXRsZSh7XG4gICAgICAgIGFsaWduOiB5X2F4aXNfdGl0bGVfYWxpZ25cbiAgICB9KTtcblxuXG4gICAgYWxsX2NoYXJ0X29wdGlvbnMuY2hhcnQudHlwZSA9IHR5cGU7XG4gICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUuYWxpZ24gPSB5X2F4aXNfdGl0bGVfYWxpZ247XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVDaGFydFR5cGU7IiwiLyoqIHdoZW4gbGVnZW5kIG9wdGlvbnMgYXJlIGNoYW5nZWQgaW4gdGhlIHNpZGUgYXJlYSAqL1xuXG52YXIgdXBkYXRlX2xlZ2VuZCA9IHtcblxuICAgIC8qIGRlY2lkZSBpZiB0aGUgbGVnZW5kIHNob3VsZCBiZSByZXZlcnNlIG9yZGVyICovXG4gICAgdXBkYXRlSXNSZXZlcnNlZDogZnVuY3Rpb24gdXBkYXRlSXNSZXZlcnNlZCh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgIHZhciBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgICAgIGxlZ2VuZC5vcHRpb25zLnJldmVyc2VkID0gdmFsO1xuICAgICAgICBsZWdlbmQucmVuZGVyKCk7XG5cblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5sZWdlbmQucmV2ZXJzZWQgPSB2YWw7XG4gICAgfSxcblxuXG4gICAgLyoqIGlmICdubyBsZWdlbmQnIGlzIHNlbGVjdGVkLCBoaWRlIHRoZSBsZWdlbmQsIGFuZCBzZXQgb3B0aW9ucywgZWxzZSwgc2hvdyBpdCB3aXRoIHRoZSBjb3JyZWN0IGxheW91dCAqL1xuICAgIHVwZGF0ZUxheW91dDogZnVuY3Rpb24gdXBkYXRlTGF5b3V0KHZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgdmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgaWYgKHZhbCA9PT0gXCJub19sZWdlbmRcIikge1xuICAgICAgICAgICAgbGVnZW5kLmdyb3VwLmhpZGUoKTtcbiAgICAgICAgICAgIGxlZ2VuZC5ib3guaGlkZSgpO1xuICAgICAgICAgICAgbGVnZW5kLmRpc3BsYXkgPSBmYWxzZTtcbiAgICAgICAgICAgIGxlZ2VuZC5vcHRpb25zLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxlZ2VuZC5yZW5kZXIoZmFsc2UpO1xuXG4gICAgICAgICAgICB2YWwgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgbGVnZW5kLm9wdGlvbnMubGF5b3V0ID0gdmFsO1xuICAgICAgICAgICAgbGVnZW5kLnJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICBsZWdlbmQuZ3JvdXAuc2hvdygpO1xuICAgICAgICAgICAgbGVnZW5kLmJveC5zaG93KCk7XG4gICAgICAgICAgICBsZWdlbmQuZGlzcGxheSA9IHRydWU7XG4gICAgICAgICAgICBsZWdlbmQub3B0aW9ucy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC5sYXlvdXQgPSB2YWw7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC5lbmFibGVkID0gbGVnZW5kLm9wdGlvbnMuZW5hYmxlZDtcblxuICAgIH0sXG5cbiAgICAvKiogdXBkYXRlIFggYW5kIFkgcG9zaXRpb25zIG9uIGxlZ2VuZCAqL1xuXG4gICAgdXBkYXRlWFlwb3NpdGlvbnM6IGZ1bmN0aW9uIChuZXdYLCBuZXdZLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgdmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGVnZW5kLm9wdGlvbnMueCA9IG5ld1g7XG4gICAgICAgIGxlZ2VuZC5vcHRpb25zLnkgPSBuZXdZO1xuICAgICAgICBsZWdlbmQucmVuZGVyKGZhbHNlKTtcblxuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy5sZWdlbmQueCA9IG5ld1g7XG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmxlZ2VuZC55ID0gbmV3WTtcblxuICAgIH1cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX2xlZ2VuZDsiLCJ2YXIgdXBkYXRlX3RlbXBsYXRlID0ge1xuICAgIHJlc2l6ZTogZnVuY3Rpb24gKHZhbCwgZGltZW5zaW9uLCBjaGFydCkge1xuICAgICAgICB2YWwgPSBOdW1iZXIodmFsKTtcbiAgICAgICAgaWYgKCFpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAkKFwiLmNoYXJ0X2Rpc3BsYXlfYXJlYVwiKS5jc3MoZGltZW5zaW9uLCB2YWwgKyBcInB4XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNoYXJ0LnJlZmxvdygpO1xuICAgIH0sXG5cbiAgICBtYXJnaW46IGZ1bmN0aW9uIChtYXJnaW5zX2FyciwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgJC5lYWNoKGNoYXJ0LmF4ZXMsIGZ1bmN0aW9uIChpLCBlKSB7XG4gICAgICAgICAgICBlLmlzRGlydHkgPSB0cnVlOyAvL3RvIHRlbGwgYXhlcyB0byByZWZyZXNoXG4gICAgICAgIH0pO1xuICAgICAgICBjaGFydC5tYXJnaW4gPSBtYXJnaW5zX2FycjtcbiAgICAgICAgY2hhcnQucmVkcmF3KGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLmNoYXJ0Lm1hcmdpbiA9IG1hcmdpbnNfYXJyO1xuXG4gICAgfVxufVxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVfdGVtcGxhdGU7IiwiLyoqIHdoZW4gWC1heGlzIG9wdGlvbnMgYXJlIGNoYW5nZWQgaW4gdGhlIHNpZGUgYXJlYSwgdGhlc2UgbWV0aG9kcyBhcmUgY2FsbGVkICovXG5cbnZhciB1cGRhdGVfeF9heGlzID0ge1xuXG4gICAgLyoqIHVwZGF0ZSB0aGUgeCBheGlzIHRpdGxlICovXG4gICAgdXBkYXRlVGl0bGU6IGZ1bmN0aW9uIChuZXdUaXRsZSwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG4gICAgICAgIGNoYXJ0LnhBeGlzWzBdLnNldFRpdGxlKHtcbiAgICAgICAgICAgIHRleHQ6IG5ld1RpdGxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnhBeGlzLnRpdGxlLnRleHQgPSBuZXdUaXRsZTtcblxuICAgIH0sXG5cblxuICAgIC8qKiB1cGRhdGUgeCBheGlzIHRpY2ttYXJrIGludGVydmFsICovXG4gICAgdXBkYXRlVGlja21hcmtJbnRlcnZhbDogZnVuY3Rpb24gKG5ld0ludGVydmFsLCBjaGFydCwgYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuXG4gICAgICAgIGlmIChpc05hTihuZXdJbnRlcnZhbCkgfHwgbmV3SW50ZXJ2YWwgPT09IDApIHtcbiAgICAgICAgICAgIG5ld0ludGVydmFsID0gdW5kZWZpbmVkO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghY2hhcnQpIHsgLy8gY2FsbGVkIHdoZW4gdGhpcyBpcyB1c2VkIGluIHhfYXhpc19pbml0XG4gICAgICAgICAgICByZXR1cm4gbmV3SW50ZXJ2YWw7XG4gICAgICAgIH0gXG5cbiAgICAgICAgaWYgKG5ld0ludGVydmFsID4gY2hhcnQueEF4aXNbMF0uZGF0YU1heCkge1xuICAgICAgICAgICAgbmV3SW50ZXJ2YWwgPSBjaGFydC54QXhpc1swXS5kYXRhTWF4O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnQueEF4aXNbMF0udXBkYXRlKHtcbiAgICAgICAgICAgIHRpY2tJbnRlcnZhbDogbmV3SW50ZXJ2YWxcblxuICAgICAgICB9KTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueEF4aXMudGlja0ludGVydmFsID0gbmV3SW50ZXJ2YWw7XG5cbiAgICB9XG5cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlX3hfYXhpczsiLCIvKiogd2hlbiBZLWF4aXMgb3B0aW9ucyBhcmUgY2hhbmdlZCBpbiB0aGUgc2lkZSBhcmVhLCB0aGVzZSBtZXRob2RzIGFyZSBjYWxsZWQgKi9cbnZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG5cblxuXG52YXIgdXBkYXRlX3lfYXhpcyA9IHtcblxuICAgIC8qKiB1cGRhdGUgaWYgeSBheGlzIGxhYmVscyBhcmUgb24gb3Bwb3NpdGUgc2lkZSAqL1xuICAgIHVwZGF0ZUlzT3Bwb3NpdGU6IGZ1bmN0aW9uICh2YWwsIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICBjaGFydC55QXhpc1swXS51cGRhdGUoe1xuICAgICAgICAgICAgb3Bwb3NpdGU6IHZhbFxuICAgICAgICB9KTtcbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMub3Bwb3NpdGUgPSB2YWw7XG5cbiAgICB9LFxuXG4gICAgLyoqIHVwZGF0ZSB5LWF4aXMgbWF4ICovXG4gICAgICAgIHVwZGF0ZU1heDogZnVuY3Rpb24gKG5ld01heCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG4gICAgICAgIG5ld01heCA9IHV0aWxzX21haW4uY2hlY2tmb3JVbmRlZmluZWQobmV3TWF4KTtcbiAgICAgICAgaWYgKCFjaGFydCkgeyAvLyBjYWxsZWQgd2hlbiB0aGlzIGlzIHVzZWQgaW4geV9heGlzX2luaXRcbiAgICAgICAgICAgIHJldHVybiBuZXdNYXg7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFydC55QXhpc1swXS51cGRhdGUoe1xuICAgICAgICAgICAgbWF4OiBuZXdNYXhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMubWF4ID0gbmV3TWF4O1xuICAgIH0sXG5cbiAgICAvKiogdXBkYXRlIHktYXhpcyBtaW4gKi9cbiAgICB1cGRhdGVNaW46IGZ1bmN0aW9uIChuZXdNaW4sIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuICAgICAgICBuZXdNaW4gPSB1dGlsc19tYWluLmNoZWNrZm9yVW5kZWZpbmVkKG5ld01pbik7XG4gICAgICAgIGlmICghY2hhcnQpIHsgLy8gY2FsbGVkIHdoZW4gdGhpcyBpcyB1c2VkIGluIHlfYXhpc19pbml0XG4gICAgICAgICAgICByZXR1cm4gbmV3TWluO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnQueUF4aXNbMF0udXBkYXRlKHtcbiAgICAgICAgICAgIG1pbjogbmV3TWluXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLm1pbiA9IG5ld01pbjtcbiAgICB9LFxuXG4gICAgLyoqIHVwZGF0ZSB0aGUgeSBheGlzIHRpdGxlICovXG4gICAgdXBkYXRlVGl0bGU6IGZ1bmN0aW9uIChuZXdUaXRsZSwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG4gICAgICAgIGNoYXJ0LnlBeGlzWzBdLnNldFRpdGxlKHtcbiAgICAgICAgICAgIHRleHQ6IG5ld1RpdGxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFsbF9jaGFydF9vcHRpb25zLnlBeGlzLnRpdGxlLnRleHQgPSBuZXdUaXRsZTtcblxuICAgIH0sXG5cbiAgICAvKiogdXBkYXRlIHkgYXhpcyB4LXBvc2l0aW9uICh0aXRsZS54KSAqL1xuXG5cbiAgICB1cGRhdGVYUG9zaXRpb246IGZ1bmN0aW9uIChuZXdYUG9zaXRpb24sIGNoYXJ0LCBhbGxfY2hhcnRfb3B0aW9ucykge1xuXG4gICAgICAgIG5ld1hQb3NpdGlvbiA9IHV0aWxzX21haW4uY2hlY2tmb3JVbmRlZmluZWQobmV3WFBvc2l0aW9uKTtcblxuICAgICAgICBjaGFydC55QXhpc1swXS5zZXRUaXRsZSh7XG4gICAgICAgICAgICB4OiBuZXdYUG9zaXRpb25cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWxsX2NoYXJ0X29wdGlvbnMueUF4aXMudGl0bGUueCA9IG5ld1hQb3NpdGlvbjtcblxuICAgIH0sXG5cbiAgICAvKiogdXBkYXRlIHkgYXhpcyB0aWNrbWFyayBpbnRlcnZhbCAqL1xuICAgIHVwZGF0ZVRpY2ttYXJrSW50ZXJ2YWw6IGZ1bmN0aW9uIChuZXdJbnRlcnZhbCwgY2hhcnQsIGFsbF9jaGFydF9vcHRpb25zKSB7XG5cblxuICAgICAgICBuZXdJbnRlcnZhbCA9IHV0aWxzX21haW4uY2hlY2tmb3JVbmRlZmluZWQobmV3SW50ZXJ2YWwpO1xuXG4gICAgICAgIGlmICghY2hhcnQpIHsgLy8gY2FsbGVkIHdoZW4gdGhpcyBpcyB1c2VkIGluIHlfYXhpc19pbml0XG4gICAgICAgICAgICByZXR1cm4gbmV3SW50ZXJ2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SW50ZXJ2YWwgPiBjaGFydC55QXhpc1swXS5kYXRhTWF4KSB7XG4gICAgICAgICAgICBuZXdJbnRlcnZhbCA9IGNoYXJ0LnlBeGlzWzBdLmRhdGFNYXg7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFydC55QXhpc1swXS51cGRhdGUoe1xuICAgICAgICAgICAgdGlja0ludGVydmFsOiBuZXdJbnRlcnZhbFxuXG4gICAgICAgIH0pO1xuICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy55QXhpcy50aWNrSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcblxuICAgIH1cblxuICAgIC8vXG4gICAgLy9cbiAgICAvLyAgICAgICAgaWYgKGlzTmFOKG5ld0ludGVydmFsKSB8fCBuZXdJbnRlcnZhbCA9PT0gMCkge1xuICAgIC8vICAgICAgICAgICAgbmV3SW50ZXJ2YWwgPSB1bmRlZmluZWQ7XG4gICAgLy8gICAgICAgIH07XG4gICAgLy9cbiAgICAvLyAgICAgICAgaWYgKCFjaGFydCkgeyAvLyBjYWxsZWQgd2hlbiB0aGlzIGlzIHVzZWQgaW4geF9heGlzX2luaXRcbiAgICAvLyAgICAgICAgICAgIHJldHVybiBuZXdJbnRlcnZhbDtcbiAgICAvLyAgICAgICAgfSBcbiAgICAvL1xuICAgIC8vICAgICAgICBpZiAobmV3SW50ZXJ2YWwgPiBjaGFydC54QXhpc1swXS5kYXRhTWF4KSB7XG4gICAgLy8gICAgICAgICAgICBuZXdJbnRlcnZhbCA9IGNoYXJ0LnhBeGlzWzBdLmRhdGFNYXg7XG4gICAgLy8gICAgICAgIH1cbiAgICAvL1xuICAgIC8vICAgICAgICBjaGFydC54QXhpc1swXS51cGRhdGUoe1xuICAgIC8vICAgICAgICAgICAgdGlja0ludGVydmFsOiBuZXdJbnRlcnZhbFxuICAgIC8vXG4gICAgLy8gICAgICAgIH0pO1xuICAgIC8vICAgICAgICBhbGxfY2hhcnRfb3B0aW9ucy54QXhpcy50aWNrSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcbiAgICAvL1xuICAgIC8vXG4gICAgLy8gICAgfVxuXG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHVwZGF0ZV95X2F4aXM7IiwiIC8qKiBjcmVhdGUgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBhbGxfY2hhcnRfb3B0aW9ucyAqL1xuXG4gdmFyIEFsbENoYXJ0T3B0aW9ucyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2FsbF9jaGFydF9vcHRpb25zLmpzXCIpLFxuICAgICBjaGFydEluaXQgPSByZXF1aXJlKFwiLi9jaGFydF9pbml0LmpzXCIpLFxuICAgICBjb2xvcnNJbml0ID0gcmVxdWlyZShcIi4vY29sb3JzX2luaXQuanNcIiksXG4gICAgIGNyZWRpdHNJbml0ID0gcmVxdWlyZShcIi4vY3JlZGl0c19pbml0LmpzXCIpLFxuICAgICBleHBvcnRpbmdJbml0ID0gcmVxdWlyZShcIi4vZXhwb3J0aW5nX2luaXQuanNcIiksXG4gICAgIGxlZ2VuZEluaXQgPSByZXF1aXJlKFwiLi9sZWdlbmRfaW5pdC5qc1wiKSxcbiAgICAgcGxvdE9wdGlvbnNJbml0ID0gcmVxdWlyZShcIi4vcGxvdF9vcHRpb25zX2luaXQuanNcIiksXG4gICAgIHNlcmllc0luaXQgPSByZXF1aXJlKFwiLi9zZXJpZXNfaW5pdC5qc1wiKSxcbiAgICAgc3VidGl0bGVJbml0ID0gcmVxdWlyZShcIi4vc3VidGl0bGVfaW5pdC5qc1wiKSxcbiAgICAgdGl0bGVJbml0ID0gcmVxdWlyZShcIi4vdGl0bGVfaW5pdC5qc1wiKSxcbiAgICAgdG9vbHRpcEluaXQgPSByZXF1aXJlKFwiLi90b29sdGlwX2luaXQuanNcIiksXG4gICAgIHhBeGlzSW5pdCA9IHJlcXVpcmUoXCIuL3hfYXhpc19pbml0LmpzXCIpLFxuICAgICB5QXhpc0luaXQgPSByZXF1aXJlKFwiLi95X2F4aXNfaW5pdC5qc1wiKTtcblxuXG4gdmFyIGFsbENoYXJ0T3B0aW9uc0luaXQgPSBmdW5jdGlvbiBhbGxDaGFydE9wdGlvbnNJbml0KCkge1xuXG4gICAgIC8vZ2V0IG9wdGlvbnMgZnJvbSBpbmRpdmlkdWFsIGluaXRzXG4gICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgY2hhcnQ6IGNoYXJ0SW5pdCgpLFxuICAgICAgICAgY29sb3JzOiBjb2xvcnNJbml0KCksXG4gICAgICAgICBjcmVkaXRzOiBjcmVkaXRzSW5pdCgpLFxuICAgICAgICAvLyBleHBvcnRpZzogZXhwb3J0aW5nSW5pdCgpLFxuICAgICAgICAgbGVnZW5kOiBsZWdlbmRJbml0KCksXG4gICAgICAgICBwbG90T3B0aW9uczogcGxvdE9wdGlvbnNJbml0KCksXG4gICAgICAgICBzZXJpZXM6IHNlcmllc0luaXQoKSxcbiAgICAgICAgIHN1YnRpdGxlOiBzdWJ0aXRsZUluaXQoKSxcbiAgICAgICAgIHRpdGxlOiB0aXRsZUluaXQoKSxcbiAgICAgICAgIHRvb2x0aXA6IHRvb2x0aXBJbml0KCksXG4gICAgICAgICB4QXhpczogeEF4aXNJbml0KCksXG4gICAgICAgICB5QXhpczogeUF4aXNJbml0KClcblxuICAgICB9O1xuXG5cbiAgICAgdmFyIGFsbF9jaGFydF9vcHRpb25zID0gbmV3IEFsbENoYXJ0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgcmV0dXJuIGFsbF9jaGFydF9vcHRpb25zO1xuIH07XG5cbiBtb2R1bGUuZXhwb3J0cyA9IGFsbENoYXJ0T3B0aW9uc0luaXQ7IiwiLyoqIEluaXRpYWxpemVyIGZvciBcImNoYXJ0XCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlICovXG5cbnZhciBDaGFydE9wdGlvbnMgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy9jaGFydC5qc1wiKTtcblxuXG52YXIgY2hhcnRJbml0ID0gZnVuY3Rpb24gY2hhcnRJbml0KCkge1xuICAgIFxuICAgIHZhciBjaGFydF90eXBlID0gJChcIi5zZWxlY3RlZF9jaGFydF90eXBlXCIpLmRpdlZhbCgpO1xuICAgICAgICBpZiAoY2hhcnRfdHlwZSA9PT0gXCJkcmlsbGRvd25cIil7XG4gICAgICAgICAgICBjaGFydF90eXBlID0gXCJjb2x1bW5cIjtcbiAgICAgICAgfVxuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBtYXJnaW46IFtOdW1iZXIoJChcIiN0b3BfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoKSksXG4gICAgICAgICAgICAgICAgICBOdW1iZXIoJChcIiNyaWdodF9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbCgpKSxcbiAgICAgICAgICAgICAgICAgIE51bWJlcigkKFwiI2JvdHRvbV9tYXJnaW5fdGV4dGlucHV0XCIpLnZhbCgpKSxcbiAgICAgICAgICAgICAgICAgIE51bWJlcigkKFwiI2xlZnRfbWFyZ2luX3RleHRpbnB1dFwiKS52YWwoKSksXG4gICAgICAgICAgICAgICAgIF0sXG4gICAgICAgIHJlbmRlclRvOiAkKFwiI2NoYXJ0X2lkX3RleHRpbnB1dFwiKS52YWwoKSxcblxuICAgICAgICB0eXBlOiBjaGFydF90eXBlXG4gICAgfVxuICAgIFxuXG5cbiAgICB2YXIgY2hhcnRfb3B0aW9ucyA9IG5ldyBDaGFydE9wdGlvbnMob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoYXJ0X29wdGlvbnM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNoYXJ0SW5pdDsiLCIvKiogSW5pdGlhbGl6ZXIgZm9yIFwiY29sb3JzXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlICovIFxuXG52YXIgQ29sb3JzID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvY29sb3JzLmpzXCIpO1xuXG5cbiB2YXIgY29sb3JzSW5pdCA9IGZ1bmN0aW9uIGNvbG9yc0luaXQoKSB7XG5cbiAgICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgICB2YXIgb3B0aW9ucyA9IHtcblxuICAgICB9O1xuXG5cbiAgICAgdmFyIGNvbG9ycyA9IG5ldyBDb2xvcnMob3B0aW9ucyk7XG4gICAgIHJldHVybiBjb2xvcnMuY29sb3JzO1xuIH07XG5cbiBtb2R1bGUuZXhwb3J0cyA9IGNvbG9yc0luaXQ7XG4iLCIvKiogSW5pdGlhbGl6ZXIgZm9yIFwiY3JlZGl0c1wiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSAqL1xuXG52YXIgQ3JlZGl0cyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2NyZWRpdHMuanNcIik7XG5cblxudmFyIGNyZWRpdHNJbml0ID0gZnVuY3Rpb24gY3JlZGl0c0luaXQoKSB7XG5cbiAgICAvL2xvYWQgb3B0aW9ucyBmcm9tIHVzZXIgaW5wdXRzXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHRleHQ6ICQoXCIjY2hhcnRfY3JlZGl0c190ZXh0X3RleHRhcmVhXCIpLnZhbCgpLFxuICAgICAgICBwb3NpdGlvbjp7XG4gICAgICAgICAgICB5OiBOdW1iZXIoJChcIiNjaGFydF9jcmVkaXRzX3lfcG9zaXRpb25faW5wdXRcIikudmFsKCkpXG4gICAgICAgIH1cblxuXG4gICAgfTtcblxuXG4gICAgdmFyIGNyZWRpdHMgPSBuZXcgQ3JlZGl0cyhvcHRpb25zKTtcbiAgICByZXR1cm4gY3JlZGl0cztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlZGl0c0luaXQ7IiwiLyoqIEluaXRpYWxpemVyIGZvciBcImV4cG9ydGluZ1wiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSAqLyBcblxudmFyIEV4cG9ydGluZyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2V4cG9ydGluZy5qc1wiKTtcblxuXG4gdmFyIGV4cG9ydGluZ0luaXQgPSBmdW5jdGlvbiBleHBvcnRpbmdJbml0KCkge1xuXG4gICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICAgdmFyIG9wdGlvbnMgPSB7XG5cbiAgICAgfTtcblxuXG4gICAgIHZhciBleHBvcnRpbmcgPSBuZXcgRXhwb3J0aW5nKG9wdGlvbnMpO1xuICAgICByZXR1cm4gZXhwb3J0aW5nO1xuIH07XG5cbiBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGluZ0luaXQ7IiwiLyoqIEluaXRpYWxpemVyIGZvciBcImxlZ2VuZFwiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSAqLyBcblxudmFyIExlZ2VuZCA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL2xlZ2VuZC5qc1wiKTtcblxuXG4gdmFyIGxlZ2VuZEluaXQgPSBmdW5jdGlvbiBsZWdlbmRJbml0KCkge1xuICAgICBcbiAgICAgXG4gICAgIHZhciBnZXRMZWdlbmRMYXlvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgdmFyIGxlZ2VuZF9sYXlvdXRfdmFsID0gJChcIiNsZWdlbmRfbGF5b3V0X3NlbGVjdFwiKS52YWwoKTtcbiAgICAgICAgIHJldHVybiBsZWdlbmRfbGF5b3V0X3ZhbCAhPT0gXCJub19sZWdlbmRcIiA/IGxlZ2VuZF9sYXlvdXRfdmFsIDogdW5kZWZpbmVkO1xuICAgICB9O1xuICAgICBcbiAgICAgXG5cbiAgICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgIGxheW91dDogZ2V0TGVnZW5kTGF5b3V0KCksXG4gICAgICAgICB4OiBOdW1iZXIoJChcIiNsZWdlbmRfcGxhY2VtZW50X3hcIikudmFsKCkpLFxuICAgICAgICAgeTogTnVtYmVyKCQoXCIjbGVnZW5kX3BsYWNlbWVudF95XCIpLnZhbCgpKVxuXG4gICAgIH07XG5cblxuICAgICB2YXIgbGVnZW5kID0gbmV3IExlZ2VuZChvcHRpb25zKTtcbiAgICAgcmV0dXJuIGxlZ2VuZDtcbiB9O1xuXG4gbW9kdWxlLmV4cG9ydHMgPSBsZWdlbmRJbml0O1xuXG5cbi8vXG4vLy8qKiBsZWdlbmQgb3B0aW9ucyBjb25zdHJ1Y3Rvci4gSW5mbyBhdCBodHRwOi8vYXBpLmhpZ2hjaGFydHMuY29tL2hpZ2hjaGFydHMjbGVnZW5kICovXG4vL3ZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG4vL1xuLy92YXIgTGVnZW5kID0gZnVuY3Rpb24gKG8pIHtcbi8vXG4vLyAgICB0aGlzLmFsaWduID0gby5hbGlnbiB8fCAnY2VudGVyJztcbi8vICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gby5iYWNrZ3JvdW5kQ29sb3IgfHwgJ25vbmUnO1xuLy8gICAgdGhpcy5ib3JkZXJDb2xvciA9IG8uYm9yZGVyQ29sb3IgfHwgJ25vbmUnO1xuLy8gICAgdGhpcy5ib3JkZXJXaWR0aCA9IG8uYm9yZGVyV2lkdGggfHwgMDtcbi8vICAgIHRoaXMuZW5hYmxlZCA9IG8uZW5hYmxlZCB8fCB0cnVlO1xuLy8gICAgdGhpcy5mbG9hdGluZyA9IG8uZmxvYXRpbmcgfHwgZmFsc2U7XG4vLyAgICB0aGlzLml0ZW1EaXN0YW5jZSA9IG8uaXRlbURpc3RhbmNlIHx8IDMwO1xuLy8gICAgdGhpcy5sYXlvdXQgPSBvLmxheW91dCB8fCAnaG9yaXpvbnRhbCc7XG4vLyAgICB0aGlzLnJldmVyc2VkID0gby5yZXZlcnNlZCB8fCBmYWxzZTtcbi8vICAgIHRoaXMuc2hhZG93ID0gby5zaGFkb3cgfHwgZmFsc2U7XG4vLyAgICB0aGlzLnVzZUhUTUwgPSBvLnVzZUhUTUwgfHwgZmFsc2U7XG4vLyAgICB0aGlzLnZlcnRpY2FsQWxpZ24gPSBvLnZlcnRpY2FsQWxpZ24gfHwgJ3RvcCc7XG4vLyAgICB0aGlzLndpZHRoID0gby53aWR0aDtcbi8vICAgIHRoaXMueCA9IG8ueCB8fCAwO1xuLy8gICAgdGhpcy55ID0gby55IHx8IDMwO1xuLy9cbi8vICAgIHRoaXMuaXRlbVN0eWxlID0ge1xuLy8gICAgICAgIGZvbnRGYW1pbHk6ICdDYWxpYnJpLCBWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmJyxcbi8vICAgICAgICBjb2xvcjogJyMwMDAnXG4vLyAgICB9O1xuLy8gICAgdGhpcy5pdGVtSGlkZGVuU3R5bGUgPSB7XG4vLyAgICAgICAgY29sb3I6ICdncmF5J1xuLy8gICAgfTtcbi8vICAgIHRoaXMuaXRlbUhvdmVyU3R5bGUgPSB7XG4vLyAgICAgICAgY3Vyc29yOiBvLml0ZW1Ib3ZlclN0eWxlID8gby5pdGVtSG92ZXJTdHlsZS5jdXJzb3IgfHwgXCJwb2ludGVyXCIgOiBcInBvaW50ZXJcIlxuLy8gICAgfVxuLy9cbi8vfVxuLy9cbi8vXG4vL0xlZ2VuZC5wcm90b3R5cGUuc2V0T3B0aW9uID0gdXRpbHNfbWFpbi5zZXRPcHRpb247XG4vL1xuLy9tb2R1bGUuZXhwb3J0cyA9IExlZ2VuZDsiLCIvKiogSW5pdGlhbGl6ZXIgZm9yIFwicGxvdE9wdGlvbnNcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgKi8gXG5cbnZhciBQbG90T3B0aW9ucyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3Bsb3Rfb3B0aW9ucy5qc1wiKTtcblxuXG4gdmFyIHBsb3RPcHRpb25zSW5pdCA9IGZ1bmN0aW9uIHBsb3RPcHRpb25zSW5pdCgpIHtcblxuICAgICAvL2xvYWQgb3B0aW9ucyBmcm9tIHVzZXIgaW5wdXRzXG4gICAgIHZhciBvcHRpb25zID0ge1xuXG4gICAgIH07XG5cblxuICAgICB2YXIgcGxvdE9wdGlvbnMgPSBuZXcgUGxvdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgIHJldHVybiBwbG90T3B0aW9ucztcbiB9O1xuXG4gbW9kdWxlLmV4cG9ydHMgPSBwbG90T3B0aW9uc0luaXQ7IiwiLyoqIEluaXRpYWxpemVyIGZvciBcInNlcmllc1wiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSAqLyBcblxudmFyIFNlcmllcyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3Nlcmllcy5qc1wiKTtcblxuXG4gdmFyIHNlcmllc0luaXQgPSBmdW5jdGlvbiBzZXJpZXNJbml0KCkge1xuXG4gICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICAgdmFyIG9wdGlvbnMgPSB7XG5cbiAgICAgfTtcblxuXG4gICAgIHZhciBzZXJpZXMgPSBuZXcgU2VyaWVzKG9wdGlvbnMpO1xuICAgICByZXR1cm4gc2VyaWVzLnNlcmllcztcbiB9O1xuXG4gbW9kdWxlLmV4cG9ydHMgPSBzZXJpZXNJbml0OyIsIi8qKiBJbml0aWFsaXplciBmb3IgXCJzdWJ0aXRsZVwiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSAqLyBcblxudmFyIFN1YnRpdGxlID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvc3VidGl0bGUuanNcIik7XG5cblxuIHZhciBzdWJ0aXRsZUluaXQgPSBmdW5jdGlvbiBzdWJ0aXRsZUluaXQoKSB7XG5cbiAgICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgICB2YXIgb3B0aW9ucyA9IHtcblxuICAgICB9O1xuXG5cbiAgICAgdmFyIHN1YnRpdGxlID0gbmV3IFN1YnRpdGxlKG9wdGlvbnMpO1xuICAgICByZXR1cm4gc3VidGl0bGU7XG4gfTtcblxuIG1vZHVsZS5leHBvcnRzID0gc3VidGl0bGVJbml0OyIsIi8qKiBJbml0aWFsaXplciBmb3IgXCJ0aXRsZVwiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSAqLyBcblxudmFyIFRpdGxlID0gcmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9jaGFydHMvdGl0bGUuanNcIik7XG5cblxuIHZhciB0aXRsZUluaXQgPSBmdW5jdGlvbiB0aXRsZUluaXQoKSB7XG5cbiAgICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgICB2YXIgb3B0aW9ucyA9IHtcblxuICAgICB9O1xuXG5cbiAgICAgdmFyIHRpdGxlID0gbmV3IFRpdGxlKG9wdGlvbnMpO1xuICAgICByZXR1cm4gdGl0bGU7XG4gfTtcblxuIG1vZHVsZS5leHBvcnRzID0gdGl0bGVJbml0OyIsIi8qKiBJbml0aWFsaXplciBmb3IgXCJ0b29sdGlwXCIgb3B0aW9ucyBzZWN0aW9uIG9mIGFsbF9jaGFydF9vcHRpb25zLiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlICovIFxuXG52YXIgVG9vbHRpcCA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3Rvb2x0aXAuanNcIik7XG5cblxuIHZhciB0b29sdGlwSW5pdCA9IGZ1bmN0aW9uIHRvb2x0aXBJbml0KCkge1xuXG4gICAgIC8vbG9hZCBvcHRpb25zIGZyb20gdXNlciBpbnB1dHNcbiAgICAgdmFyIG9wdGlvbnMgPSB7XG5cbiAgICAgfTtcblxuXG4gICAgIHZhciB0b29sdGlwID0gbmV3IFRvb2x0aXAob3B0aW9ucyk7XG4gICAgIHJldHVybiB0b29sdGlwO1xuIH07XG5cbiBtb2R1bGUuZXhwb3J0cyA9IHRvb2x0aXBJbml0OyIsIi8qKiBJbml0aWFsaXplciBmb3IgXCJ4QXhpc1wiIG9wdGlvbnMgc2VjdGlvbiBvZiBhbGxfY2hhcnRfb3B0aW9ucy4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSAqL1xudmFyIHVwZGF0ZV94X2F4aXMgPSByZXF1aXJlKFwiLi4vZm9ybV91cGRhdGVzL3VwZGF0ZV94X2F4aXMuanNcIik7XG5cbnZhciBYQXhpcyA9IHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvY2hhcnRzL3hfYXhpcy5qc1wiKTtcblxuXG52YXIgeEF4aXNJbml0ID0gZnVuY3Rpb24geEF4aXNJbml0KCkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogJChcIiNjaGFydF94X2F4aXNfdGl0bGVfdGV4dGFyZWFcIikudmFsKClcbiAgICAgICAgfSxcbiAgICAgICAgdGlja0ludGVydmFsOiB1cGRhdGVfeF9heGlzLnVwZGF0ZVRpY2ttYXJrSW50ZXJ2YWwoTnVtYmVyKCQoXCIjY2hhcnRfeF9heGlzX3RpY2ttYXJrX2ludGVydmFsX2lucHV0XCIpLnZhbCgpKSlcblxuICAgIH07XG5cblxuICAgIHZhciB4QXhpcyA9IG5ldyBYQXhpcyhvcHRpb25zKTtcbiAgICByZXR1cm4geEF4aXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHhBeGlzSW5pdDsiLCIvKiogSW5pdGlhbGl6ZXIgZm9yIFwieUF4aXNcIiBvcHRpb25zIHNlY3Rpb24gb2YgYWxsX2NoYXJ0X29wdGlvbnMuIENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UgKi9cbnZhciB1dGlsc19tYWluID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG52YXIgWUF4aXMgPSByZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2NoYXJ0cy95X2F4aXMuanNcIik7XG52YXIgdXBkYXRlX3lfYXhpcyA9IHJlcXVpcmUoXCIuLi9mb3JtX3VwZGF0ZXMvdXBkYXRlX3lfYXhpcy5qc1wiKTtcbnZhciB1dGlsc19mb3JtcyA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc19mb3Jtcy5qc1wiKTtcblxuXG52YXIgeUF4aXNJbml0ID0gZnVuY3Rpb24geUF4aXNJbml0KCkge1xuXG4gICAgLy9sb2FkIG9wdGlvbnMgZnJvbSB1c2VyIGlucHV0c1xuICAgIHZhciBvcHRpb25zID0ge1xuXG5cbiAgICAgICAgbWF4OiB1cGRhdGVfeV9heGlzLnVwZGF0ZU1heChOdW1iZXIoJChcIiNjaGFydF95X2F4aXNfbWF4X2lucHV0XCIpLnZhbCgpKSksXG4gICAgICAgIG1pbjogdXBkYXRlX3lfYXhpcy51cGRhdGVNaW4oTnVtYmVyKCQoXCIjY2hhcnRfeV9heGlzX21pbl9pbnB1dFwiKS52YWwoKSkpLFxuICAgICAgICBvcHBvc2l0ZTogdXRpbHNfZm9ybXMuZ2V0Q2hlY2tCb3hWYWx1ZSgkKFwiI2NoYXJ0X3lfYXhpc19vcHBvc2l0ZV9jaGVja2JveFwiKSksXG4gICAgICAgIHRpY2tJbnRlcnZhbDogdXBkYXRlX3lfYXhpcy51cGRhdGVUaWNrbWFya0ludGVydmFsKE51bWJlcigkKFwiI2NoYXJ0X3lfYXhpc190aWNrbWFya19pbnRlcnZhbF9pbnB1dFwiKS52YWwoKSkpLFxuXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiAkKFwiI2NoYXJ0X3lfYXhpc190aXRsZV90ZXh0YXJlYVwiKS52YWwoKSxcbiAgICAgICAgICAgIGFsaWduOiAkKFwiLnNlbGVjdGVkX2NoYXJ0X3R5cGVcIikuZGl2VmFsKCkgPT09IFwiYmFyXCIgPyBcIm1pZGRsZVwiIDogXCJoaWdoXCIsXG4gICAgICAgICAgICB4OiBOdW1iZXIoJChcIiNjaGFydF95X2F4aXNfeF9wb3NpdGlvbl9pbnB1dFwiKS52YWwoKSlcbiAgICAgICAgfVxuXG5cbiAgICB9O1xuXG5cbiAgICB2YXIgeUF4aXMgPSBuZXcgWUF4aXMob3B0aW9ucyk7XG4gICAgcmV0dXJuIHlBeGlzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB5QXhpc0luaXQ7XG5cbi8vICAgIFxuLy8gICAgICAgICAgICAgICAgICAgIGFsaWduOiAnaGlnaCcsXG4vL1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxuLy9cdFx0XHRcdFx0XHRcdFxuLy9cdFx0XHRcdFx0XHRcdHJvdGF0aW9uOiAwLFxuLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IC0xNSxcbi8vXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAzNSwiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIga2V5Ym9hcmRfaW5wdXRzID0ge1xuXG5cbiAgICAgICAgYmluZE51bWJlckVudHJ5SW5wdXRzOiBmdW5jdGlvbiBiaW5kTnVtYmVyRW50cnlJbnB1dHMoKSB7XG5cbiAgICAgICAgICAgIHZhciBhZGpWYWx1ZSA9IGZ1bmN0aW9uIGFkalZhbHVlKHZhbCwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IE51bWJlcih2YWwpO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uID09PSBcIitcIiA/IHZhbCArIDEwIDogdmFsIC0gMTA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkKFwiLm51bWJlcl9lbnRyeVwiKS5rZXl1cChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM4KSB7IC8vdXAgcHVzaGVkXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudmFsKGFkalZhbHVlKCQodGhpcykudmFsKCksIFwiK1wiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudmFsKGFkalZhbHVlKCQodGhpcykudmFsKCksIFwiLVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAga2V5Ym9hcmRfaW5wdXRzLmJpbmROdW1iZXJFbnRyeUlucHV0cygpO1xufSkoKTsiLCJ2YXIgdXRpbHNfbWFpbiA9IHJlcXVpcmUoXCIuL3V0aWxzL3V0aWxzX21haW4uanNcIik7XG5cbi8qKiBvYmplY3QgdGhhdCBjb250YWlucyBmdW5jdGlvbnMgZm9yIGFsbCB0aGUgbmF2aWdhdGlvbiwgaWUgY2hhbmdpbmcgYmV0d2VlbiBvcHRpb25zIGFuZCBjaGFydCB0eXBlcyAqL1xudmFyIG5hdmlnYXRpb25fc2V0dXAgPSB7XG5cbiAgICAvKiogd2hlbiB0YWJzIG9uIGxlZnQgc2lkZSBuYXYgYmFyIGFyZSBjbGlja2VkLCBvcHRpb25zIGRpc3BsYXllZCBhcmUgY2hhbmdlZCAqL1xuICAgIHNpZGVOYXZUYWJzQ2hhbmdlOiBmdW5jdGlvbiBzaWRlTmF2VGFic0NoYW5nZSgpIHtcblxuICAgICAgICAkKFwiI3NpZGVfbmF2X3RhYnMgLnRhYlwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL2NoYW5nZSBzZWxlY3RlZCBtZW51IHRhYlxuICAgICAgICAgICAgJChcIiNzaWRlX25hdl90YWJzIC5zZWxlY3RlZF90YWJcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZF90YWJcIik7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwic2VsZWN0ZWRfdGFiXCIpO1xuXG4gICAgICAgICAgICAvL2NoYW5nZSBkaXNwbGF5IGRpdiBzaG93aW5nXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRJRCA9IFwiI1wiICsgJCh0aGlzKS5hdHRyKFwiaWRcIikucmVwbGFjZShcInRhYlwiLCBcImRpc3BsYXlcIik7XG4gICAgICAgICAgICAkKFwiI3NpZGVfZGlzcGxheSAuc2VsZWN0ZWRfZGlzcGxheVwiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkX2Rpc3BsYXlcIik7XG4gICAgICAgICAgICAkKHNlbGVjdGVkSUQpLmFkZENsYXNzKFwic2VsZWN0ZWRfZGlzcGxheVwiKTtcblxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIHdoZW4gY2hhcnQgdHlwZSBpY29uIGlzIGNsaWNrZWQgYW5kIGNoYW5nZWQgKi9cbiAgICBjaGFydFR5cGVJY29uQ2hhbmdlOiBmdW5jdGlvbiBjaGFydFR5cGVJY29uQ2hhbmdlKCkge1xuXG4gICAgICAgICQoXCIjY2hhcnRfdHlwZV9pY29ucyAuY2hhcnRfdHlwZV9pY29uXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vY2hhbmdlIHNlbGVjdGVkIGljb25cbiAgICAgICAgICAgICQoXCIjY2hhcnRfdHlwZV9pY29ucyAuY2hhcnRfdHlwZV9pY29uXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRfY2hhcnRfdHlwZVwiKTtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJzZWxlY3RlZF9jaGFydF90eXBlXCIpO1xuXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKiogd2hlbiBhIGhlbHAgaWNvbiBpcyBjbGlja2VkICovXG5cbiAgICBoZWxwSWNvbkNsaWNrOiBmdW5jdGlvbiBoZWxwSWNvbkNsaWNrKCkge1xuXG4gICAgICAgICQoXCIuaGVscF9pY29uXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJoZWxwX29uXCIpO1xuICAgICAgICAgICAgJChcIi5ub3Rlc1wiLCAkKHRoaXMpLnBhcmVudHMoXCJkaXZcIikpLnRvZ2dsZSgpO1xuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICAvKiogd2hlbiBhIGdldCBjb2RlIGJ1dHRvbiBpcyBjbGlja2VkLCB1cGRhdGUgYW5kIHNob3cgdGhlIGNvZGUgYXJlYS4gKi9cblxuICAgIGdldENvZGVCdXR0b25DbGljazogZnVuY3Rpb24gZ2V0Q29kZUJ1dHRvbkNsaWNrKGFsbF9jaGFydF9vcHRpb25zKSB7XG5cbiAgICAgICAgJChcIiNnZXRfY29kZV9idXR0b25cIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgdmFyICRnZXRfY29kZV9zcGFuID0gJChcIiNnZXRfY29kZV90ZXh0XCIpO1xuICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImNvZGVfb25cIik7XG4gICAgICAgICAgICAkKFwiI21haW5fcmVzdWx0X2NvZGVfZGl2XCIpLnNsaWRlVG9nZ2xlKDEwMCk7XG4gICAgICAgICAgICBpZiAoJGdldF9jb2RlX3NwYW4udGV4dCgpID09PSBcIkdldCBjb2RlXCIpIHtcbiAgICAgICAgICAgICAgICB1dGlsc19tYWluLndyaXRlQ29kZShhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgJGdldF9jb2RlX3NwYW4udGV4dChcIkhpZGUgY29kZVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGdldF9jb2RlX3NwYW4udGV4dChcIkdldCBjb2RlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICAvKiogd2hlbiBjaGFydCBjb2RlIGlzIGVudGVyZWQsIHVwZGF0ZSAqL1xuICAgIGNoYXJ0T3V0cHV0Q29kZUZvY3VzOiBmdW5jdGlvbiAoYWxsX2NoYXJ0X29wdGlvbnMpIHtcbiAgICAgICAgJChcIiNjaGFydF9vdXRwdXRfY29kZVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB1dGlsc19tYWluLndyaXRlQ29kZShhbGxfY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0aW9uX3NldHVwOyIsInZhciBqcV9leHRlbnNpb25zID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIGpRdWVyeS5mbi5leHRlbmQoe1xuICAgICAgICBkaXZWYWw6IGZ1bmN0aW9uIChzdHJpbmcpIHsgLy9leHRlbmQgc28gdGhhdCB3ZSBjYW4gZ2V0IGFuZCBzZXQgXCJ2YWx1ZVwiIHdpdGggZGl2c1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5hdHRyKFwidmFsdWVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cihcInZhbHVlXCIsIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH0pO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpxX2V4dGVuc2lvbnM7IiwidmFyIHV0aWxzX2Zvcm1zID0ge1xuICAgIFxuICAgIFxuICAgIC8qKiByZXR1cm5zIHRydWUgaWYgY2hlY2tib3ggaXMgY2hlY2tlZCwgZmFsc2UgaWYgbm90ICovXG4gICAgZ2V0Q2hlY2tCb3hWYWx1ZTogZnVuY3Rpb24gZ2V0Q2hlY2tCb3hWYWx1ZShlbGVtKXtcbiAgICAgICAgcmV0dXJuIGVsZW0uaXMoJzpjaGVja2VkJyk7XG4gICAgfSxcblxuICAgIC8qKiBnZXRzIGFuIGFycmF5IG9mIHZhbHVlcyBmcm9tIGEgZ2l2ZW4gY2xhc3MgKi9cbiAgICBnZXRDbGFzc1ZhbHVlc0FycmF5OiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgJChcIi5cIiArIGNsYXNzTmFtZSkuZWFjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhcnIucHVzaChOdW1iZXIoJCh0aGlzKS52YWwoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWxzX2Zvcm1zOyIsIi8qKiBNYWluIHV0aWxpdHkgb2JqZWN0LCBjb250YWlucyBmdW5jdGlvbnMgdGhhdCBnZXQgcmV1c2VkIG9mdGVuICovXG52YXIgdXRpbHNfbWFpbiA9IHtcblxuICAgIGNoZWNrZm9yVW5kZWZpbmVkOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgPT09IDAgfHwgaXNOYU4odmFsKSA/IHVuZGVmaW5lZCA6IHZhbDtcbiAgICB9LFxuXG4gICAgLyoqIHNob3J0Y3V0IGZvciBjb25zb2xlLmxvZyAqKi9cbiAgICBsb2c6IGZ1bmN0aW9uIGxvZyhlKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlKTtcbiAgICB9LFxuXG4gICAgLyoqIHR1cm5zIG9iamVjdHMgaW50byBzdHJpbmdzLCBpbmNsdWRpbmcgdGhlaXIgbWV0aG9kcyAqL1xuICAgIGRlZXBTdHJpbmdpZnk6IGZ1bmN0aW9uIGRlZXBTdHJpbmdpZnkob2JqKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkucmVwbGFjZSgvXFxcXG4vZywgXCJcIik7XG5cbiAgICB9LFxuXG4gICAgd3JpdGVDb2RlOiBmdW5jdGlvbiB3cml0ZUNvZGUoYWxsX2NoYXJ0X29wdGlvbnMpIHtcblxuICAgICAgICAvL3BsYWNlIGNvZGUgaW4gY2hhcnRfb3V0cHV0X2NvZGUgYW5kIHJlaW5pdCBoaWdobGlnaHRcbiAgICAgICAgdmFyIGNoYXJ0X29wdGlvbnNfanNfc3RyaW5nID0gdXRpbHNfbWFpbi5kZWVwU3RyaW5naWZ5KGFsbF9jaGFydF9vcHRpb25zKTtcbiAgICAgICAgJChcIiNjaGFydF9vdXRwdXRfY29kZVwiKS50ZXh0KGNoYXJ0X29wdGlvbnNfanNfc3RyaW5nKS5lYWNoKGZ1bmN0aW9uIChpLCBibG9jaykge1xuICAgICAgICAgICAgaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG5cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWxzX21haW47Il19
